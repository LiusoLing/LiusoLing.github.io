import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,e as p,a as n,f as t}from"./app-O6B6fb-J.js";const c={},o=n("p",null,"异常是程序执行过程中的异常行为。",-1),l=n("p",null,"让我们了解什么是Java异常，以及它们如何帮助我们编写更少容易出错的代码。",-1),i=t(`<h2 id="_1-异常处理" tabindex="-1"><a class="header-anchor" href="#_1-异常处理" aria-hidden="true">#</a> 1.异常处理</h2><h3 id="_1-1-什么是异常处理" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是异常处理" aria-hidden="true">#</a> 1.1 什么是异常处理</h3><p>类比现实，我们在网上购买了一件商品，在快递过程中，出现了意料之外的变故，比如破损、丢件等等意外情况，快递公司是会帮忙处理的，最终确保我们能准时收到包裹。</p><p>同样的，在运行Java 程序时，代码执行指令时可能会遇到错误。良好的异常处理可以处理错误，让我们的程序重新走回正轨，保证用户的积极体验。</p><h3 id="_1-2-为什么要使用异常处理" tabindex="-1"><a class="header-anchor" href="#_1-2-为什么要使用异常处理" aria-hidden="true">#</a> 1.2 为什么要使用异常处理</h3><p>我们的编程环境总是一个 <code>理想</code> 的环境：文件系统是好的，网络是正常无波动的，JVM内存总是足够的。</p><p>这样的编程体验无疑是十分快乐的。</p><p><br><br><br><br></p><p>然而，在生产中，<strong>文件系统可能会损坏，网络可能会崩溃，JVM会耗尽内存。</strong> 我们代码的良好体验取决于它如何处理“不良环境”。</p><p>我们必须处理这些缺陷，因为它们对应用程序的正常运行产生负面影响，并形成异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPlayers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;players.dat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> players <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> players<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Player</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此代码选择不处理 <code>IOException</code> ，而是将其传递给调用堆栈。在理想化的环境中，代码工作正常。</p><p>但是，如果缺少 <code>players.dat</code>，生产中可能会发生什么？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span>NoSuchFileException</span><span class="token operator">:</span> players<span class="token punctuation">.</span>dat <span class="token operator">&lt;</span><span class="token operator">--</span> players<span class="token punctuation">.</span>dat file doesn&#39;t exist
    at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span>WindowsException</span><span class="token punctuation">.</span><span class="token function">translateToIOException</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>
    at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span>WindowsException</span><span class="token punctuation">.</span><span class="token function">rethrowAsIOException</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>
    <span class="token comment">// ... more stack trace</span>
    at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span>Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>
    at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span>Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>
    at <span class="token class-name">Exceptions</span><span class="token punctuation">.</span><span class="token function">getPlayers</span><span class="token punctuation">(</span><span class="token class-name">Exceptions</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token class-name">Exception</span> arises in <span class="token function">getPlayers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method<span class="token punctuation">,</span> on line <span class="token number">12</span>
    at <span class="token class-name">Exceptions</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Exceptions</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token function">getPlayers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is called by <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on line <span class="token number">19</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果不处理这个异常，一个健康的程序可能会完全停止运行！</strong> 我们需要确保我们的代码在出现问题时有一个兜底计划。</p><p>值得注意的是，这里暴露的异常还有一个好处，那就是堆栈跟踪本身。正是这种堆栈跟踪，让我们可以快速确定违规代码，而无需附加调试器。</p><p><br><br><br><br></p><h2 id="_2-异常层次结构" tabindex="-1"><a class="header-anchor" href="#_2-异常层次结构" aria-hidden="true">#</a> 2.异常层次结构</h2><p>归根结底，<code>exception</code> 只是 <code>Java对象</code>，它们都从 <code>Throwable</code> 扩展：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>              <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token class-name">Throwable</span> <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-</span> 
              <span class="token operator">|</span>    <span class="token punctuation">(</span>checked<span class="token punctuation">)</span>     <span class="token operator">|</span>
              <span class="token operator">|</span>                  <span class="token operator">|</span>
              <span class="token operator">|</span>                  <span class="token operator">|</span>
      <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token class-name">Exception</span>           <span class="token class-name">Error</span>
      <span class="token operator">|</span>    <span class="token punctuation">(</span>checked<span class="token punctuation">)</span>        <span class="token punctuation">(</span>unchecked<span class="token punctuation">)</span>
      <span class="token operator">|</span>
<span class="token class-name">RuntimeException</span>
  <span class="token punctuation">(</span>unchecked<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特殊情况有三大类：</p><ul><li>检查的例外情况</li><li>未选中的异常/运行时异常</li><li>错误</li></ul><h3 id="_2-1-检查的例外情况" tabindex="-1"><a class="header-anchor" href="#_2-1-检查的例外情况" aria-hidden="true">#</a> 2.1 检查的例外情况</h3><p><strong>检查的异常是Java编译器要求我们处理的异常</strong>。我们必须要么声明性地将异常扔到调用堆栈中，要么我们必须自己处理它。稍后会有更多关于这两者的信息。</p><p>甲骨文的文档告诉我们，当我们可以合理地期望我们方法的调用者能够恢复时，使用检查的异常。</p><p>检查异常的几个例子是 <code>IOException</code> 和 <code>ServletException</code>。</p><h3 id="_2-2-未检查的例外情况" tabindex="-1"><a class="header-anchor" href="#_2-2-未检查的例外情况" aria-hidden="true">#</a> 2.2 未检查的例外情况</h3><p>未选中的异常是Java编译器不需要我们处理的异常。</p><p>简单地说，如果我们创建一个扩展<code>RuntimeException</code>的异常，它将被取消选中；否则，它将被选中。</p><p>虽然这听起来很方便，但甲骨文的文档告诉我们，这两个概念都有充分的理由，例如区分情境错误（已选中）和使用错误（未选中）。</p><p>一些未检查异常的例子有 <code>NullPointerException</code>、<code>IllegalArgumentException</code> 和 <code>SecurityException</code>。</p><h3 id="_2-3-错误" tabindex="-1"><a class="header-anchor" href="#_2-3-错误" aria-hidden="true">#</a> 2.3 错误</h3><p>错误代表严重且通常无法恢复的情况，如库不兼容、无限递归或内存泄漏。</p><p>即使它们没有扩展 <code>RuntimeException</code>，它们也会被取消选中。</p><p>在大多数情况下，我们处理、实例化或扩展错误会很奇怪。通常，我们希望这些一直传播。</p><p>几个错误示例是 <code>StackOverflowError</code> 和 <code>OutOfMemoryError</code>。</p><h2 id="_3-处理异常情况" tabindex="-1"><a class="header-anchor" href="#_3-处理异常情况" aria-hidden="true">#</a> 3.处理异常情况</h2><p>在Java API中，有很多地方可能会出错，其中一些地方在签名或Javadoc中都标有异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@exception</span> <span class="token reference"><span class="token class-name">FileNotFoundException</span></span> ...
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用这些“风险”方法时，我们必须处理检查的异常，并且我们可以处理未检查的异常。Java为我们提供了几种方法来做到这一点：</p><h3 id="_3-1-抛出" tabindex="-1"><a class="header-anchor" href="#_3-1-抛出" aria-hidden="true">#</a> 3.1 抛出</h3><p>“处理”异常的最简单方法是重新抛出它：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>
 
    <span class="token class-name">Scanner</span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>playerFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于FileNotFoundException是一个检查的异常，<strong>这是满足编译器的最简单方法，但它确实意味着任何调用我们方法的人现在也需要处理它！</strong></p><p><code>parseInt</code> 可以抛出 <code>NumberFormatException</code>，但由于它未选中，我们不需要处理它。</p><h3 id="_3-2-捕获" tabindex="-1"><a class="header-anchor" href="#_3-2-捕获" aria-hidden="true">#</a> 3.2 捕获</h3><p>如果我们想尝试自己处理异常，我们可以使用try-catch块。我们可以通过重新抛出我们的异常来处理它：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>playerFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> noFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;File not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者通过不处理来执行恢复步骤：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>playerFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">FileNotFoundException</span> noFile <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;File not found, resetting score.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-最终" tabindex="-1"><a class="header-anchor" href="#_3-3-最终" aria-hidden="true">#</a> 3.3 最终</h3><p>有时无论是否发生异常，我们都有需要执行的代码，这就是 <code>finally</code> 关键字的来源。</p><p>在我们迄今为止的示例中，潜伏着一个讨厌的错误，即默认情况下，Java不会将文件句柄返回给操作系统。</p><p>当然，无论我们是否可以阅读文件，我们都希望确保我们进行适当的清理！</p><p>让我们先用“懒惰”的方式试试这个：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span>
  <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Scanner</span> contents <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>playerFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>contents <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            contents<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，最后块指示我们希望Java运行什么代码，无论尝试读取文件时会发生什么。</p><p>即使FileNotFoundException被抛出调用堆栈，Java也会在这样做之前调用final的内容。</p><p>我们也可以处理异常，并确保我们的资源被关闭：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Scanner</span> contents<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>playerFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> noFile <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;File not found, resetting score.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>contents <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                contents<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> io<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Couldn&#39;t close the reader!&quot;</span><span class="token punctuation">,</span> io<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>因为关闭也是一种“有风险”的方法，我们也需要捕获它的异常！</strong></p><p>这可能看起来很复杂，但我们需要每一块来正确处理每个可能出现的潜在问题。</p><h3 id="_3-4-捕获语法糖" tabindex="-1"><a class="header-anchor" href="#_3-4-捕获语法糖" aria-hidden="true">#</a> 3.4 捕获语法糖</h3><p>幸运的是，从Java 7开始，在处理扩展AutoCloseable的东西时，提供了对应的语法糖让我们可以简化上述语法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>playerFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;File not found, resetting score.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们在try声明中放置自动可关闭的引用时，我们不需要自己关闭资源。</p><p>不过，我们仍然可以使用最后一个块来进行我们想要的任何其他类型的清理。</p><h3 id="_3-5-多次捕获" tabindex="-1"><a class="header-anchor" href="#_3-5-多次捕获" aria-hidden="true">#</a> 3.5 多次捕获</h3><p>有时，代码可以抛出多个异常，我们可以有多个捕获块单独处理每个异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>playerFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Player file wouldn&#39;t load!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Player file was corrupted!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要，多次捕获让我们有机会以不同的方式处理每个异常。</p><p>另请注意，我们没有捕获FileNotFoundException，这是因为它扩展了IOException。因为我们捕获了IOException，Java将考虑也处理其任何子类。</p><p>不过，假设我们需要将FileNotFoundException与更一般的IOException区别对待：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>playerFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Player file not found!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Player file wouldn&#39;t load!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Player file was corrupted!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java允许我们单独处理子类异常，<strong>但你需要将它们放在捕获列表中的更高位置。</strong></p><p>当我们想联合处理多个异常时，Java 7引入了在同一块中捕获多个异常的能力：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>playerFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to load score!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-异常继承" tabindex="-1"><a class="header-anchor" href="#_4-异常继承" aria-hidden="true">#</a> 4.异常继承</h2><p>当我们用 <code>throws</code> 关键字标记方法时，它会影响子类如何覆盖我们的方法。</p><p>在我们的方法抛出检查异常的情况下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exceptions</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadAllPlayers</span><span class="token punctuation">(</span><span class="token class-name">String</span> playersFile<span class="token punctuation">)</span> 
      <span class="token keyword">throws</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类可以有一个“风险较小”的异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FewerExceptions</span> <span class="token keyword">extends</span> <span class="token class-name">Exceptions</span> <span class="token punctuation">{</span>	
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadAllPlayers</span><span class="token punctuation">(</span><span class="token class-name">String</span> playersFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// overridden</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但不允许“更危险”的签名：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoreExceptions</span> <span class="token keyword">extends</span> <span class="token class-name">Exceptions</span> <span class="token punctuation">{</span>		
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadAllPlayers</span><span class="token punctuation">(</span><span class="token class-name">String</span> playersFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MyCheckedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// overridden</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为约定是在编译时由参考类型确定的。如果我创建一个 <code>MoreExceptions</code> 的实例并将其保存到 <code>Exceptions</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exceptions</span> exceptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoreExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exceptions<span class="token punctuation">.</span><span class="token function">loadAllPlayers</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后JVM只会告诉我抓住 <code>TimeoutException</code>，这是错误的，因为我说过 <code>MoreExceptions#loadAllPlayers</code> 抛出不同的异常。</p><p><strong>简而言之，子类可以抛出比其超类更少的检查异常，但不能更多。</strong></p><h2 id="_5-吃掉异常" tabindex="-1"><a class="header-anchor" href="#_5-吃掉异常" aria-hidden="true">#</a> 5.吃掉异常</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// &lt;== catch and swallow</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上称为吃掉异常。大多数时候，这样做对我们来说有点不合适，因为它没有解决问题，而且它使其他代码也无法解决问题。</p><p>但有时，有一个经过检查的例外，我们相信永远不会发生。在这些情况下，我们至少应该添加一个评论，说明我们故意吃了异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// this will never happen</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者简单地打印出错误异常堆栈：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，对我们来说，使用日志会更好：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Couldn&#39;t load the score&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-final中使用return" tabindex="-1"><a class="header-anchor" href="#_6-final中使用return" aria-hidden="true">#</a> 6.final中使用return</h2><p>另一种吃掉异常的方法是从 final 中进行 return。这很糟糕，因为通过突然返回，JVM将删除异常，即使它是由我们的代码抛出的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> playerFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> score<span class="token punctuation">;</span> <span class="token comment">// &lt;== the IOException is dropped</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-常见的异常和错误" tabindex="-1"><a class="header-anchor" href="#_7-常见的异常和错误" aria-hidden="true">#</a> 7.常见的异常和错误</h2><h3 id="_7-1-常见异常" tabindex="-1"><a class="header-anchor" href="#_7-1-常见异常" aria-hidden="true">#</a> 7.1 常见异常</h3><ul><li>IOException - 此异常通常是一种表示网络、文件系统或数据库上某些内容失败的方式。</li><li>ArrayIndexOutOfBoundsException - 此异常意味着我们试图访问不存在的数组索引，就像试图从长度为3的数组获取索引5时一样。</li><li>ClassCastException - 此异常意味着我们试图执行非法转换，例如尝试将字符串转换为列表。我们通常可以通过在铸造前进行防御性检查来避免它。</li><li>IllegalArgumentException - 此异常是我们表示提供的方法或构造函数参数之一无效的通用方式。</li><li>IllegalStateException - 这个异常是一种通用方式，我们可以说我们的内部状态，就像对象的状态一样，是无效的。</li><li>NullPointerException - 此异常意味着我们尝试引用空对象。我们通常可以通过执行防御性空值检查或使用可选来避免它。</li><li>NumberFormatException - 此异常意味着我们试图将字符串转换为数字，但该字符串包含非法字符，例如试图将“5f3”转换为数字。</li></ul><h3 id="_7-2-常见错误" tabindex="-1"><a class="header-anchor" href="#_7-2-常见错误" aria-hidden="true">#</a> 7.2 常见错误</h3><ul><li>StackOverflowError - 此异常意味着堆栈跟踪太大。这有时可能发生在大型应用程序中；然而，这通常意味着我们的代码中发生了一些无限的递归。</li><li>NoClassDefFoundError - 此异常意味着类因不在类路径上或静态初始化失败而无法加载。</li><li>OutOfMemoryError - 此异常意味着JVM没有更多可用于分配更多对象的内存。有时，这是由于内存泄漏。</li></ul>`,106);function u(k,r){return a(),e("div",null,[o,l,p(" more "),i])}const m=s(c,[["render",u],["__file","01 java exception handling.html.vue"]]);export{m as default};
