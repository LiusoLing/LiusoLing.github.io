import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-hJ4_2O4c.js";const p={},t=e(`<p><strong>序列化</strong>是 Java 中一种将对象转换为字节流的机制，以便可以将其存储到文件、通过网络传输或在内存中保存。</p><p>反序列化则是将字节流重新转换为对象的过程。Java 提供了内置的序列化机制，使得开发者可以轻松地实现对象的持久化和传输。</p><p>本文将详细介绍 Java 序列化的基本概念、使用方法以及一些需要注意的事项。</p><h2 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念" aria-hidden="true">#</a> 1. 基本概念</h2><h3 id="_1-1-什么是序列化" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是序列化" aria-hidden="true">#</a> 1.1 什么是序列化?</h3><p><strong>序列化</strong>是将对象的状态转换为字节流的过程，以便可以将其保存到文件、数据库或通过网络传输。反序列化则是将字节流重新转换为对象的过程。</p><h3 id="_1-2-为什么需要序列化" tabindex="-1"><a class="header-anchor" href="#_1-2-为什么需要序列化" aria-hidden="true">#</a> 1.2 为什么需要序列化?</h3><p>序列化的主要用途包括:</p><ul><li><strong>持久化</strong>:将对象保存到文件或数据库中，以便在程序重启后恢复对象状态。</li><li><strong>网络通信</strong>:在分布式系统中，序列化允许对象通过网络传输。</li><li><strong>内存存储</strong>:将对象保存到内存中，以便在程序的不同部分共享。</li></ul><h2 id="_2-实现序列化" tabindex="-1"><a class="header-anchor" href="#_2-实现序列化" aria-hidden="true">#</a> 2. 实现序列化</h2><h3 id="_2-1-serializable-接口" tabindex="-1"><a class="header-anchor" href="#_2-1-serializable-接口" aria-hidden="true">#</a> 2.1 <code>Serializable</code> 接口</h3><p>Java 中的序列化是通过实现 <code>java.io.Serializable</code> 接口来实现的。该接口是一个标记接口，不包含任何方法。任何实现了 <code>Serializable</code> 接口的类都可以被序列化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name， <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Person{name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;&#39;， age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>:</p><ul><li><code>Serializable</code> 接口没有任何方法，它只是一个标记接口，表示该类可以被序列化。</li></ul><h3 id="_2-2-序列化对象" tabindex="-1"><a class="header-anchor" href="#_2-2-序列化对象" aria-hidden="true">#</a> 2.2 序列化对象</h3><p>要将对象序列化到文件中，可以使用 <code>ObjectOutputStream</code> 类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializationExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;John Doe&quot;</span>， <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> fileOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;person.ser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">ObjectOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对象已序列化到 person.ser 文件中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码说明</strong>:</p><ul><li><code>ObjectOutputStream</code> 用于将对象写入文件。</li><li><code>writeObject()</code> 方法将 <code>Person</code> 对象序列化并写入文件中。</li></ul><h3 id="_2-3-反序列化对象" tabindex="-1"><a class="header-anchor" href="#_2-3-反序列化对象" aria-hidden="true">#</a> 2.3 反序列化对象</h3><p>要将对象从文件中反序列化，可以使用 <code>ObjectInputStream</code> 类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeserializationExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fileIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;person.ser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">ObjectInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对象已从 person.ser 文件中反序列化&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码说明</strong>:</p><ul><li><code>ObjectInputStream</code> 用于从文件中读取对象。</li><li><code>readObject()</code> 方法将字节流反序列化为 <code>Person</code> 对象。</li></ul><h2 id="_3-序列化的注意事项" tabindex="-1"><a class="header-anchor" href="#_3-序列化的注意事项" aria-hidden="true">#</a> 3. 序列化的注意事项</h2><h3 id="_3-1-serialversionuid" tabindex="-1"><a class="header-anchor" href="#_3-1-serialversionuid" aria-hidden="true">#</a> 3.1 <code>serialVersionUID</code></h3><p><code>serialVersionUID</code> 是序列化机制中的一个重要字段，用于标识类的版本。如果序列化后的类发生改变(例如添加或删除字段)，反序列化时可能会抛出 <code>InvalidClassException</code>。为了避免这种情况，建议为每个可序列化的类显式声明 <code>serialVersionUID</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意</strong>:</p><ul><li>如果不显式声明 <code>serialVersionUID</code>，Java 会根据类的结构和字段自动生成一个。如果类发生变化，自动生成的 <code>serialVersionUID</code> 也会变化，可能导致反序列化失败。</li></ul><h3 id="_3-2-序列化继承" tabindex="-1"><a class="header-anchor" href="#_3-2-序列化继承" aria-hidden="true">#</a> 3.2 序列化继承</h3><p>如果父类实现了 <code>Serializable</code> 接口，子类将自动支持序列化。如果父类没有实现 <code>Serializable</code>，子类仍然可以实现序列化，但父类的字段不会被序列化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> department<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name， <span class="token keyword">int</span> age， <span class="token class-name">String</span> department<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name， age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Employee{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;department=&#39;&quot;</span> <span class="token operator">+</span> department <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;} &quot;</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>:</p><ul><li>如果父类没有实现 <code>Serializable</code>，子类可以通过实现 <code>Serializable</code> 来支持序列化，但父类中的字段不会被序列化。</li></ul><h3 id="_3-3-transient-关键字" tabindex="-1"><a class="header-anchor" href="#_3-3-transient-关键字" aria-hidden="true">#</a> 3.3 <code>transient</code> 关键字</h3><p><code>transient</code> 关键字用于标记不需要序列化的字段。例如，敏感数据(如密码)或派生字段(可以根据其他字段计算得出的字段)可以标记为 <code>transient</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span> <span class="token comment">// 不会序列化</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> username， <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;User{username=&#39;&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;&#39;， password=&#39;&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">&quot;&#39;}&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>:</p><ul><li><code>transient</code> 字段在序列化时会被忽略，反序列化时其值为默认值(如 <code>null</code> 或 <code>0</code>)。</li></ul><h3 id="_3-4-自定义序列化" tabindex="-1"><a class="header-anchor" href="#_3-4-自定义序列化" aria-hidden="true">#</a> 3.4 自定义序列化</h3><p>如果需要自定义序列化过程，可以在类中实现 <code>writeObject</code> 和 <code>readObject</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    out<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认序列化</span>
    out<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自定义序列化</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>， <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
    in<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认反序列化</span>
    password <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自定义反序列化</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>:</p><ul><li>自定义序列化通常用于处理敏感数据或优化序列化性能。</li></ul><h2 id="_4-序列化的局限性" tabindex="-1"><a class="header-anchor" href="#_4-序列化的局限性" aria-hidden="true">#</a> 4. 序列化的局限性</h2><h3 id="_4-1-性能问题" tabindex="-1"><a class="header-anchor" href="#_4-1-性能问题" aria-hidden="true">#</a> 4.1 性能问题</h3><p>Java 的默认序列化机制在性能上可能不如其他序列化框架(如 JSON、Protocol Buffers 等)。对于需要高性能的场景，建议使用更高效的序列化工具。</p><h3 id="_4-2-兼容性问题" tabindex="-1"><a class="header-anchor" href="#_4-2-兼容性问题" aria-hidden="true">#</a> 4.2 兼容性问题</h3><p>如果序列化后的类发生改变(例如添加或删除字段)，反序列化时可能会抛出异常。因此，序列化机制不适合用于长期存储或跨版本的场景。</p><h3 id="_4-3-安全性问题" tabindex="-1"><a class="header-anchor" href="#_4-3-安全性问题" aria-hidden="true">#</a> 4.3 安全性问题</h3><p>Java 序列化机制存在一定的安全风险，恶意代码可以通过反序列化攻击攻击系统。因此，建议避免反序列化不受信任的数据。</p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><p>Java 序列化是一种将对象转换为字节流的机制，便于对象的持久化、网络传输和内存存储。通过实现 <code>Serializable</code> 接口，开发者可以轻松实现序列化。</p><p>然而，序列化也存在一些局限性，如性能问题、兼容性问题和安全性问题。</p><p>在实际开发中，应根据具体需求选择合适的序列化机制，并注意处理 <code>serialVersionUID</code>、<code>transient</code> 字段以及自定义序列化等问题。</p>`,57),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","08 java serialization.html.vue"]]);export{d as default};
