import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t,a as p,f as e}from"./app-c0qboIoH.js";const o="/assets/images/base/base-04.jpg",c={},l=p("p",null,"现实中，经常碰到各种转换，数据类型转换也是一样的，由于数据类型不匹配或数据存储、数据处理、数据计算等等其他原因，我们需要将数据转换成想要的类型。",-1),i=e(`<h2 id="自动类型转换" tabindex="-1"><a class="header-anchor" href="#自动类型转换" aria-hidden="true">#</a> 自动类型转换</h2><p>自动类型转换（自动类型提升）是 Java 编译器在不需要显式转换的情况下，将一种基本数据类型自动转换为另一种基本数据类型的过程。</p><p>这种转换通常发生在表达式求值期间（当不同类型的数据需要相互兼容时）。</p><p><mark>自动类型转换只能向上转换</mark>。即从较小的数据类型（如 int）到较大的数据类型（如 long 或 double），因为较大的数据类型可以容纳较小数据类型的所有可能值，所以它们的转换是安全的。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>基本数据类型间的自动转换：</p><p>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</p><p>char -&gt; int -&gt; long -&gt; float -&gt; double</p></div><p>自动转换正确示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> intValue <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> doubleValue <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>

<span class="token comment">// 自动类型转换：intValue 被转换为 double 类型</span>
<span class="token keyword">double</span> result <span class="token operator">=</span> intValue <span class="token operator">*</span> doubleValue<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结果: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：结果: 12.5</span>


<span class="token keyword">float</span> price1 <span class="token operator">=</span> <span class="token number">10.9f</span><span class="token punctuation">;</span> <span class="token comment">// 定义牙膏的价格，单精度浮点型float</span>
<span class="token keyword">double</span> price2 <span class="token operator">=</span> <span class="token number">5.8</span><span class="token punctuation">;</span> <span class="token comment">// 定义面巾纸的价格，双精度浮点型double</span>
<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 定义牙膏的数量，整型 int</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 定义面巾纸的数量，整型 int</span>
<span class="token keyword">double</span> res <span class="token operator">=</span> price1 <span class="token operator">*</span> num1 <span class="token operator">+</span> price2 <span class="token operator">*</span> num2<span class="token punctuation">;</span> <span class="token comment">// 计算总价</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一共付给收银员&quot;</span> <span class="token operator">+</span> res <span class="token operator">+</span> <span class="token string">&quot;元&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：一共付给收银员44.99999923706055元</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动转换错误示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>

<span class="token comment">// 当表达式求值的时候，操作数被自动的提升为 int 型，</span>
<span class="token comment">// 计算结果也被提升为 int 型，无法再用 byte 型接收结果。</span>
b <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Type mismatch: cannot convert from int to byte</span>

<span class="token comment">// 正确写法</span>
b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> b <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h2><p>强制类型转换需要程序员显式地指定要执行的转换，强制类型转换可能会导致数据丢失或精度降低，因为目标类型可能无法容纳原始类型的所有可能值。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>基本数据类型间的强制转换：</p><p>double -&gt; float -&gt; long -&gt; int -&gt; char -&gt; short -&gt; byte</p></div><p>强制转换示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> doubleValue <span class="token operator">=</span> <span class="token number">42.8</span><span class="token punctuation">;</span>

<span class="token comment">// 强制类型转换：将 double 类型转换为 int 类型</span>
<span class="token keyword">int</span> intValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> doubleValue<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;整数值: &quot;</span> <span class="token operator">+</span> intValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：整数值: 42</span>


<span class="token keyword">float</span> price1 <span class="token operator">=</span> <span class="token number">10.9f</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> price2 <span class="token operator">=</span> <span class="token number">5.8</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> res2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>price1 <span class="token operator">*</span> num1 <span class="token operator">+</span> price2 <span class="token operator">*</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一共付给收银员&quot;</span> <span class="token operator">+</span> res2 <span class="token operator">+</span> <span class="token string">&quot;元&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：一共付给收银员44元</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进制" tabindex="-1"><a class="header-anchor" href="#进制" aria-hidden="true">#</a> 进制</h2><p>计算机存储都以2进制比特位数据来存储的。</p><p>1byte=8bit（8个位数的二进制）</p><p>1个数字或者1个字母占用1个字节，1个汉字占用2个字节。</p><p>为什么Java中char类型只能存1个字母或数字呢？</p><p>char类型的值是1个字符（无论是数字、字母还是汉字），1个字符在计算机中占用2个字节。</p><div class="hint-container tip"><p class="hint-container-title">常用进制</p><ul><li>十进制：逢十进一，每个位数上只能是0-9的任意数字；</li><li>二进制：逢二进一，每个位数上只能是0或1；</li><li>八进制：逢八进一，每个位数上只能是0-7的任意数字；</li><li>十六进制：逢十六进一，每个数位上可以使0-9，A-F的任意数字；</li></ul></div><p>通过Java内置类实现进制转换：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// toBinaryString() 将数值转换为二进制</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;十进制55转换为二进制结果为：&quot;</span><span class="token operator">+</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// toOctalString() 将数值转换为八进制</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;十进制55转换为八进制结果为：&quot;</span><span class="token operator">+</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// toHexString() 将数值转换为十六进制</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;十进制55转换为十六进制结果为：&quot;</span><span class="token operator">+</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>一图总结如下：</p><figure><img src="`+o+'" alt="类型转换" tabindex="0" loading="lazy"><figcaption>类型转换</figcaption></figure>',26);function u(r,k){return s(),a("div",null,[l,t(" more "),i])}const v=n(c,[["render",u],["__file","04 base data convert.html.vue"]]);export{v as default};
