import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,e as p,a as n,f as t}from"./app-O6B6fb-J.js";const o={},c=n("p",null,"Java异常分为两大类：检查异常和未检查异常。",-1),i=n("p",null,"在本教程中，我们将提供一些关于如何使用它们的代码示例。",-1),l=t(`<h2 id="_1-检查异常" tabindex="-1"><a class="header-anchor" href="#_1-检查异常" aria-hidden="true">#</a> 1.检查异常</h2><p>一般来说，检查的异常代表程序无法控制的错误。例如，如果输入文件不存在，<code>FileInputStream</code> 的构造函数会抛出 <code>FileNotFoundException</code>。</p><p><strong>Java在编译时验证检查的异常。</strong></p><p>因此，我们应该使用 throws 关键字来声明一个检查的异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkedExceptionWithThrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;not_existing_file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileInputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以使用try-catch块来处理已选中的异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkedExceptionWithTryCatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;not_existing_file.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">FileInputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java中一些常见的检查异常是 <code>IOException</code>、<code>SQLException</code> 和 <code>ParseException</code>。</p><p><code>Exception</code>类是检查异常的超类，因此我们可以通过扩展 <code>Exception</code> 来创建自定义检查异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IncorrectFileNameException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">IncorrectFileNameException</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br><br><br><br></p><h2 id="_2-未检查的异常" tabindex="-1"><a class="header-anchor" href="#_2-未检查的异常" aria-hidden="true">#</a> 2.未检查的异常</h2><p>如果程序抛出未检查的异常，它会在程序逻辑中反映一些错误。</p><p>例如，如果我们将一个数字除以0，Java将抛出ArithmeticException：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">divideByZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> numerator <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> denominator <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> numerator <span class="token operator">/</span> denominator<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Java不会在编译时验证未检查的异常。</strong></p><p>此外，我们不必在使用 throws 关键字的方法中声明未选中的异常。尽管上述代码在编译时没有任何错误，但它将在运行时抛出ArithmeticException。</p><p>Java中一些常见的未检查异常是 <code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code> 和 <code>IllegalArgumentException</code>。</p><p><code>RuntimeException</code> 类是所有未选中异常的超类，因此我们可以通过扩展 <code>RuntimeException</code> 来创建自定义未选中异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullOrEmptyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">NullOrEmptyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-何时使用检查异常和未检查异常" tabindex="-1"><a class="header-anchor" href="#_3-何时使用检查异常和未检查异常" aria-hidden="true">#</a> 3.何时使用检查异常和未检查异常</h2><p>在Java中使用异常是一个很好的做法，这样我们就可以将错误处理代码与常规代码分开。然而，我们需要决定抛出哪种类型的异常。</p><p>Oracle Java文档提供了有关何时使用已检查的异常和未检查的异常的指导：</p><p><strong>“如果可以合理地期望客户端从异常中恢复，请将其定为已检查的异常。如果客户端无法从异常中恢复，请将其定为未检查的异常。”</strong></p><p>例如，在我们打开文件之前，我们可以先验证输入文件名。如果用户输入文件名无效，我们可以抛出一个自定义检查异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCorrectFileName</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IncorrectFileNameException</span><span class="token punctuation">(</span><span class="token string">&quot;Incorrect filename : &quot;</span> <span class="token operator">+</span> fileName <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，我们可以通过接受另一个用户输入文件名来恢复正常使用系统。</p><p>但是，如果输入文件名是空指针或空字符串，则意味着我们在代码中存在一些错误。在这种情况下，我们应该抛出一个未检查的异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>fileName <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fileName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullOrEmptyException</span><span class="token punctuation">(</span><span class="token string">&quot;The filename is null or empty.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function u(r,d){return a(),e("div",null,[c,i,p(" more "),l])}const m=s(o,[["render",u],["__file","02 java checked unchecked exception.html.vue"]]);export{m as default};
