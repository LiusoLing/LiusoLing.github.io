import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as p,e as t,a as s,b as n,f as c}from"./app-hJ4_2O4c.js";const l={},o=s("p",null,[n("在这个快速教程中，我们将看看 "),s("code",null,"super"),n(" Java关键字。")],-1),i=s("p",null,[n("简单地说，"),s("strong",null,"我们可以使用超级关键字来访问父类。")],-1),u=s("p",null,"让我们探索核心关键字在语言中的应用。",-1),r=c(`<h2 id="_1-构造函数的super关键字" tabindex="-1"><a class="header-anchor" href="#_1-构造函数的super关键字" aria-hidden="true">#</a> 1.构造函数的super关键字</h2><p>**我们可以使用super()调用父默认构造函数。**它应该是构造函数中的第一个语句。</p><p>在我们的示例中，我们将super（消息）与String参数一起使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperSub</span> <span class="token keyword">extends</span> <span class="token class-name">SuperBase</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">SuperSub</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们创建一个子类实例，看看后面发生了什么：</p><p><br><br><br><br><br><br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SuperSub</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperSub</span><span class="token punctuation">(</span><span class="token string">&quot;message from the child class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新关键字调用SuperSub的构造函数，它本身首先调用父构造函数，并将String参数传递给它。</p><h2 id="_2-访问父类变量" tabindex="-1"><a class="header-anchor" href="#_2-访问父类变量" aria-hidden="true">#</a> 2.访问父类变量</h2><p>让我们创建一个带有消息实例变量的父类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperBase</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;super class&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// default constructor</span>

    <span class="token keyword">public</span> <span class="token class-name">SuperBase</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们创建一个具有相同名称变量的子类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperSub</span> <span class="token keyword">extends</span> <span class="token class-name">SuperBase</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;child class&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getParentMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用超级关键字从子类访问父变量。</p><h2 id="_3-重写方法" tabindex="-1"><a class="header-anchor" href="#_3-重写方法" aria-hidden="true">#</a> 3.重写方法</h2><p>让我们向父类添加一个实例方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperBase</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;super class&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br><br><br><br><br><br> 覆盖我们子类中的printMessage()方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperSub</span> <span class="token keyword">extends</span> <span class="token class-name">SuperBase</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;child class&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SuperSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们可以使用super从子类访问重写方法。</strong> 构造函数中的super.printMessage()调用来自SuperBase的父方法。</p>`,20);function d(k,v){return e(),p("div",null,[o,i,u,t(" more "),r])}const g=a(l,[["render",d],["__file","13 java super keyword.html.vue"]]);export{g as default};
