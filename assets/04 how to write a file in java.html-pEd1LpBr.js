const e=JSON.parse('{"key":"v-3519b8d6","path":"/javaer/base/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/7.Java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/04%20how%20to%20write%20a%20file%20in%20java.html","title":"04. 写入文件","lang":"zh-CN","frontmatter":{"title":"04. 写入文件","icon":"pen-to-square","order":4,"author":"LiuSongLing","date":"2025-01-04T00:00:00.000Z","category":["java"],"tag":["java","i/o"],"sticky":false,"star":false,"description":"在Java中,将数据写入文件是一项常见的任务。无论是写入文本数据、二进制数据,还是追加内容,Java都提供了多种方法来实现这些需求。 本文将介绍几种常见的文件写入方法,并简要说明它们的优缺点。 1.使用 java.io 包中的类 1.1 FileWriter 写入文本文件 FileWriter 是写入文本文件最常用的类之一。它可以直接将字符串写入文件,适合处理简单的文本数据。 try (FileWriter writer = new FileWriter(\\"example.txt\\")) { writer.write(\\"Hello, World!\\"); System.out.println(\\"文件写入成功!\\"); } catch (IOException e) { e.printStackTrace(); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/javaer/base/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/7.Java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/04%20how%20to%20write%20a%20file%20in%20java.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"04. 写入文件"}],["meta",{"property":"og:description","content":"在Java中,将数据写入文件是一项常见的任务。无论是写入文本数据、二进制数据,还是追加内容,Java都提供了多种方法来实现这些需求。 本文将介绍几种常见的文件写入方法,并简要说明它们的优缺点。 1.使用 java.io 包中的类 1.1 FileWriter 写入文本文件 FileWriter 是写入文本文件最常用的类之一。它可以直接将字符串写入文件,适合处理简单的文本数据。 try (FileWriter writer = new FileWriter(\\"example.txt\\")) { writer.write(\\"Hello, World!\\"); System.out.println(\\"文件写入成功!\\"); } catch (IOException e) { e.printStackTrace(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-10T03:15:44.000Z"}],["meta",{"property":"article:author","content":"LiuSongLing"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"i/o"}],["meta",{"property":"article:published_time","content":"2025-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-10T03:15:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04. 写入文件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-10T03:15:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LiuSongLing\\"}]}"]]},"headers":[{"level":2,"title":"1.使用 java.io 包中的类","slug":"_1-使用-java-io-包中的类","link":"#_1-使用-java-io-包中的类","children":[{"level":3,"title":"1.1 FileWriter 写入文本文件","slug":"_1-1-filewriter-写入文本文件","link":"#_1-1-filewriter-写入文本文件","children":[]},{"level":3,"title":"1.2 BufferedWriter 提高写入效率","slug":"_1-2-bufferedwriter-提高写入效率","link":"#_1-2-bufferedwriter-提高写入效率","children":[]},{"level":3,"title":"1.3 FileOutputStream 写入二进制数据","slug":"_1-3-fileoutputstream-写入二进制数据","link":"#_1-3-fileoutputstream-写入二进制数据","children":[]}]},{"level":2,"title":"2.使用 java.nio 包中的类","slug":"_2-使用-java-nio-包中的类","link":"#_2-使用-java-nio-包中的类","children":[{"level":3,"title":"2.1 Files.write() 方法","slug":"_2-1-files-write-方法","link":"#_2-1-files-write-方法","children":[]},{"level":3,"title":"2.2 Files.newBufferedWriter() 方法","slug":"_2-2-files-newbufferedwriter-方法","link":"#_2-2-files-newbufferedwriter-方法","children":[]}]},{"level":2,"title":"3.追加内容到文件","slug":"_3-追加内容到文件","link":"#_3-追加内容到文件","children":[{"level":3,"title":"3.1 FileWriter 追加模式","slug":"_3-1-filewriter-追加模式","link":"#_3-1-filewriter-追加模式","children":[]},{"level":3,"title":"3.2 Files.write() 追加模式","slug":"_3-2-files-write-追加模式","link":"#_3-2-files-write-追加模式","children":[]}]},{"level":2,"title":"4.使用第三方库","slug":"_4-使用第三方库","link":"#_4-使用第三方库","children":[{"level":3,"title":"4.1 Apache Commons IO","slug":"_4-1-apache-commons-io","link":"#_4-1-apache-commons-io","children":[]},{"level":3,"title":"4.2 Google Guava","slug":"_4-2-google-guava","link":"#_4-2-google-guava","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1739157344000,"updatedTime":1739157344000,"contributors":[{"name":"liusongling","email":"15879144378@163.com","commits":1}]},"readingTime":{"minutes":4.04,"words":1211},"filePathRelative":"javaer/base/一、Java基础/7.Java输入输出流/04 how to write a file in java.md","localizedDate":"2025年1月4日","excerpt":"<p>在Java中,将数据写入文件是一项常见的任务。无论是写入文本数据、二进制数据,还是追加内容,Java都提供了多种方法来实现这些需求。</p>\\n<p>本文将介绍几种常见的文件写入方法,并简要说明它们的优缺点。</p>\\n<h2> 1.使用 <code>java.io</code> 包中的类</h2>\\n<h3> 1.1 <code>FileWriter</code> 写入文本文件</h3>\\n<p><code>FileWriter</code> 是写入文本文件最常用的类之一。它可以直接将字符串写入文件,适合处理简单的文本数据。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">FileWriter</span> writer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">FileWriter</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"example.txt\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    writer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello, World!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"文件写入成功!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
