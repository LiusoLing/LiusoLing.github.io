import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e,a as p,f as t}from"./app-O6B6fb-J.js";const c={},o=p("p",null,"在本教程中，我们将讨论Java中的接口。我们还将看到Java如何使用它们来实现多态性和多重继承。",-1),l=t(`<h2 id="_1-什么是inteface-接口" tabindex="-1"><a class="header-anchor" href="#_1-什么是inteface-接口" aria-hidden="true">#</a> 1.什么是inteface(接口)</h2><p>在Java中，接口是一种抽象类型，包含方法和常量变量的集合。它是Java的核心概念之一，<strong>用于实现抽象、多态性和多重继承</strong>。</p><p>让我们看看Java中接口的简单示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Electronic</span> <span class="token punctuation">{</span>

    <span class="token comment">// 常量变量</span>
    <span class="token class-name">String</span> <span class="token constant">LED</span> <span class="token operator">=</span> <span class="token string">&quot;LED&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 抽象方法</span>
    <span class="token keyword">int</span> <span class="token function">getElectricityUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 静态方法</span>
    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEnergyEfficient</span><span class="token punctuation">(</span><span class="token class-name">String</span> electtronicType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>electtronicType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">LED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 默认方法</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">printDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Electronic Description&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 <code>implements</code> 关键字在 Java 类中实现接口。</p><p>接下来，让我们创建一个计算机类，实现我们刚刚创建的电子接口：</p><p><br><br><br><br><br><br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token keyword">implements</span> <span class="token class-name">Electronic</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getElectricityUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-创建接口的限制" tabindex="-1"><a class="header-anchor" href="#_2-创建接口的限制" aria-hidden="true">#</a> 2.创建接口的限制</h2><p>接口中，我们允许使用：</p><ul><li><p>常量变量</p></li><li><p>抽象方法</p></li><li><p>静态方法</p></li><li><p>默认方法</p></li></ul><p>并有以下限制：</p><blockquote><ul><li>不能直接实例化接口</li><li>接口可以是空的，里面没有方法或变量</li><li>我们不能在接口定义中使用最后一个词，因为它会导致编译器错误</li><li>所有接口声明都应具有公共或默认访问修饰符；抽象修饰符将由编译器自动添加</li><li>接口方法无法保护或最终</li><li>在Java 9之前，接口方法不能是私有的；然而，Java 9引入了在接口中定义私有方法的可能性</li><li>根据定义，接口变量是公共的、静态的和最终的；我们不允许更改它们的可见性</li></ul></blockquote><h2 id="_3-接口的作用" tabindex="-1"><a class="header-anchor" href="#_3-接口的作用" aria-hidden="true">#</a> 3.接口的作用</h2><h3 id="_3-1行为功能" tabindex="-1"><a class="header-anchor" href="#_3-1行为功能" aria-hidden="true">#</a> 3.1行为功能</h3><p>我们使用接口来添加某些行为功能，这些功能可以由不相关的类使用。例如，<code>Comparable</code>、<code>Comparator</code> 和 <code>Cloneable</code> 是Java接口，可以由不相关的类实现。</p><p>以下是用于比较员工类两个实例的比较器接口示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeSalaryComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employeeA<span class="token punctuation">,</span> <span class="token class-name">Employee</span> employeeB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>employeeA<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> employeeB<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>employeeA<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> employeeB<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2多重继承" tabindex="-1"><a class="header-anchor" href="#_3-2多重继承" aria-hidden="true">#</a> 3.2多重继承</h3><p>Java类只支持单继承。然而，通过使用接口，我们也能够间接实现多继承。</p><p><br><br><br><br><br><br></p><p>例如，在下面的示例中，我们注意到Car类实现了Fly和Transform接口。通过这样做，它继承了飞行和转换的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transform</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Fly</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Fly</span><span class="token punctuation">,</span> <span class="token class-name">Transform</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I can Fly!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I can Transform!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3多态性" tabindex="-1"><a class="header-anchor" href="#_3-3多态性" aria-hidden="true">#</a> 3.3多态性</h3><p>问这个问题开始：<strong>什么是多态性</strong>？它是对象在运行时采取不同形式的能力。更具体地说，是执行与运行时特定对象类型相关的覆盖方法。</p><p><strong>在Java中，我们可以使用接口实现多态性</strong>。例如，形状界面可以采取不同的形式——它可以是圆形或正方形。</p><p>让我们从定义形状界面开始：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br><br><br><br></p><p>现在让我们创建Circle类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Circle&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有Square类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Square&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，是时候使用我们的Shape接口及其实现来看到多态性了。</p><p>让我们实例化一些形状对象，将它们添加到列表中，最后在循环中打印它们的名称：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Shape</span> circleShape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Shape</span> squareShape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

shapes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>circleShape<span class="token punctuation">)</span><span class="token punctuation">;</span>
shapes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>squareShape<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Shape</span> shape <span class="token operator">:</span> shapes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-默认方法" tabindex="-1"><a class="header-anchor" href="#_4-默认方法" aria-hidden="true">#</a> 4.默认方法</h2><p>Java 7及以下版本中的传统接口不提供向后兼容性。</p><p>这意味着，<strong>如果您有用Java 7或更早版本编写的遗留代码，并且您决定向现有接口添加抽象方法，那么所有实现该接口的类都必须覆盖新的抽象方法。否则，代码将中断。</strong></p><p>Java 8通过引入可选且可以在接口级别实现的 <strong>默认方法解决了这个问题。</strong></p><h2 id="_5-接口继承规则" tabindex="-1"><a class="header-anchor" href="#_5-接口继承规则" aria-hidden="true">#</a> 5.接口继承规则</h2><p>为了通过接口实现多重继承，我们必须记住一些规则。</p><h3 id="_5-1扩展另一个接口的接口" tabindex="-1"><a class="header-anchor" href="#_5-1扩展另一个接口的接口" aria-hidden="true">#</a> 5.1扩展另一个接口的接口</h3><p>当一个接口扩展另一个接口时，它会继承该接口的所有抽象方法。让我们从创建两个界面开始，HasColor和Shape：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HasColor</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Box</span> <span class="token keyword">extends</span> <span class="token class-name">HasColor</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，Box使用关键字扩展从HasColor继承。通过这样做，Box接口继承了getColor。因此，Box界面现在有两种方法：getColor和getHeight。</p><p><br><br><br><br><br><br></p><h3 id="_5-2实现接口的抽象类" tabindex="-1"><a class="header-anchor" href="#_5-2实现接口的抽象类" aria-hidden="true">#</a> 5.2实现接口的抽象类</h3><p>当抽象类实现接口时，它会继承其所有抽象和默认方法。让我们考虑Transform接口和实现它的抽象类Vicle：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transform</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">printSpecs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Transform Specification&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token keyword">implements</span> <span class="token class-name">Transform</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vehicle类继承了两种方法：抽象变换方法和默认的printSpecs方法。</p><h2 id="_6-功能接口" tabindex="-1"><a class="header-anchor" href="#_6-功能接口" aria-hidden="true">#</a> 6.功能接口</h2><p>Java自早期以来就有许多功能接口，例如 <code>Comparable（自Java 1.2以来）</code> 和 <code>Runnable（自Java 1.0以来）</code>。</p><p>Java 8引入了新的功能接口，如谓词、消费者和函数。</p>`,54);function i(u,r){return s(),a("div",null,[o,e(" more "),l])}const v=n(c,[["render",i],["__file","07 java inteface.html.vue"]]);export{v as default};
