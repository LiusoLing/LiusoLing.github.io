import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as e,e as p,a,f as o}from"./app-5cCCUltF.js";const t={},c=a("p",null,"Java是一种静态类型、面向对象的高级编程语言。它与平台无关 -- Java可以在 Windows 平台上编写和编译，而在 MacOS 或 Linux 上运行，并且无需对源码进行任何的修改。",-1),l=a("p",null,"现在，让我们开始学习并理解Java语法的基础知识。",-1),i=o(`<h2 id="_1-java数据类型" tabindex="-1"><a class="header-anchor" href="#_1-java数据类型" aria-hidden="true">#</a> 1.Java数据类型</h2><p>Java中有两大数据类型：<strong>原始类型</strong>、<strong>对象/引用类型</strong>。</p><p><strong>原始类型是存储简单数据并构成数据操作基础的基本数据类型</strong>。例如Java具有整数值（int、long、byte、short）、浮点值（float和double）、字符值（char）和逻辑值（boolean）的原始类型。</p><p><strong>引用类型是包含对值或其他对象的引用的对象，或对表示没有值的特殊值空的引用</strong>。</p><p>String类是引用类型的一个很好的例子。该类的实例称为对象，表示一系列字符，例如“Hello World”。 <br><br><br><br><br><br></p><h2 id="_2-在java中声明变量" tabindex="-1"><a class="header-anchor" href="#_2-在java中声明变量" aria-hidden="true">#</a> 2.在Java中声明变量</h2><p>要在Java中声明变量，我们必须指定其<code>名称</code>（也称作标识符）和<code>类型</code>。让我们看一个简单示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">double</span> c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中，变量将根据其声明的类型接收默认初始值。</p><p>由于我们声明我们的变量为 <code>int</code> 和 <code>double</code> ，它们的默认值分别为 0 和 0.0。</p><p><strong>我们也可以使用赋值运算符（=）在声明期间初始化变量：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上述示例中，我们声明一个具有 <code>标识符a</code> 的变量为 <code>int类型</code> ，并使用 <code>赋值运算符（=）</code>为其赋值 <code>10</code>，并使用 <code>英文分号（;）</code>终止语句。</p><p><mark>在Java中，所有语句都必须以分号结尾。</mark></p><p><br><br><br><br><br><br></p><p><strong>标识符是任何长度的名称，由字母、数字、下划线和美元符号组成</strong>，遵循以下规则：</p><ul><li>以字母、下划线（_）或美元符号（$）开头</li><li>不能是保留的Java关键字</li><li>不能是 true, false, or null</li></ul><p>让我们扩展上述示例代码，以一个包含简单的算术运算的代码作为示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> a <span class="token operator">+</span> <span class="token string">&quot; + &quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将上面代码片段的前三行读为 “<strong>将10的值分配给a，将5的值分配给b，将a和b的值相加，并将结果分配给c</strong>”。</p><p>在最后一行中，我们将操作结果输出到控制台:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">15.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其他类型变量的声明和初始化遵循我们上面显示的相同语法。</p><p>例如，我们声明 String、char和 boolen 变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Blog&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> toggler <span class="token operator">=</span> <span class="token char">&#39;Y&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> isVerified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了强调字符，区别 <code>char</code> 和 <code>String</code> 的字面值的是围绕这些值的英文单引号和双引号。</p><p>因此，<code>&#39;a&#39;</code>是一个字符，而 <code>&quot;a&quot;</code> 是一个字符串。 <br><br><br><br><br><br></p><h2 id="_3-数组" tabindex="-1"><a class="header-anchor" href="#_3-数组" aria-hidden="true">#</a> 3.数组</h2><p><strong>数组</strong> 是用于储存多个相同类型数据的集合。</p><p>在Java中声明数组的一般语法是：</p><blockquote><p><strong>type[] identifier = new type[length];</strong></p></blockquote><p>type 可以是任何原始或引用类型。</p><p>例如，让我们看看如何声明一个最多可以容纳100个整数的数组：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要引用数组的特定元素，或为元素分配值，我们使用变量名及其索引：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
numbers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> thirdElement <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Java中，<strong>数组索引从零开始</strong>。数组的第一个元素在索引0，第二个元素在索引1，以此类推。</p><p>此外，我们可以通过调用numbers.length来获得数组的长度：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> lengthOfNumbersArray <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-关键字" tabindex="-1"><a class="header-anchor" href="#_4-关键字" aria-hidden="true">#</a> 4.关键字</h2><p><strong>关键字是在Java中具有特殊含义的保留词。</strong></p><p><br><br><br><br><br><br></p><p>例如，<code>public</code>、<code>static</code>、<code>class</code>、<code>main</code>、<code>new</code>、<code>instanceof</code> 是 Java 中的关键字，因此，我们不能将它们作为标识符（变量名）。</p><h2 id="_5-java中的运算符" tabindex="-1"><a class="header-anchor" href="#_5-java中的运算符" aria-hidden="true">#</a> 5.java中的运算符</h2><p>第二节中提到了 <strong>赋值运算符（=）</strong>，让我们了解Java语言中的其他类型的运算符。</p><h3 id="_5-1-算术运算符" tabindex="-1"><a class="header-anchor" href="#_5-1-算术运算符" aria-hidden="true">#</a> 5.1 算术运算符</h3><p>Java支持以下<strong>算术运算符</strong>，可用于编写数学、计算逻辑：</p><ul><li>+（加法或自增；也用于字符串串联）</li><li>–（减法或自减）</li><li>*（乘法）</li><li>/（分部）</li><li>%（模数或余数）</li></ul><p>之前的代码示例中使用了 <code>加号（+）运算符</code> 来执行两个变量相加。其他算术运算符使用也类似。</p><p><code>加号（+）</code>的另一个用途是 <code>串联（连接）字符串</code> 以形成一个全新的字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> output <span class="token operator">=</span>  a <span class="token operator">+</span> <span class="token string">&quot; + &quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-2-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_5-2-逻辑运算符" aria-hidden="true">#</a> 5.2 逻辑运算符</h3><p>Java支持以下<strong>逻辑运算符</strong>来评估布尔表达式：</p><ul><li>&amp;&amp;（和）</li><li>||（或）</li><li>!（不是）</li></ul><p>思考一个逻辑 AND 和 OR 的代码片段，以下示例展示了 <strong>当数字变量可被2和3整除时执行</strong> 的打印语句：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
        
<span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> number <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">&quot; is divisible by 2 AND 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br><br><br><br><br><br></p><p>当数字能被2或5整除时，以下示例被执行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> number <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">&quot; is divisible by 2 OR 5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-比较运算符" tabindex="-1"><a class="header-anchor" href="#_5-3-比较运算符" aria-hidden="true">#</a> 5.3 比较运算符</h3><p>java 中使用<strong>比较运算符</strong>将一个变量的值与另一个变量的值进行比较。</p><ul><li><code>&lt;（小于）</code></li><li><code>&lt;=（小于或等于）</code></li><li><code>&gt;（大于）</code></li><li><code>&gt;=（大于或等于）</code></li><li><code>==（等于）</code></li><li><code>!=（不等于）</code></li></ul><p>示例，我们可以使用比较运算符比较是否成年：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAdult</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-程序结构" tabindex="-1"><a class="header-anchor" href="#_6-程序结构" aria-hidden="true">#</a> 6.程序结构</h2><p>现在我们已经了解了<code>数据类型</code>、<code>变量</code>和一些<code>基本运算符</code>，让我们看看如何将这些元素组装成一个简单的可执行程序。</p><p><strong>Java程序的基本单元是类。</strong></p><p>类可以有一个或多个字段（有时称为属性）、方法，甚至其他称为内部类的类成员。</p><p>**要让一个类成为可执行的，它必须有一个主方法。**主要方法表示程序的切入点。</p><p>让我们编写一个简单的可执行类来行使我们之前展示的代码片段：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAddition</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> a <span class="token operator">+</span> <span class="token string">&quot; + &quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该类的名称是 <code>SimpleAddition</code>，在类中，我们有一个主要方法 <code>main</code> 来容纳我们的逻辑。<code>main</code>方法的打开和关闭大括号 <code>{}</code> 之间的代码段称为代码块。</p><p>Java程序的源代码存储在扩展名为 <code>.java</code> 的文件中。 <br><br><br><br><br><br></p><h2 id="_7-编译和执行程序" tabindex="-1"><a class="header-anchor" href="#_7-编译和执行程序" aria-hidden="true">#</a> 7.编译和执行程序</h2><p>要执行我们的源代码，我们首先需要编译它，编译过程将生成一个具有 <code>.class</code> 扩展名的二进制文件。</p><p>我们可以在任何安装了 <code>Java运行时环境（JRE）</code> 的机器上执行二进制文件。</p><p>将上述示例中的源代码保存到一个名为 <code>SimpleAddition.java</code> 的文件中，并<strong>从保存该文件的目录下</strong>运行此命令编译文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>javac SimpleAddition.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要执行程序，我们只需运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> SimpleAddition
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制台将输出和下图所示相同的输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">10</span> + <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">15.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,82);function r(d,u){return s(),e("div",null,[c,l,p(" more "),i])}const b=n(t,[["render",r],["__file","01 base syntax in java.html.vue"]]);export{b as default};
