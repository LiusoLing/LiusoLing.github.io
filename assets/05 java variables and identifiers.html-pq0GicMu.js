import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as i,e as u,a as n,d as e,w as l,b as s,f as t}from"./app-c0qboIoH.js";const d={},r=n("p",null,"变量，就是可以改变的量。变量的作用是存储数据，数据实际存储在内存中，在Java语言中，通过变量名来访问这块内存中的数据。",-1),k=n("p",null,"标识符，在Java语言中，所有能够自己定义名字的地方，都叫标识符。",-1),v=n("h2",{id:"变量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#变量","aria-hidden":"true"},"#"),s(" 变量")],-1),m=n("p",null,[s("计算机以二级制存储、操作、处理数据，"),n("code",null,"变量"),s("则用于存储一段数据进行处理，所以变量指向的是 "),n("code",null,"计算机存储特定数据类型的地址值"),s("。")],-1),b=n("p",null,"不用想也知道，计算机的地址值是很长很复杂的，如果直接使用地址值编程，根本无法进行，所以我们使用变量来代指地址值，这样就很方便能对该地址值存储的数据进行操纵了。",-1),_=n("code",null,"数据类型 变量名",-1),g=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// int是数据类型，a是变量名</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),h=n("code",null,"变量名 = x",-1),f=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// int是数据类型，a是变量名</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token comment">// 使用 = 号为变量a赋值，a的值就是10</span>
    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 声明变量的同时赋值</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// 在控制台打印变量a的值</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>变量第一次赋值的过程，叫做变量的初始化。</p></div>`,2),w=t(`<p>变量的作用域可以理解为是变量的生命周期，它的生命周期只在声明它的花括号<code>{}</code>中，出了这个花括号（方法），它的生命周期就结束了。</p><p>在变量的生命周期中，变量的值可以改变。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 变量a只在此花括号内有效</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
    a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>在方法中（即被花括号包裹的内容中）定义的变量称为局部变量，局部变量必须初始化后才能使用。</p><p>Java是强类型语言，变量在声明时需要显式指定数据类型，并且之后不能被赋予其它数据类型的值。</p><p>在某些弱类型语言中，变量可以被赋予不同类型的值，比如JavaScript。</p></div>`,4),j=t(`<p>在不同位置声明的变量，分类也不同，使用上需要注意。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 成员变量</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token comment">// 静态变量</span>
    <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ONE</span> <span class="token operator">=</span> <span class="token string">&quot;一&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 常量</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TWO</span> <span class="token operator">=</span> <span class="token string">&quot;二&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 常量</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成员变量使用注意事项：</p><ul><li>在 <code>类的里面，方法的外面</code> 声明，作用域为整个类内都可以使用。</li><li>当一个对象被实例化之后，每个成员变量的值就跟着确定。</li><li>成员变量在对象创建的时候创建，在对象被销毁的时候销毁。</li><li>成员变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息。</li><li>成员变量可以声明在使用前或者使用后。</li><li>访问修饰符可以修饰成员变量。</li><li>成员变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把成员变量设为私有。通过使用访问修饰符可以使成员变量对子类可见；成员变量具有默认值。数值型变量的默认值是 0，布尔型变量的默认值是 false，引用类型变量的默认值是 null。变量的值可以在声明时指定，也可以在构造方法中指定。</li></ul><p>局部变量使用注意事项：</p><ul><li>在 <code>方法、或者代码块{}中</code> 声明，作用域只在声明它的花括号中。</li><li>没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li><li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，将会被销毁。</li><li>访问修饰符不能用于局部变量。</li><li>局部变量只在声明它的方法、构造方法或者语句块中可见。</li><li>局部变量是在栈上分配的。</li></ul><p>静态变量使用注意事项：</p><ul><li>在类中以 <code>static</code> 关键字声明，但必须在 <code>方法构造方法和语句块之外</code>。</li><li>无论一个类创建了多少个对象，类只拥有静态变量的一份拷贝。</li><li>静态变量除了被声明为常量外很少使用。</li><li>静态变量储存在静态存储区。</li><li>静态变量在程序开始时创建，在程序结束时销毁。</li><li>与成员变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li><li>静态变量还可以在静态语句块中初始化。</li><li>通过 <code>类名.静态变量</code> 就可以访问了，不需要创建类的实例。</li></ul><p>常量的使用注意事项：</p><ul><li>在<code>类的里面，方法的外面</code> 声明，值一旦给定就无法改变。</li><li>常量以 <code>final</code> 关键字修饰，常量名通常全部大写，多个单词以下划线_连接。</li><li>通过 <code>类名.常量名</code> 就可以访问了，不需要创建类的实例。</li><li>代表常数，便于修改（例如：圆周率的值，final double PI = 3.14）。</li><li>增强程序的可读性（例如：常量 UP、DOWN 用来代表上和下，final int UP = 0）。</li></ul><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h2><p>在Java语言中，所有能够自己定义名字的地方，都叫标识符。</p><p>如：<code>类名</code>、<code>变量名</code>、<code>方法名</code>、<code>接口名</code>、<code>枚举名</code> 等等，这些自定义名字的地方，都叫标识符。</p>`,13),x=n("ol",null,[n("li",null,"标识符只能使用：字母、数字、下划线_、美元符$；"),n("li",null,"标识符不能以数字开头；"),n("li",null,"标识符中不能有空格；"),n("li",null,"标识符不能是Java中的关键字或保留字。")],-1),S=n("ol",null,[n("li",null,"标识符的名称要有意义，见名知义，一般使用英文单词，不要使用拼音；"),n("li",null,"类名、接口名、枚举名使用大驼峰的命名规则（每个单词首字母大写）；"),n("li",null,"变量名、方法名使用小驼峰的命名规则（第一个单词首字母小写，其余单词首字母大写）；"),n("li",null,"常量名单词要全大写，单词之间使用下划线连接；"),n("li",null,"java中严格区分大小写。")],-1);function N(J,V){const a=p("font");return c(),i("div",null,[r,k,u(" more "),v,m,b,n("p",null,[n("strong",null,[e(a,{color:"red"},{default:l(()=>[s("声明变量：")]),_:1})]),_]),g,n("p",null,[n("strong",null,[e(a,{color:"red"},{default:l(()=>[s("变量赋值：")]),_:1})]),h]),f,n("p",null,[n("strong",null,[e(a,{color:"red"},{default:l(()=>[s("变量使用：")]),_:1})])]),y,n("p",null,[n("strong",null,[e(a,{color:"red"},{default:l(()=>[s("变量作用域：")]),_:1})])]),w,n("p",null,[n("strong",null,[e(a,{color:"red"},{default:l(()=>[s("变量分类：")]),_:1})])]),j,n("p",null,[n("strong",null,[e(a,{color:"red"},{default:l(()=>[s("标识符命名规则：")]),_:1})])]),x,n("p",null,[n("strong",null,[e(a,{color:"red"},{default:l(()=>[s("标识符命名约定：")]),_:1})])]),S])}const C=o(d,[["render",N],["__file","05 java variables and identifiers.html.vue"]]);export{C as default};
