import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as s,o,c,e as r,a as t,b as n,d as i,f as e}from"./app-O6B6fb-J.js";const l="/assets/images/base/string-uml.jpg",p={},u=t("p",null,[t("code",null,"String"),n(" 可以说是编码过程中最常用的数据类型之一，所以了解它非常重要。")],-1),g=t("p",null,[t("code",null,"String"),n(" 是Java定义的一种数据类型，是Java中的一个类，位于 "),t("code",null,"java.lang"),n(" 包下。")],-1),h=t("p",null,[t("code",null,"String"),n(" 是引用数据类型，遵循引用类型的基本规律和要求。")],-1),m=e(`<h2 id="什么是string类" tabindex="-1"><a class="header-anchor" href="#什么是string类" aria-hidden="true">#</a> 什么是<code>String</code>类</h2><p><code>String</code> 类是 Java 标准库中提供的一个核心类，定义在 <code>java.lang</code> 包下，是一个 <code>final</code> 类，不可被继承，用于表示字符串的不可变序列。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//JDK String 类源码</span>
<span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="string类图" tabindex="-1"><a class="header-anchor" href="#string类图" aria-hidden="true">#</a> String类图</h2><p>我们先来看下 <code>String</code> 的类图：</p><figure><img src="`+l+`" alt="String类图" tabindex="0" loading="lazy"><figcaption>String类图</figcaption></figure><p>结合源代码（太长不贴），可以得出 <code>String</code> 类的几个特点：</p><ul><li>String对象不可变：一旦创建出一个String对象，其值就不能被改变。任何对String对象的操作，都会返回一个新的String对象，原始对象保持不变。这种特性使String对象具有线程安全性和内存安全性。</li><li>String不可被继承：String类被final修饰，是一个不可被继承的类。</li><li>String可以序列化：String类实现了 Serializable 接口，这意味着它可以序列化。</li><li>String可以做比较：String类实现了 Comparable 接口，所以不要用 <code>==</code> 比较字符串是否相等，可以使用 <code>compareTo()</code>。</li></ul><h2 id="创建string对象" tabindex="-1"><a class="header-anchor" href="#创建string对象" aria-hidden="true">#</a> 创建String对象</h2><p>下面代码演示了三种常用的创建 <code>String</code> 对象的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">//字面量创建对象str1，值是&quot;hello&quot;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不传参，创建空null的字符串对象，使用时再赋值</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token comment">//创建对象str3，值是&quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>String</code> 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，具体可以查看 <code>String</code> 源代码。</p><h2 id="string支持方法" tabindex="-1"><a class="header-anchor" href="#string支持方法" aria-hidden="true">#</a> String支持方法</h2>`,13),k=t("code",null,"String",-1),S={href:"https://www.runoob.com/manual/jdk11api/java.base/java/lang/String.html",target:"_blank",rel:"noopener noreferrer"},v=e("<table><thead><tr><th>方法名</th><th>方法描述</th></tr></thead><tbody><tr><td><code>charAt(int index)</code></td><td>返回指定索引处的字符</td></tr><tr><td><code>codePointAt(int index)</code></td><td>返回指定索引处的字符（Unicode 代码点）</td></tr><tr><td><code>codePointBefore(int index)</code></td><td>返回指定索引之前的字符（Unicode 代码点）</td></tr><tr><td><code>codePointCount(int beginIndex, int endIndex)</code></td><td>返回此字符串中的 Unicode 代码点数</td></tr><tr><td><code>compareTo(String anotherString)</code></td><td>按字典顺序比较两个字符串</td></tr><tr><td><code>compareToIgnoreCase(String str)</code></td><td>按字典顺序比较两个字符串，不考虑大小写</td></tr><tr><td><code>concat(String str)</code></td><td>将指定字符串连接到此字符串的末尾</td></tr><tr><td><code>contains(CharSequence sequence)</code></td><td>判断此字符串是否包含指定的字符序列</td></tr><tr><td><code>contentEquals(CharSequence cs)</code></td><td>判断此字符串是否与指定的字符序列相等</td></tr><tr><td><code>endsWith(String suffix)</code></td><td>测试此字符串是否以指定的后缀结束</td></tr><tr><td><code>equals(Object anObject)</code></td><td>将此字符串与指定的对象比较</td></tr><tr><td><code>equalsIgnoreCase(String anotherString)</code></td><td>将此字符串与指定的字符串比较，忽略大小写</td></tr><tr><td><code>getBytes()</code></td><td>使用平台的默认字符集将该 String 编码为字节数组</td></tr><tr><td><code>getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</code></td><td>将字符从此字符串复制到目标字符数组</td></tr><tr><td><code>hashCode()</code></td><td>返回此字符串的哈希码</td></tr><tr><td><code>indexOf(int ch)</code></td><td>返回指定字符在此字符串中第一次出现的索引</td></tr><tr><td><code>indexOf(int ch, int fromIndex)</code></td><td>返回指定字符在此字符串中第一次出现的索引，从指定的索引开始搜索</td></tr><tr><td><code>indexOf(String str)</code></td><td>返回指定子字符串在此字符串中第一次出现的索引</td></tr><tr><td><code>indexOf(String str, int fromIndex)</code></td><td>返回指定子字符串在此字符串中第一次出现的索引，从指定的索引开始搜索</td></tr><tr><td><code>intern()</code></td><td>返回字符串对象的规范化表示形式</td></tr><tr><td><code>isEmpty()</code></td><td>当且仅当 length() 为 0 时返回 true</td></tr><tr><td><code>lastIndexOf(int ch)</code></td><td>返回指定字符在此字符串中最后一次出现的索引</td></tr><tr><td><code>lastIndexOf(int ch, int fromIndex)</code></td><td>返回指定字符在此字符串中最后一次出现的索引，从指定的索引开始反向搜索</td></tr><tr><td><code>lastIndexOf(String str)</code></td><td>返回指定子字符串在此字符串中最右边出现的索引</td></tr><tr><td><code>lastIndexOf(String str, int fromIndex)</code></td><td>返回指定子字符串在此字符串中最后一次出现的索引，从指定的索引开始反向搜索</td></tr><tr><td><code>length()</code></td><td>返回此字符串的长度</td></tr><tr><td><code>matches(String regex)</code></td><td>判断此字符串是否匹配给定的正则表达式</td></tr><tr><td><code>regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)</code></td><td>测试两个字符串区域是否相等</td></tr><tr><td><code>replace(char oldChar, char newChar)</code></td><td>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的</td></tr><tr><td><code>replace(CharSequence target, CharSequence replacement)</code></td><td>将与给定的 target 匹配的此字符串的子字符串替换为指定的字符串</td></tr><tr><td><code>replaceAll(String regex, String replacement)</code></td><td>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串</td></tr><tr><td><code>replaceFirst(String regex, String replacement)</code></td><td>使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串</td></tr><tr><td><code>split(String regex)</code></td><td>根据给定正则表达式的匹配拆分此字符串</td></tr><tr><td><code>startsWith(String prefix)</code></td><td>测试此字符串是否以指定的前缀开始</td></tr><tr><td><code>startsWith(String prefix, int toffset)</code></td><td>测试此字符串从指定索引开始是否以指定的前缀开始</td></tr><tr><td><code>subSequence(int beginIndex, int endIndex)</code></td><td>返回一个新的字符序列，它是此序列的一个子序列</td></tr><tr><td><code>substring(int beginIndex)</code></td><td>返回从指定索引开始到末尾的子字符串</td></tr><tr><td><code>substring(int beginIndex, int endIndex)</code></td><td>返回指定索引范围的子字符串</td></tr><tr><td><code>toCharArray()</code></td><td>将此字符串转换为一个新的字符数组</td></tr><tr><td><code>toLowerCase()</code></td><td>使用默认语言环境的规则将此字符串转换为小写</td></tr><tr><td><code>toUpperCase()</code></td><td>使用默认语言环境的规则将此字符串转换为大写</td></tr><tr><td><code>trim()</code></td><td>返回字符串的副本，删除前导空白和尾部空白</td></tr><tr><td><code>valueOf(boolean b)</code></td><td>返回 boolean 参数的字符串表示形式</td></tr><tr><td><code>valueOf(char c)</code></td><td>返回 char 参数的字符串表示形式</td></tr><tr><td><code>valueOf(char[] data)</code></td><td>返回 char 数组参数的字符串表示形式</td></tr><tr><td><code>valueOf(char[] data, int offset, int count)</code></td><td>返回 char 数组参数的子数组的字符串表示形式</td></tr><tr><td><code>valueOf(double d)</code></td><td>返回 double 参数的字符串表示形式</td></tr><tr><td><code>valueOf(float f)</code></td><td>返回 float 参数的字符串表示形式</td></tr><tr><td><code>valueOf(int i)</code></td><td>返回 int 参数的字符串表示形式</td></tr><tr><td><code>valueOf(long l)</code></td><td>返回 long 参数的字符串表示形式</td></tr><tr><td><code>valueOf(Object obj)</code></td><td>返回 Object 参数的字符串表示形式</td></tr></tbody></table>",1);function f(b,x){const a=s("ExternalLinkIcon");return o(),c("div",null,[u,g,h,r(" more "),m,t("p",null,[n("下面是"),k,n("类提供的方法，更多详细，可以查看 "),t("a",S,[n("Java String API"),i(a)])]),v])}const j=d(p,[["render",f],["__file","01 java string base.html.vue"]]);export{j as default};
