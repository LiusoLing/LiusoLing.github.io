import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,e,a as o,f as t}from"./app-6o-IiJuU.js";const c="/assets/images/base/java-class-code.jpg",p={},l=o("p",null,"建议先了解完JVM的相关知识，再看本文章，文中涉及到JVM特定内存区域描述，不清楚该区域作用，将难以理解。",-1),i=t('<h2 id="常量池概述" tabindex="-1"><a class="header-anchor" href="#常量池概述" aria-hidden="true">#</a> 常量池概述</h2><p>java源码文件经过编译后，会生成 <code>.class</code> 字节码文件，打开任何一个字节码文件，可以看到 <code>cafe babe 魔数</code>等二进制数据。</p><figure><img src="'+c+`" alt=".class文件" tabindex="0" loading="lazy"><figcaption>.class文件</figcaption></figure><p>第一行二进制描述了如下信息：</p><ul><li>cafe babe：魔数</li><li>0000：次版本</li><li>0034：主版本（十进制52，JDK1.8）</li><li>002a：常量池计数器</li><li>0a00...：常量池数据区和代码区</li></ul><p>常量池可以看成存放Java代码，主要存放两类数据：<code>字面量</code>、<code>符号引用</code></p><p><strong>字面量</strong>：字面量是由字母、数字等构成的字符串或数值常量。字面量只在右值出现（等号右边的值），如下所示，等号右边的值都是字面量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">&quot;abcda&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>符号引用</strong>：上面的<code>a</code>、<code>b</code>、<code>c</code>就是符号名称，即符号引用。符号引用可以是：</p><ol><li>类和接口的全限定名 <code>com.xxx.User</code></li><li>字段的名称和描述符 <code>name</code></li><li>方法的名称和描述符 <code>set()</code></li></ol><h2 id="静态常量池、运行时常量池和字符串常量池" tabindex="-1"><a class="header-anchor" href="#静态常量池、运行时常量池和字符串常量池" aria-hidden="true">#</a> 静态常量池、运行时常量池和字符串常量池</h2><p>静态常量池：静态的、未加载的 <code>.class</code>文件； 运行时常量池：经 <code>JVM</code> 将 <code>.class</code> 文件装入内存、加载到方法区；常量池内的符号引用在程序加载或运行时会被转变为被加载到方法区的代码的直接引用，在 <code>JVM</code> 调用这个方法时，就能根据直接引用找到这个方法在方法区的位置，从而执行方法。 字符串常量池：属于运行时常量池的一小部分，根据JDK版本的不同，从属关系也不同。</p><p><strong>字符串常量池：</strong> 为何要将字符串常量池独立出来呢？</p><p>这是因为字符串的分配，是需要耗费时间和空间的，而作为最基础的数据类型，被程序在各个地方大量使用，这将大量频繁的创建字符串，极大地影响了程序的性能。</p><p>JVM 为了提高性能和减少内存开销，在实例化字符串常量时进行了优化：为字符串开辟一个字符串常量池，类似与缓存区，在创建字符串常量时作用如下：</p><pre><code>- 检查字符串常量池是否存在该字符串
- 存在该字符串，返回引用实例
- 不存在，实例化该字符串放入常量池内，再把此引用实例返回
- 调用时，直接从字符串常量池内取值
</code></pre><p>字符串常量池底层是 <code>hotspot</code> 的 C++实现的，类似一个哈希表的 <code>K-V</code> 结构，保存的本质是字符串对象的引用。</p><h2 id="string创建比较" tabindex="-1"><a class="header-anchor" href="#string创建比较" aria-hidden="true">#</a> String创建比较</h2><p>不同的String创建方式，导致在比较两个字符串时，得到的结果也不同，以下是相关实例：</p><p><strong>示例一：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s0 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Stirng</span> s1 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> s0 <span class="token operator">==</span> s1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> s0 <span class="token operator">==</span> s2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>s0</code> 和 <code>s1</code> 都是字符串常量，所以两者相等。</p><p><code>s2</code> 由两个字符串相加，JVM将在编译期把字符串的 <code>+</code> 连接优化为连接后的值 <code>ab</code>，所以 <code>s0</code> 等于 <code>s2</code>。</p><p><strong>示例二：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s0 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> s0 <span class="token operator">==</span> s1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> s0 <span class="token operator">==</span> s2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> s1 <span class="token operator">==</span> s2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>s0</code> 指向常量池的 <code>ab</code>，<code>s1</code> 指向堆中的 <code>ab</code>，所以不相等。</p><p><code>s2</code> 后半部分存在 <code>new String(&quot;b&quot;)</code> 在JVM编译期无法确定，相当于 <code>new String(&quot;ab&quot;)</code>，值需要在程序运行期来动态分配再将新地址返回给 <code>s2</code>，所以 <code>s2</code> 与其他都不相等。</p><p><strong>示例三：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> s1 <span class="token operator">==</span> s2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里创建了三个对象，两个符号引用对象 <code>s1</code> 和 <code>s2</code> ，一个字符串常量对象 <code>ab</code>。</p><p><code>new</code> 的方式始终会创建一个对象，不管字符串的内容是否已经存在，而双引号 <code>&quot;&quot;</code> 的方式会重复利用字符串常量池中已经存在的对象。</p><h2 id="其他常量池" tabindex="-1"><a class="header-anchor" href="#其他常量池" aria-hidden="true">#</a> 其他常量池</h2><p><code>java</code> 中基本乐行的包装类大部分都实现了常量池，这些类是 <code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Character</code>、<code>Boolean</code>，浮点类型则没有实现。</p><p>这些的包装类型也只是值在 <code>[-128, 127]</code> 之间才使用常量池，因为较小数字用到的概率更大一些。</p>`,34);function d(u,r){return n(),a("div",null,[l,e(" more "),i])}const v=s(p,[["render",d],["__file","03 java string in jvm.html.vue"]]);export{v as default};
