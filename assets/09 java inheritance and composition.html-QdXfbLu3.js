const e=JSON.parse('{"key":"v-62eda390","path":"/javaer/base/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/2.JavaOop/09%20java%20inheritance%20and%20composition.html","title":"09. Java中的继承和组合","lang":"zh-CN","frontmatter":{"title":"09. Java中的继承和组合","icon":"pen-to-square","order":9,"author":"LiuSongLing","date":"2024-03-21T00:00:00.000Z","category":["java"],"tag":["java"],"sticky":false,"star":false,"description":"继承和组合——以及抽象、封装和多态——是面向对象编程（OOP）的基石。 在本教程中，我们将介绍继承和组合的基础知识，我们将重点关注发现这两种关系之间的差异。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/javaer/base/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/2.JavaOop/09%20java%20inheritance%20and%20composition.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"09. Java中的继承和组合"}],["meta",{"property":"og:description","content":"继承和组合——以及抽象、封装和多态——是面向对象编程（OOP）的基石。 在本教程中，我们将介绍继承和组合的基础知识，我们将重点关注发现这两种关系之间的差异。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-29T09:03:13.000Z"}],["meta",{"property":"article:author","content":"LiuSongLing"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-03-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-29T09:03:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"09. Java中的继承和组合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-29T09:03:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LiuSongLing\\"}]}"]]},"headers":[{"level":2,"title":"1.继承的基础知识","slug":"_1-继承的基础知识","link":"#_1-继承的基础知识","children":[]},{"level":2,"title":"2.设计模式中的继承","slug":"_2-设计模式中的继承","link":"#_2-设计模式中的继承","children":[{"level":3,"title":"2.1图层超类型模式","slug":"_2-1图层超类型模式","link":"#_2-1图层超类型模式","children":[]},{"level":3,"title":"2.2模板方法模式","slug":"_2-2模板方法模式","link":"#_2-2模板方法模式","children":[]}]},{"level":2,"title":"3.组合的基础知识","slug":"_3-组合的基础知识","link":"#_3-组合的基础知识","children":[]},{"level":2,"title":"4.没有抽象的构图","slug":"_4-没有抽象的构图","link":"#_4-没有抽象的构图","children":[]}],"git":{"createdTime":1711702993000,"updatedTime":1711702993000,"contributors":[{"name":"liusongling","email":"15879144378@163.com","commits":1}]},"readingTime":{"minutes":5.22,"words":1565},"filePathRelative":"javaer/base/一、Java基础/2.JavaOop/09 java inheritance and composition.md","localizedDate":"2024年3月21日","excerpt":"<p>继承和组合——以及抽象、封装和多态——是面向对象编程（OOP）的基石。</p>\\n<p>在本教程中，我们将介绍继承和组合的基础知识，我们将重点关注发现这两种关系之间的差异。</p>\\n","autoDesc":true}');export{e as data};
