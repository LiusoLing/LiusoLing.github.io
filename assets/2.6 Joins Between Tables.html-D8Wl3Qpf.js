import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,f as e}from"./app-LeoV-3ht.js";const t={},p=e(`<p>SELECT 语句查询可以一次查询多个表，也可以以同时处理表的多个行的方式访问同一个表。</p><p>一次访问多个表（或同一表的多个实例）的查询称为联接查询。它们将一个表中的行与第二个表中的行组合在一起，并使用一个表达式指定要配对的行。</p><p>例如，若要返回所有天气记录以及关联城市的位置，数据库需要将 weather 表的每一行的 city 列与 cities 表中所有行的 name 列进行比较，并选择这些值匹配的行对。</p><p>这将通过以下查询来实现：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> weather <span class="token keyword">JOIN</span> cities <span class="token keyword">ON</span> city <span class="token operator">=</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在联接查询中限定所有列名被广泛认为是一种很好的样式，这样，即使两张表存在重复的列名，查询也不会失败。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> weather<span class="token punctuation">.</span>city<span class="token punctuation">,</span> weather<span class="token punctuation">.</span>temp_lo<span class="token punctuation">,</span> weather<span class="token punctuation">.</span>temp_hi<span class="token punctuation">,</span>
       weather<span class="token punctuation">.</span>prcp<span class="token punctuation">,</span> weather<span class="token punctuation">.</span><span class="token keyword">date</span><span class="token punctuation">,</span> cities<span class="token punctuation">.</span>location
    <span class="token keyword">FROM</span> weather <span class="token keyword">JOIN</span> cities <span class="token keyword">ON</span> weather<span class="token punctuation">.</span>city <span class="token operator">=</span> cities<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br><br><br><br><br><br></p><p>以下查询称为左外部联接，因为 join 运算符左侧提到的表在输出中至少有一次其每一行，而右侧的表将仅具有与左表的某一行匹配的行输出。输出没有右表匹配的左表行时，空 （null） 值将替换为右表列。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
    <span class="token keyword">FROM</span> weather <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> cities <span class="token keyword">ON</span> weather<span class="token punctuation">.</span>city <span class="token operator">=</span> cities<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以 join 一个 table 对着自己。这称为自联接。例如，假设我们希望查找其他天气记录的温度范围内的所有天气记录。因此，我们需要将每个 weather 行的 temp_lo 列和 temp_hi 列与所有其他 weather 行的 temp_lo 列和 temp_hi 列进行比较。我们可以使用以下查询来执行此操作：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> w1<span class="token punctuation">.</span>city<span class="token punctuation">,</span> w1<span class="token punctuation">.</span>temp_lo <span class="token keyword">AS</span> low<span class="token punctuation">,</span> w1<span class="token punctuation">.</span>temp_hi <span class="token keyword">AS</span> high<span class="token punctuation">,</span>
       w2<span class="token punctuation">.</span>city<span class="token punctuation">,</span> w2<span class="token punctuation">.</span>temp_lo <span class="token keyword">AS</span> low<span class="token punctuation">,</span> w2<span class="token punctuation">.</span>temp_hi <span class="token keyword">AS</span> high
    <span class="token keyword">FROM</span> weather w1 <span class="token keyword">JOIN</span> weather w2
        <span class="token keyword">ON</span> w1<span class="token punctuation">.</span>temp_lo <span class="token operator">&lt;</span> w2<span class="token punctuation">.</span>temp_lo <span class="token operator">AND</span> w1<span class="token punctuation">.</span>temp_hi <span class="token operator">&gt;</span> w2<span class="token punctuation">.</span>temp_hi<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了节省输入，我们为表取了 简易的别名 w1、w2。</p><p>实际使用中，我们常常使用此缩写风格。</p>`,14),o=[p];function c(l,i){return n(),a("div",null,o)}const d=s(t,[["render",c],["__file","2.6 Joins Between Tables.html.vue"]]);export{d as default};
