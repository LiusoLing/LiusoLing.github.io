import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as d,c as r,e as o,a as e,b as a,d as n,f as s}from"./app-xzSjLnCe.js";const c="/assets/images/base/base-01.png",p="/assets/images/base/base-02.png",u="/assets/images/base/base-03.png",g={},m=e("p",null,"好比复杂的设计图，首先需要定义基本的 点、线、面、圆形、方形等等基础图形，才能使用这些基本图形画出复杂的设计图，Java也一样，要想写出复杂的应用程序，需要我们先来了解构成程序一部分的基本数据类型。",-1),h=s('<h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2><p>Java 是一种静态类型的编程语言，这意味着所有变量必须在使用之前声明好，也就是必须得先指定变量的类型和名称。</p><p>Java 中的数据类型有两种：</p><ul><li><p>基本数据类型：Java 语言操作数据的基础，包括 boolean、char、byte、short、int、long、float 和 double，共 8 种。</p></li><li><p>引用数据类型：除了基本数据类型以外的，都是引用数据类型。常见的有数组、class（也就是类），以及接口（指向的是实现接口的类的对象）。</p></li></ul><p>基本数据类型都有默认值，如表格所示：</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">名称</th><th style="text-align:center;">默认值</th><th style="text-align:center;">大小</th><th style="text-align:center;">取值范围</th></tr></thead><tbody><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">布尔型</td><td style="text-align:center;">false</td><td style="text-align:center;">1 比特</td><td style="text-align:center;">true/false</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">字符型</td><td style="text-align:center;">&#39;\\u0000&#39;</td><td style="text-align:center;">2 字节</td><td style="text-align:center;">0 ~ 65,535</td></tr><tr><td style="text-align:center;">byte</td><td style="text-align:center;">字节型</td><td style="text-align:center;">0</td><td style="text-align:center;">1 字节</td><td style="text-align:center;">-128~127</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">短整型</td><td style="text-align:center;">0</td><td style="text-align:center;">2 字节</td><td style="text-align:center;">-32768~32767</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">整型</td><td style="text-align:center;">0</td><td style="text-align:center;">4 字节</td><td style="text-align:center;">-2^31 ~ 2^31 -1</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">长整型</td><td style="text-align:center;">0L</td><td style="text-align:center;">8 字节</td><td style="text-align:center;">-2^63 ~ 2^63 -1</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">单精度浮点型</td><td style="text-align:center;">0.0f</td><td style="text-align:center;">4 字节</td><td style="text-align:center;">1.4E-45 ~ 3.4E+38</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">双精度浮点型</td><td style="text-align:center;">0.0</td><td style="text-align:center;">8 字节</td><td style="text-align:center;">±4.9E-324 ~ ±1.79...E308</td></tr></tbody></table><h2 id="比特和字节" tabindex="-1"><a class="header-anchor" href="#比特和字节" aria-hidden="true">#</a> 比特和字节</h2><p>可以看到，表格中大小，出现了比特和字节两种单位，它们是什么意思呢？</p><ul><li><p><strong>比特：</strong> 比特作为信息技术的最基本存储单位，非常小，它的简写为小写字母“b”。我们知道，计算机是以二进制存储数据的，二进制的一位，就是 1 比特，也就是说，比特要么为 0 要么为 1。</p></li><li><p><strong>字节：</strong> 比特这个单位太小了，就好像我们除了个，还需要十百千万这样的更大描述单位一样，字节是更大的描述单位。</p></li></ul><p><mark>1 字节 = 8 比特</mark></p><p>通常来说，一个英文字符是一个字节，一个中文字符是两个字节。</p><p>再往上的单位就是 KB，并不是 1000 字节，因为计算机只认识二进制，因此是 2 的 10 次方，也就是 1024 个字节。</p><figure><img src="'+c+`" alt="换算单位" tabindex="0" loading="lazy"><figcaption>换算单位</figcaption></figure><h2 id="基本数据类型详解" tabindex="-1"><a class="header-anchor" href="#基本数据类型详解" aria-hidden="true">#</a> 基本数据类型详解</h2><p>下面，来深入了解 8 种基本数据类型。</p><h3 id="_1-布尔型" tabindex="-1"><a class="header-anchor" href="#_1-布尔型" aria-hidden="true">#</a> 1.布尔型</h3><p>布尔（boolean）仅用于存储两个值：true 和 false，也就是真和假，通常用于条件的判断。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> isDelete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> isSimpDog <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-字节型" tabindex="-1"><a class="header-anchor" href="#_2-字节型" aria-hidden="true">#</a> 2.字节型</h3><p>字节（byte）可以表示 2^8 = 256 个不同的值。由于 byte 是有符号的，它的值可以是负数或正数，其取值范围是 -128 到 127（包括 -128 和 127）。</p><p>在网络传输、大文件读写时，为了节省空间，常用字节来作为数据的传输方式。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span> b<span class="token punctuation">;</span> <span class="token comment">// 声明一个 byte 类型变量</span>
b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 将值 10 赋给变量 b</span>


<span class="token keyword">byte</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 byte 类型变量 c，赋值为 -100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-短整型" tabindex="-1"><a class="header-anchor" href="#_3-短整型" aria-hidden="true">#</a> 3.短整型</h3><p>short 取值范围在 -32768 和 32767 之间，包含 32767。实际开发中，short 比较少用，多用整型 int。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">short</span> s<span class="token punctuation">;</span> <span class="token comment">// 声明一个 short 类型变量</span>
s <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 将值 1000 赋给变量 s</span>


<span class="token keyword">short</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2000</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 short 类型变量 t，赋值为 -2000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-整型" tabindex="-1"><a class="header-anchor" href="#_4-整型" aria-hidden="true">#</a> 4.整型</h3><p>int 的取值范围在 -2147483648（-2^31）和 2147483647（2^31 -1）之间。如果没有特殊需求，整型数据就用 int。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// 声明一个 int 类型变量</span>
i <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token comment">// 将值 1000000 赋给变量 i</span>


<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2000000</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 int 类型变量 j，赋值为 -2000000</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-长整型" tabindex="-1"><a class="header-anchor" href="#_5-长整型" aria-hidden="true">#</a> 5.长整型</h3><p>long 的取值范围在 -9223372036854775808(-2^63) 和 9223372036854775807(2^63 -1)（含）之间。如果 int 存储不下，就用 long。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> l<span class="token punctuation">;</span> <span class="token comment">// 声明一个 long 类型变量</span>
l <span class="token operator">=</span> <span class="token number">100000000000L</span><span class="token punctuation">;</span> <span class="token comment">// 将值 100000000000L 赋给变量 l（注意要加上 L 后缀）</span>

<span class="token keyword">long</span> m <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20000000000L</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 long 类型变量 m，赋值为 -20000000000L</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-单精度浮点数" tabindex="-1"><a class="header-anchor" href="#_6-单精度浮点数" aria-hidden="true">#</a> 6.单精度浮点数</h3><p>float 是单精度的浮点数（单精度浮点数的有效数字大约为 6 到 7 位），32 位（4 字节），遵循 IEEE 754（二进制浮点数算术标准），取值范围为 1.4E-45 到 3.4E+38。float 不适合用于精确的数值，比如说金额。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span> f<span class="token punctuation">;</span> <span class="token comment">// 声明一个 float 类型变量</span>
f <span class="token operator">=</span> <span class="token number">3.14159f</span><span class="token punctuation">;</span> <span class="token comment">// 将值 3.14159f 赋给变量 f（注意要加上 f 后缀）</span>


<span class="token keyword">float</span> g <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.71828f</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 float 类型变量 g，赋值为 -2.71828f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-双进度浮点数" tabindex="-1"><a class="header-anchor" href="#_7-双进度浮点数" aria-hidden="true">#</a> 7.双进度浮点数</h3><p>double 是双精度浮点数（双精度浮点数的有效数字大约为 15 到 17 位），占 64 位（8 字节），遵循 IEEE 754 标准，取值范围大约 ±4.9E-324 到 ±1.7976931348623157E308。double 不适合用于精确的数值，比如说金额。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.141592653589793</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在进行金融计算或需要精确小数计算的场景中，可以使用 BigDecimal 类来避免浮点数舍入误差。BigDecimal 可以表示一个任意大小且精度完全准确的浮点数。</p><p>在实际开发中，如果不是特别大的金额（精确到 0.01 元，也就是一分钱），一般建议乘以 100 转成整型进行处理。</p></div><h3 id="_8-字符型" tabindex="-1"><a class="header-anchor" href="#_8-字符型" aria-hidden="true">#</a> 8.字符型</h3><p>char 用于表示 Unicode 字符，占 16 位（2 字节）的存储空间，取值范围为 0 到 65,535。</p><p><mark>使用的是单引号包裹，而不是双引号</mark></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> letterA <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 用英文的单引号包裹住。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="单精度和双精度" tabindex="-1"><a class="header-anchor" href="#单精度和双精度" aria-hidden="true">#</a> 单精度和双精度</h2><p>单精度（single-precision）和双精度（double-precision）是指两种不同精度的浮点数表示方法。</p>`,44),v={href:"https://baike.baidu.com/item/%E5%8D%95%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0/4502724",target:"_blank",rel:"noopener noreferrer"},b=e("strong",null,"1 位符号，8 位指数，23 位小数",-1),k=e("figure",null,[e("img",{src:p,alt:"单精度",tabindex:"0",loading:"lazy"}),e("figcaption",null,"单精度")],-1),x={href:"https://baike.baidu.com/item/%E5%8F%8C%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0/4502803",target:"_blank",rel:"noopener noreferrer"},y=e("strong",null,"1 位符号，11 位指数，52 为小数",-1),f=s('<figure><img src="'+u+`" alt="双精度" tabindex="0" loading="lazy"><figcaption>双精度</figcaption></figure><h2 id="包装器类型" tabindex="-1"><a class="header-anchor" href="#包装器类型" aria-hidden="true">#</a> 包装器类型</h2><p>Java是一门面向对象的编程语言，而上述8种基本数据类型并不具备对象的性质，为了让基本数据类型也具备对象的特征，诞生了包装器类型。</p><p>包装器类型将基本数据类型给“包装”起来，使得它们具备对象的性质，并且为其添加了属性和方法，丰富了基本数据类型的操作。</p><p>以下是对应关系：</p><table><thead><tr><th style="text-align:left;">包装类型</th><th style="text-align:left;">基本类型</th></tr></thead><tbody><tr><td style="text-align:left;">Byte</td><td style="text-align:left;">byte</td></tr><tr><td style="text-align:left;">Short</td><td style="text-align:left;">short</td></tr><tr><td style="text-align:left;">Integer</td><td style="text-align:left;">int</td></tr><tr><td style="text-align:left;">Long</td><td style="text-align:left;">long</td></tr><tr><td style="text-align:left;">Float</td><td style="text-align:left;">float</td></tr><tr><td style="text-align:left;">Double</td><td style="text-align:left;">double</td></tr><tr><td style="text-align:left;">Character</td><td style="text-align:left;">char</td></tr><tr><td style="text-align:left;">Boolean</td><td style="text-align:left;">boolean</td></tr></tbody></table><p>从 Java 5 开始，自动装箱（Autoboxing）和自动拆箱（Unboxing）机制允许我们在基本数据类型和包装器类型之间自动转换，无需显式地调用构造方法或转换方法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> integerValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// 自动装箱，等同于 new Integer(42)</span>

<span class="token keyword">int</span> primitiveValue <span class="token operator">=</span> integerValue<span class="token punctuation">;</span> <span class="token comment">// 自动拆箱，等同于 integerValue.intValue()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h2><p>看数组&amp;字符串，以及面向对象编程时，讲引用数据类型会更加清楚，这里先略过。</p>`,10);function _(E,j){const t=i("ExternalLinkIcon");return d(),r("div",null,[m,o(" more "),h,e("p",null,[e("a",v,[a("单精度"),n(t)]),a("格式："),b,a("。")]),k,e("p",null,[e("a",x,[a("双精度"),n(t)]),a("格式："),y,a("。")]),f])}const V=l(g,[["render",_],["__file","03 base data type.html.vue"]]);export{V as default};
