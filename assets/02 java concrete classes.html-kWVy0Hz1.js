import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e,a as p,f as t}from"./app-5cCCUltF.js";const c={},o=p("p",null,"了解Java中的具体类，并了解它和接口、抽象类有何不同。",-1),i=t(`<h2 id="_1-什么是具体类" tabindex="-1"><a class="header-anchor" href="#_1-什么是具体类" aria-hidden="true">#</a> 1.什么是具体类</h2><p>具体类，是指用 <code>new</code> 关键字创建出实例的类。</p><p>其内的所有方法都实现了，我们称之为具体类。</p><p>例如一个 Car 类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">honk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;beep!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;vroom&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以实例化它：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在Java 中，一些具体类如：<strong>HashMap、HashSet、ArrayList和LinkedList。</strong></p><p><br><br><br><br><br><br></p><h2 id="_2-java抽象类和具体类" tabindex="-1"><a class="header-anchor" href="#_2-java抽象类和具体类" aria-hidden="true">#</a> 2.Java抽象类和具体类</h2><p><strong>当然，并非所有Java类型都实现了所有方法。</strong> 这种灵活性，也称为抽象，使我们能够更笼统地思考我们试图建模的领域。</p><p>在Java中，<strong>我们可以使用接口和抽象类实现抽象。</strong></p><p><br><br><br><br><br><br></p><h3 id="_2-1-接口" tabindex="-1"><a class="header-anchor" href="#_2-1-接口" aria-hidden="true">#</a> 2.1 接口</h3><p><strong>接口是一个类的蓝图。</strong> 或者，换句话说，它是未实现的方法签名的集合：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Driveable</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">honk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>请注意，它使用 <code>interface</code> 关键字而不是 <code>class</code>。</strong></p><p>由于Driveable有未实现的方法，我们无法用 <code>new</code> 关键字实例化它。</p><p>但是，像Car这样的具体类可以实现这些方法。</p><p>JDK提供了许多接口，如 <strong>Map、List和Set。</strong></p><p><br><br><br><br><br><br></p><h3 id="_2-2-抽象类" tabindex="-1"><a class="header-anchor" href="#_2-2-抽象类" aria-hidden="true">#</a> 2.2 抽象类</h3><p><strong>抽象类是一个具有未实现方法的类，</strong> 尽管它实际上可以同时具有：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">honk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;zoom&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>请注意，我们用关键字 <code>abstract</code> 标记抽象类。</strong></p><p>同样，由于Veicle有一个未实现的方法，所以，我们将无法使用 <code>new</code> 关键字实例化抽象类。</p><p>JDK的抽象类的一些例子是 <strong>AbstractMap 和 AbstractList。</strong></p><p><br><br></p><h3 id="_2-3-具体类" tabindex="-1"><a class="header-anchor" href="#_2-3-具体类" aria-hidden="true">#</a> 2.3 具体类</h3><p><strong>具体类没有任何未实现的方法。</strong> 无论实现是否继承，只要每个方法都有实现，该类都是具体的。</p><p>具体类可以像我们之前的汽车示例一样简单。他们还可以实现接口并扩展抽象类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FancyCar</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token keyword">implements</span> <span class="token class-name">Driveable</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">honk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> <span class="token string">&quot;beep&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 <code>new</code> 关键字创建一个FancyCar类实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FancyCar</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FancyCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>简单地说，所有不是抽象的类，我们可以称之为具体类。</strong></p>`,35);function l(r,d){return a(),s("div",null,[o,e(" more "),i])}const v=n(c,[["render",l],["__file","02 java concrete classes.html.vue"]]);export{v as default};
