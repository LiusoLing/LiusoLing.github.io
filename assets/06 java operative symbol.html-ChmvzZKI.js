import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t,a as p,f as e}from"./app-xzSjLnCe.js";const o={},c=p("p",null,"在Java编程中，运算符是一种用于执行各种操作的特殊符号。这些操作可以涵盖基本的数学计算、逻辑判断和其他一些常见的任务。本文将介绍Java中的一些基本运算符。",-1),l=e(`<h2 id="_1-算术运算符" tabindex="-1"><a class="header-anchor" href="#_1-算术运算符" aria-hidden="true">#</a> 1.算术运算符</h2><p>Java提供了一组基本的算术运算符，用于执行数学运算。</p><p><strong>算术运算符：</strong></p><table><thead><tr><th>算术运算符</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>加法</td><td>+</td><td>执行相加运算</td></tr><tr><td>减法</td><td>-</td><td>执行相减运算</td></tr><tr><td>乘法</td><td>*</td><td>执行相乘运算</td></tr><tr><td>除法</td><td>/</td><td>执行相除运算</td></tr><tr><td>取余</td><td>%</td><td>返回除法的余数</td></tr></tbody></table><p><strong>算术运算语法糖：</strong></p><table><thead><tr><th>算术运算语法糖</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>自增运算（前缀）</td><td>++</td><td>变量值加1，表达式的值为加1后的值</td></tr><tr><td>自增运算（后缀）</td><td>--</td><td>变量值加1，表达式的值为加1前的值</td></tr></tbody></table><p><strong>程序示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 算术运算符示例</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>      <span class="token comment">// 加法</span>
        <span class="token keyword">int</span> difference <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment">// 减法</span>
        <span class="token keyword">int</span> product <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>    <span class="token comment">// 乘法</span>
        <span class="token keyword">int</span> quotient <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>   <span class="token comment">// 除法</span>
        <span class="token keyword">int</span> remainder <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>  <span class="token comment">// 取余</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sum: &quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Difference: &quot;</span> <span class="token operator">+</span> difference<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Product: &quot;</span> <span class="token operator">+</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Quotient: &quot;</span> <span class="token operator">+</span> quotient<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Remainder: &quot;</span> <span class="token operator">+</span> remainder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 自增自减运算符示例</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token operator">++</span>x<span class="token punctuation">;</span> <span class="token comment">// 先自增，再赋值，y = 6</span>
        <span class="token keyword">int</span> z <span class="token operator">=</span> x<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 先赋值，再自减，z = 6</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;x: &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;y: &quot;</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;z: &quot;</span> <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-关系运算符" tabindex="-1"><a class="header-anchor" href="#_2-关系运算符" aria-hidden="true">#</a> 2.关系运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>判断两个操作数是否相等，相等返回 true，否则返回 false</td></tr><tr><td>!=</td><td>判断两个操作数是否不相等，不相等返回 true，否则返回 false</td></tr><tr><td>&gt;</td><td>判断左操作数是否大于右操作数，大于返回 true，否则返回 false</td></tr><tr><td>&lt;</td><td>判断左操作数是否小于右操作数，小于返回 true，否则返回 false</td></tr><tr><td>&gt;=</td><td>判断左操作数是否大于或等于右操作数，是返回 true，否则返回 false</td></tr><tr><td>&lt;=</td><td>判断左操作数是否小于或等于右操作数，是返回 true，否则返回 false</td></tr></tbody></table><p><strong>程序示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RelationalOperatorsExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

        <span class="token comment">// 判断两个操作数是否相等</span>
        <span class="token keyword">boolean</span> isEqual <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Is a equal to b? &quot;</span> <span class="token operator">+</span> isEqual<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>

        <span class="token comment">// 判断两个操作数是否不相等</span>
        <span class="token keyword">boolean</span> isNotEqual <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Is a not equal to b? &quot;</span> <span class="token operator">+</span> isNotEqual<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>

        <span class="token comment">// 判断左操作数是否大于右操作数</span>
        <span class="token keyword">boolean</span> isGreaterThan <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Is a greater than b? &quot;</span> <span class="token operator">+</span> isGreaterThan<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>

        <span class="token comment">// 判断左操作数是否小于右操作数</span>
        <span class="token keyword">boolean</span> isLessThan <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Is a less than b? &quot;</span> <span class="token operator">+</span> isLessThan<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>

        <span class="token comment">// 判断左操作数是否大于或等于右操作数</span>
        <span class="token keyword">boolean</span> isGreaterOrEqual <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Is a greater or equal to b? &quot;</span> <span class="token operator">+</span> isGreaterOrEqual<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>

        <span class="token comment">// 判断左操作数是否小于或等于右操作数</span>
        <span class="token keyword">boolean</span> isLessOrEqual <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Is a less or equal to b? &quot;</span> <span class="token operator">+</span> isLessOrEqual<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_3-逻辑运算符" aria-hidden="true">#</a> 3.逻辑运算符</h2><table><thead><tr><th>运算符</th><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>AND</td><td>&amp;&amp;</td><td>如果两个操作数都为true，则结果为true；否则为false</td></tr><tr><td>OR</td><td>||</td><td>如果两个操作数中至少有一个为true，则结果为true；否则为false</td></tr><tr><td>NOT</td><td>!</td><td>如果操作数为true，则结果为false；如果操作数为false，则结果为true</td></tr></tbody></table><p><strong>程序示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogicalOperatorsExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token comment">// AND运算符示例</span>
        <span class="token keyword">boolean</span> andResult <span class="token operator">=</span> a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">;</span> <span class="token comment">// false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;AND result: &quot;</span> <span class="token operator">+</span> andResult<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// OR运算符示例</span>
        <span class="token keyword">boolean</span> orResult <span class="token operator">=</span> a <span class="token operator">||</span> b<span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;OR result: &quot;</span> <span class="token operator">+</span> orResult<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// NOT运算符示例</span>
        <span class="token keyword">boolean</span> notResult <span class="token operator">=</span> <span class="token operator">!</span>a<span class="token punctuation">;</span> <span class="token comment">// false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;NOT result: &quot;</span> <span class="token operator">+</span> notResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-三元运算符" tabindex="-1"><a class="header-anchor" href="#_4-三元运算符" aria-hidden="true">#</a> 4.三元运算符</h2><table><thead><tr><th>运算符</th><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>三元运算符</td><td>x ? y : z</td><td>基于条件的真假来返回两个值中的一个</td></tr></tbody></table><p><strong>程序示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TernaryOperatorExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

        <span class="token comment">// 三元运算符示例</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span> <span class="token comment">// 10</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Result: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_5-赋值运算符" aria-hidden="true">#</a> 5.赋值运算符</h2><table><thead><tr><th>运算符</th><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>等号</td><td>=</td><td>将右侧的值赋给左侧的变量</td></tr><tr><td>扩展赋值运算符</td><td>+=</td><td>将左侧的变量与右侧的表达式相加并将结果赋给变量</td></tr><tr><td></td><td>-=</td><td>将左侧的变量与右侧的表达式相减并将结果赋给变量</td></tr><tr><td></td><td>*=</td><td>将左侧的变量与右侧的表达式相乘并将结果赋给变量</td></tr><tr><td></td><td>/=</td><td>将左侧的变量与右侧的表达式相除并将结果赋给变量</td></tr><tr><td></td><td>%=</td><td>将左侧的变量与右侧的表达式取余并将结果赋给变量</td></tr></tbody></table><p><strong>程序示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssignmentOperatorsExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

        <span class="token comment">// 扩展赋值运算符示例</span>
        num <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// num的值变为15，等同于 num = num + 5;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Updated num: &quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-位运算符" tabindex="-1"><a class="header-anchor" href="#_5-位运算符" aria-hidden="true">#</a> 5.位运算符</h2><table><thead><tr><th>运算符</th><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>AND</td><td>&amp;</td><td>对整数的位进行AND运算</td></tr><tr><td>OR</td><td>|</td><td>对整数的位进行OR运算</td></tr><tr><td>XOR</td><td>^</td><td>对整数的位进行XOR运算</td></tr><tr><td>左移</td><td>&lt;&lt;</td><td>将整数的所有位向左移动指定数量的位置</td></tr><tr><td>右移</td><td>&gt;&gt;</td><td>将整数的所有位向右移动指定数量的位置</td></tr><tr><td>无符号右移</td><td>&gt;&gt;&gt;</td><td>将整数的所有位向右移动指定数量的位置，高位补0</td></tr></tbody></table><p><strong>程序示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BitwiseOperatorsExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示为 0101</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示为 0011</span>

        <span class="token comment">// AND运算符示例</span>
        <span class="token keyword">int</span> andResult <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span> <span class="token comment">// 0001 (1)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;AND result: &quot;</span> <span class="token operator">+</span> andResult<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// OR运算符示例</span>
        <span class="token keyword">int</span> orResult <span class="token operator">=</span> a \\<span class="token operator">|</span> b<span class="token punctuation">;</span> <span class="token comment">// 0111 (7)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;OR result: &quot;</span> <span class="token operator">+</span> orResult<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// XOR运算符示例</span>
        <span class="token keyword">int</span> xorResult <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span> <span class="token comment">// 0110 (6)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;XOR result: &quot;</span> <span class="token operator">+</span> xorResult<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 左移运算符示例</span>
        <span class="token keyword">int</span> leftShift <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1010 (10)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Left Shift result: &quot;</span> <span class="token operator">+</span> leftShift<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 右移运算符示例</span>
        <span class="token keyword">int</span> rightShift <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0010 (2)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Right Shift result: &quot;</span> <span class="token operator">+</span> rightShift<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function i(u,r){return s(),a("div",null,[c,t(" more "),l])}const m=n(o,[["render",i],["__file","06 java operative symbol.html.vue"]]);export{m as default};
