import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as p,e as t,a as n,f as e}from"./app-O6B6fb-J.js";const o={},c=n("p",null,"Java中的比较很容易，但是当使用自定义类型或者尝试比较不直接可比的对象时，我们需要使用比较策略。",-1),l=n("p",null,"方法有两个，使用 Comparator 或 Comparable 接口。",-1),i=e(`<h2 id="_1-比较" tabindex="-1"><a class="header-anchor" href="#_1-比较" aria-hidden="true">#</a> 1.比较</h2><p>假设有一些球员：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> ranking<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    
    <span class="token comment">// constructor, getters, setters  </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们试着对其进行排序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> footballTeam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Player</span> player1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Player</span> player2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token string">&quot;Roger&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Player</span> player3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">&quot;Steven&quot;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    footballTeam<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    footballTeam<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    footballTeam<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>player3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Before Sorting : &quot;</span> <span class="token operator">+</span> footballTeam<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>footballTeam<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;After Sorting : &quot;</span> <span class="token operator">+</span> footballTeam<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只会得到一个错误：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">The</span> method <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> in the type <span class="token class-name">Collections</span> 
  is not applicable <span class="token keyword">for</span> the arguments <span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了能够进行排序，我们必须通过实现 Comparable 接口将 Player 对象定义为 comparable:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token comment">// same as before</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Player</span> otherPlayer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token function">getRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> otherPlayer<span class="token punctuation">.</span><span class="token function">getRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>排序顺序由 compareTo（） 方法的返回值决定。如果 x 小于 y，则 Integer.compare（x， y） 返回 -1，如果它们相等，则返回 0，否则返回 1。 该方法返回一个数字，指示被比较的对象是小于、等于还是大于作为参数传递的对象。</p><h2 id="_2-比较器" tabindex="-1"><a class="header-anchor" href="#_2-比较器" aria-hidden="true">#</a> 2.比较器</h2><p>Comparator 接口定义了一个 compare（arg1， arg2） 方法，其中包含两个表示比较对象的参数，其工作方式类似于 Comparable.compareTo（） 方法。</p><p>创建一个 Comparator 来使用 Player 的 ranking 属性对玩家进行排序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerRankingComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Player</span> firstPlayer<span class="token punctuation">,</span> <span class="token class-name">Player</span> secondPlayer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>firstPlayer<span class="token punctuation">.</span><span class="token function">getRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> secondPlayer<span class="token punctuation">.</span><span class="token function">getRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，我们可以创建一个 Comparator 来使用 Player 的 age 属性对玩家进行排序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlayerAgeComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Player</span> firstPlayer<span class="token punctuation">,</span> <span class="token class-name">Player</span> secondPlayer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>firstPlayer<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> secondPlayer<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就能根据不同的需要，使用不同的排序策略：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PlayerRankingComparator</span> playerComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayerRankingComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>footballTeam<span class="token punctuation">,</span> playerComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Before</span> <span class="token class-name">Sorting</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">John</span><span class="token punctuation">,</span> <span class="token class-name">Roger</span><span class="token punctuation">,</span> <span class="token class-name">Steven</span><span class="token punctuation">]</span>
<span class="token class-name">After</span> <span class="token class-name">Sorting</span> by ranking <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">Steven</span><span class="token punctuation">,</span> <span class="token class-name">John</span><span class="token punctuation">,</span> <span class="token class-name">Roger</span><span class="token punctuation">]</span>


<span class="token class-name">PlayerAgeComparator</span> playerComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayerAgeComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>footballTeam<span class="token punctuation">,</span> playerComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Before</span> <span class="token class-name">Sorting</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">John</span><span class="token punctuation">,</span> <span class="token class-name">Roger</span><span class="token punctuation">,</span> <span class="token class-name">Steven</span><span class="token punctuation">]</span>
<span class="token class-name">After</span> <span class="token class-name">Sorting</span> by age <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">Roger</span><span class="token punctuation">,</span> <span class="token class-name">John</span><span class="token punctuation">,</span> <span class="token class-name">Steven</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-java8比较器" tabindex="-1"><a class="header-anchor" href="#_3-java8比较器" aria-hidden="true">#</a> 3.java8比较器</h2><p>Java 8 通过使用 lambda 表达式和 comparing（） 静态工厂方法提供了定义 Comparator 的新方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Comparator</span> byRanking <span class="token operator">=</span> 
  <span class="token punctuation">(</span><span class="token class-name">Player</span> player1<span class="token punctuation">,</span> <span class="token class-name">Player</span> player2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>player1<span class="token punctuation">.</span><span class="token function">getRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> player2<span class="token punctuation">.</span><span class="token function">getRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Comparator.comparing 方法采用一个计算将用于比较项目的属性的方法，并返回一个匹配的 Comparator 实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> byRanking <span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Player</span><span class="token operator">::</span><span class="token function">getRanking</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> byAge <span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Player</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-优缺点" tabindex="-1"><a class="header-anchor" href="#_4-优缺点" aria-hidden="true">#</a> 4.优缺点</h2><p>Comparable 接口是定义默认比较策略的不错选择，换句话说，它是比较对象的主要方式。</p><p>那么，如果我们已经有 Comparable，为什么还要使用 Comparator 呢？</p><p>原因如下：</p><ul><li>有时我们无法修改我们想要排序的对象所在的类的源代码，因此无法使用 Comparable</li><li>使用 Comparators 可以避免向类添加额外的代码</li><li>我们可以定义多个不同的比较策略，这在使用 Comparable 时是不可能的</li></ul><h2 id="_5-注意" tabindex="-1"><a class="header-anchor" href="#_5-注意" aria-hidden="true">#</a> 5.注意</h2><p>我们一般用 Integer.compare（） 方法来比较两个整数。</p><p>但有的人会说，为什么不用 Comparator 方法呢，不是挺方面的么：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> p1<span class="token punctuation">.</span><span class="token function">getRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p2<span class="token punctuation">.</span><span class="token function">getRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>原因就在于它隐含着潜在的风险：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Player</span> player1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Player</span> player2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token string">&quot;Roger&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span> players <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>player1<span class="token punctuation">,</span> player2<span class="token punctuation">)</span><span class="token punctuation">;</span>
players<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 -1 远小于 Integer.MAX_VALUE，因此在排序集合中，“Roger” 应位于 “John” 之前。但是，由于整数溢出， “Integer.MAX_VALUE – （-1）” 将小于零。所以基于 Comparator/Comparable 合约，Integer.MAX_VALUE 小于 -1，这显然是不正确的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> players<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Roger&quot;</span><span class="token punctuation">,</span> players<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function u(r,k){return s(),p("div",null,[c,l,t(" more "),i])}const v=a(o,[["render",u],["__file","04 java comparator and comparable.html.vue"]]);export{v as default};
