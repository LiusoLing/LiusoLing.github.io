import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as r,e as s,a as t,f as n}from"./app-xzSjLnCe.js";const e={},i=t("p",null,"Java关键字是电脑语言里事先定义的，有特别意义的标识符，有时又叫保留字，还有特别意义的变量。",-1),l=t("p",null,"Java的关键字对Java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等，关键字不能用作变量名、方法名、类名、包名和参数。",-1),o=n(`<h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h2><table><thead><tr><th>关键字</th><th>作用</th></tr></thead><tbody><tr><td>abstract</td><td>用于声明抽象类或抽象方法。抽象类不能被实例化，通常包含抽象方法，需要子类实现。</td></tr><tr><td>assert</td><td>在调试期间添加断言，确保程序中的某个条件为真。在发布版本中，这些断言可以被禁用。</td></tr><tr><td>boolean</td><td>布尔数据类型的关键字，表示真或假。</td></tr><tr><td>break</td><td>用于在循环或 switch 语句中终止执行，并跳出循环或 switch。</td></tr><tr><td>byte</td><td>字节数据类型的关键字，用于表示8位有符号整数。</td></tr><tr><td>case</td><td>在 switch 语句中定义不同的情况。</td></tr><tr><td>catch</td><td>用于捕获异常，处理 try 块中抛出的异常。</td></tr><tr><td>char</td><td>字符数据类型的关键字，用于表示16位Unicode字符。</td></tr><tr><td>class</td><td>用于声明一个类。</td></tr><tr><td>const</td><td>在Java中，并没有真正的 const 关键字。在其他语言中用于定义常量的 const 在Java中通过 final 实现。</td></tr><tr><td>continue</td><td>用于终止循环的当前迭代，并跳到下一次迭代的开始。</td></tr><tr><td>default</td><td>在 switch 语句中定义默认情况。</td></tr><tr><td>do</td><td>用于创建一个 do-while 循环。</td></tr><tr><td>double</td><td>双精度浮点数据类型的关键字，用于表示64位双精度浮点数。</td></tr><tr><td>else</td><td>在 if 语句中定义条件不满足时的执行块。</td></tr><tr><td>enum</td><td>用于声明枚举类型。</td></tr><tr><td>extends</td><td>在类声明中用于指定一个类是另一个类的子类。</td></tr><tr><td>final</td><td>用于声明不可更改的常量、类或方法。</td></tr><tr><td>finally</td><td>用于定义在 try 块执行后必须执行的代码块。</td></tr><tr><td>float</td><td>单精度浮点数据类型的关键字，用于表示32位单精度浮点数。</td></tr><tr><td>for</td><td>用于创建一个 for 循环。</td></tr><tr><td>goto</td><td>在Java中并不使用，是保留关键字。</td></tr><tr><td>if</td><td>用于创建一个条件语句。</td></tr><tr><td>implements</td><td>在类声明中用于指定一个类实现一个或多个接口。</td></tr><tr><td>import</td><td>用于导入包或类。</td></tr><tr><td>instanceof</td><td>用于测试一个对象是否为某个类的实例。</td></tr><tr><td>int</td><td>整数数据类型的关键字，用于表示32位有符号整数。</td></tr><tr><td>interface</td><td>用于声明接口。</td></tr><tr><td>long</td><td>长整数数据类型的关键字，用于表示64位有符号整数。</td></tr><tr><td>native</td><td>在方法声明中用于指示该方法是用非Java语言编写的，并且依赖于平台特定的本地库。</td></tr><tr><td>new</td><td>用于创建新的对象或数组。</td></tr><tr><td>null</td><td>表示一个不引用任何对象的关键字。</td></tr><tr><td>package</td><td>用于声明一个包。</td></tr><tr><td>private</td><td>用于指定类、方法或变量只能在声明它们的类内部访问。</td></tr><tr><td>protected</td><td>用于指定类、方法或变量可以在声明它们的类及其子类中访问。</td></tr><tr><td>public</td><td>用于指定类、方法或变量可以被任何类访问。</td></tr><tr><td>return</td><td>用于从方法中返回一个值，并结束该方法的执行。</td></tr><tr><td>short</td><td>短整数数据类型的关键字，用于表示16位有符号整数。</td></tr><tr><td>static</td><td>用于指定变量或方法是静态的，属于类而不是实例。</td></tr><tr><td>strictfp</td><td>用于指定浮点运算严格按照 IEEE 754 标准执行。</td></tr><tr><td>super</td><td>用于引用父类的成员或调用父类的方法。</td></tr><tr><td>switch</td><td>用于创建一个 switch 语句，根据表达式的值选择执行不同的代码块。</td></tr><tr><td>synchronized</td><td>用于指定方法或代码块是同步的，防止多个线程同时访问。</td></tr><tr><td>this</td><td>用于引用当前对象。</td></tr><tr><td>throw</td><td>用于在方法内部抛出一个异常。</td></tr><tr><td>throws</td><td>在方法声明中用于指定可能抛出</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>java关键字按作用可以大致划分为四类：</p><ol><li><p><strong>用于标识一种数据类型</strong>，如：boolean、byte、char、 double、 float、int、long、new、short、void、instanceof</p></li><li><p><strong>用于表示程序结构</strong>，如：break、case、 catch、 continue、 default 、do、 else、 for、 if、return、switch、try、 while、 finally、 throw、this、 super</p></li><li><p><strong>用于修饰</strong>，如： abstract、final、native、private、 protected、public、static、synchronized、transient、 volatile</p></li><li><p><strong>用于方法、包、接口和异常</strong>，如：class、 extends、 implements、interface、 package、import、throws</p></li></ol></div><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h2><p>标识符 指所有能够自己定义名字的地方都叫做标识符。</p><p>例如：<mark>类名、变量名、方法名、接口名、枚举名</mark>。</p><p>标识符的命名要遵循下面的规则：</p><ul><li>标识符只能使用：字母、数字、下划线_、美元符$；</li><li>标识符不能以数字开头；</li><li>标识符中不能有空格；</li><li>标识符不能是Java中的关键字或保留字。</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>以上是语言层面的规则，在实际开发过程中，标识符的命名还有一些约定俗成的规范：</p><p>标识符的名称要有意义，尽量做到见名知义，一般使用英文单词，不要使用拼音；</p><ol><li>类名、接口名、枚举名使用大驼峰的命名规则（每个单词首字母大写）；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>变量名、方法名使用小驼峰的命名规则（第一个单词首字母小写，其余单词首字母大写）；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> gender <span class="token operator">=</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> firstName <span class="token operator">=</span> <span class="token string">&quot;李&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>常量名遵循 snake_case 规范，单词要大写，使用下划线连接多个单词；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">COMMON_KEY_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;key&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div>`,9);function c(p,u){return a(),r("div",null,[i,l,s(" more "),o])}const m=d(e,[["render",c],["__file","01 java keyword.html.vue"]]);export{m as default};
