const e=JSON.parse('{"key":"v-490db274","path":"/javaer/base/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/8.JavaStream%E6%B5%81/03%20java%20functional%20interface.html","title":"03. 函数式接口","lang":"zh-CN","frontmatter":{"title":"03. 函数式接口","icon":"pen-to-square","order":3,"author":"LiuSongLing","date":"2025-01-04T00:00:00.000Z","category":["java"],"tag":["java","lambda"],"sticky":false,"star":false,"description":"Java 8 通过引入 Lambda表达式 和 函数式接口（Functional Interfaces） 彻底改变了代码编写方式。 这类接口为函数式编程提供了强大支持，同时保持了对旧版本Java的兼容性。本文将深入探讨Java 8内置的核心函数式接口及其实际应用场景。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/javaer/base/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/8.JavaStream%E6%B5%81/03%20java%20functional%20interface.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"03. 函数式接口"}],["meta",{"property":"og:description","content":"Java 8 通过引入 Lambda表达式 和 函数式接口（Functional Interfaces） 彻底改变了代码编写方式。 这类接口为函数式编程提供了强大支持，同时保持了对旧版本Java的兼容性。本文将深入探讨Java 8内置的核心函数式接口及其实际应用场景。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-10T03:15:44.000Z"}],["meta",{"property":"article:author","content":"LiuSongLing"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"lambda"}],["meta",{"property":"article:published_time","content":"2025-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-10T03:15:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03. 函数式接口\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-10T03:15:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LiuSongLing\\"}]}"]]},"headers":[{"level":2,"title":"什么是函数式接口？","slug":"什么是函数式接口","link":"#什么是函数式接口","children":[]},{"level":2,"title":"核心函数式接口一览","slug":"核心函数式接口一览","link":"#核心函数式接口一览","children":[{"level":3,"title":"1. Predicate（断言型接口）","slug":"_1-predicate-断言型接口","link":"#_1-predicate-断言型接口","children":[]},{"level":3,"title":"2. Function（函数型接口）","slug":"_2-function-函数型接口","link":"#_2-function-函数型接口","children":[]},{"level":3,"title":"3. Supplier（供给型接口）","slug":"_3-supplier-供给型接口","link":"#_3-supplier-供给型接口","children":[]},{"level":3,"title":"4. Consumer（消费型接口）","slug":"_4-consumer-消费型接口","link":"#_4-consumer-消费型接口","children":[]},{"level":3,"title":"5. Operator扩展接口","slug":"_5-operator扩展接口","link":"#_5-operator扩展接口","children":[]}]},{"level":2,"title":"原始类型特化接口","slug":"原始类型特化接口","link":"#原始类型特化接口","children":[]},{"level":2,"title":"双参数接口","slug":"双参数接口","link":"#双参数接口","children":[]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1739117615000,"updatedTime":1739157344000,"contributors":[{"name":"liusongling","email":"15879144378@163.com","commits":2}]},"readingTime":{"minutes":2.78,"words":833},"filePathRelative":"javaer/base/一、Java基础/8.JavaStream流/03 java functional interface.md","localizedDate":"2025年1月4日","excerpt":"<p>Java 8 通过引入 <strong>Lambda表达式</strong> 和 <strong>函数式接口（Functional Interfaces）</strong> 彻底改变了代码编写方式。</p>\\n<p>这类接口为函数式编程提供了强大支持，同时保持了对旧版本Java的兼容性。本文将深入探讨Java 8内置的核心函数式接口及其实际应用场景。</p>\\n","autoDesc":true}');export{e as data};
