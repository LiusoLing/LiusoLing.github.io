const e=JSON.parse('{"key":"v-e558379e","path":"/javaer/base/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/2.JavaOop/19%20java%20equals%20and%20hashcode.html","title":"19. Java equals和hashCode方法","lang":"zh-CN","frontmatter":{"title":"19. Java equals和hashCode方法","icon":"pen-to-square","order":19,"author":"LiuSongLing","date":"2024-07-19T00:00:00.000Z","category":["java"],"tag":["java"],"sticky":false,"star":false,"description":"比较对象是面向对象编程语言的基本特征。 在本教程中，我们将介绍两种紧密结合的方法：.equals()和.hashCode()。我们将专注于他们彼此的关系，如何正确覆盖他们，以及为什么我们应该同时覆盖两者或两者都不覆盖。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/javaer/base/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/2.JavaOop/19%20java%20equals%20and%20hashcode.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"19. Java equals和hashCode方法"}],["meta",{"property":"og:description","content":"比较对象是面向对象编程语言的基本特征。 在本教程中，我们将介绍两种紧密结合的方法：.equals()和.hashCode()。我们将专注于他们彼此的关系，如何正确覆盖他们，以及为什么我们应该同时覆盖两者或两者都不覆盖。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-19T09:32:57.000Z"}],["meta",{"property":"article:author","content":"LiuSongLing"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-07-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-19T09:32:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"19. Java equals和hashCode方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-19T09:32:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LiuSongLing\\"}]}"]]},"headers":[{"level":2,"title":"1..equals()方法","slug":"_1-equals-方法","link":"#_1-equals-方法","children":[{"level":3,"title":"1.1 覆盖 equals()","slug":"_1-1-覆盖-equals","link":"#_1-1-覆盖-equals","children":[]},{"level":3,"title":"1.2 equals方法约定","slug":"_1-2-equals方法约定","link":"#_1-2-equals方法约定","children":[]},{"level":3,"title":"1.3 继承类可能违反equals方法的对称性","slug":"_1-3-继承类可能违反equals方法的对称性","link":"#_1-3-继承类可能违反equals方法的对称性","children":[]},{"level":3,"title":"1.4 固定 equals() 与组成对称","slug":"_1-4-固定-equals-与组成对称","link":"#_1-4-固定-equals-与组成对称","children":[]}]},{"level":2,"title":"2..hashCode()方法","slug":"_2-hashcode-方法","link":"#_2-hashcode-方法","children":[{"level":3,"title":"2.1 违反hashCode()和equals()的一致性","slug":"_2-1-违反hashcode-和equals-的一致性","link":"#_2-1-违反hashcode-和equals-的一致性","children":[]},{"level":3,"title":"2.2 带有不一致的hashCode（）的HashMap key","slug":"_2-2-带有不一致的hashcode-的hashmap-key","link":"#_2-2-带有不一致的hashcode-的hashmap-key","children":[]}]},{"level":2,"title":"3.覆盖.equals()和.hashCode()？","slug":"_3-覆盖-equals-和-hashcode","link":"#_3-覆盖-equals-和-hashcode","children":[]},{"level":2,"title":"4.覆盖帮助","slug":"_4-覆盖帮助","link":"#_4-覆盖帮助","children":[]},{"level":2,"title":"5.验证约定","slug":"_5-验证约定","link":"#_5-验证约定","children":[]}],"git":{"createdTime":1721381577000,"updatedTime":1721381577000,"contributors":[{"name":"liusongling","email":"15879144378@163.com","commits":1}]},"readingTime":{"minutes":6.97,"words":2091},"filePathRelative":"javaer/base/一、Java基础/2.JavaOop/19 java equals and hashcode.md","localizedDate":"2024年7月19日","excerpt":"<p>比较对象是面向对象编程语言的基本特征。</p>\\n<p>在本教程中，我们将介绍两种紧密结合的方法：.equals()和.hashCode()。我们将专注于他们彼此的关系，如何正确覆盖他们，以及为什么我们应该同时覆盖两者或两者都不覆盖。</p>\\n","autoDesc":true}');export{e as data};
