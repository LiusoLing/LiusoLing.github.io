import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c,e as l,a as n,b as a,d,f as s}from"./app-5cCCUltF.js";const r="/assets/images/base/base-01.png",i="/assets/images/base/base-04.jpg",u={},k=n("p",null,"Java语言具有八种原始数据类型。",-1),v=n("p",null,"在本教程中，我们将认识这些原始类型是什么，并回顾每种类型。",-1),b=s('<h2 id="_1-原始数据类型" tabindex="-1"><a class="header-anchor" href="#_1-原始数据类型" aria-hidden="true">#</a> 1.原始数据类型</h2><p>Java中定义的八个原始数据类型是<code>int、byte、short、long、float、double、boolean和char</code>。</p><p>这些不被视为对象，代表原始值。</p><p><strong>它们直接存储在堆栈上</strong>（查看本文，了解有关Java内存管理的更多信息）。</p><p>我们将了解这些类型的<code>存储大小</code>、<code>默认值</code>以及<code>如何使用</code>每种类型的示例。</p><p>以下图表可以快速参考：</p><table><thead><tr><th>类型</th><th>大小（位）</th><th>最小值</th><th>最大程度</th><th>示例</th></tr></thead><tbody><tr><td>字节</td><td>8</td><td>-2^7</td><td>2^7 - 1</td><td>byte b = 100；</td></tr><tr><td>短整型</td><td>16</td><td>-2^15</td><td>2^15 - 1</td><td>short s = 30_000；</td></tr><tr><td>整型</td><td>32</td><td>-2^31</td><td>2^31 - 1</td><td>int i = 100_000_000;</td></tr><tr><td>长整型</td><td>64</td><td>-2^63</td><td>2^63 - 1</td><td>long l = 100_000_000_000_000;</td></tr><tr><td>浮点型</td><td>32</td><td>-2^-149</td><td>(2^-23) * 2^127</td><td>float f = 1.456f;</td></tr><tr><td>双精度</td><td>64</td><td>-2^-1074</td><td>(2^-52) * 2^1023</td><td>double d = 1.456789012345678;</td></tr><tr><td>字符型</td><td>16</td><td>0</td><td>2^16 - 1</td><td>char c = &#39;c&#39;;</td></tr><tr><td>布尔型</td><td>1</td><td>–</td><td>–</td><td>boolean b = true;</td></tr></tbody></table><p><br><br><br><br><br><br></p><ul><li><p><strong>比特：</strong> 比特作为信息技术的最基本存储单位，非常小，它的简写为小写字母“b”，也称作 <strong>位</strong>。我们知道，计算机是以二进制存储数据的，二进制的一位，就是 1 比特，也就是说，比特要么为 0 要么为 1。</p></li><li><p><strong>字节：</strong> 比特这个单位太小了，就好像我们除了个，还需要十百千万这样的更大描述单位一样，字节是更大的描述单位。</p></li></ul><p><mark>1 字节 = 8 比特</mark></p><p>通常来说，一个英文字符是一个字节，一个中文字符是两个字节。</p><p>再往上的单位就是 KB，并不是 1000 字节，因为计算机只认识二进制，因此是 2 的 10 次方，也就是 1024 个字节。</p><figure><img src="'+r+`" alt="换算单位" tabindex="0" loading="lazy"><figcaption>换算单位</figcaption></figure><h2 id="_2-int" tabindex="-1"><a class="header-anchor" href="#_2-int" aria-hidden="true">#</a> 2.int</h2><p>我们了解的第一个原始数据类型是 <code>int</code>。</p><p>int类型也称为整数，是使用最广泛的数值数据类型之一。<strong>Java使用32位内存来存储它。</strong></p><p>换而言之，它可以表示从 <code>-2,147,483,648（-231）</code> 到 <code>2,147,483,647（231-1）</code> 的值。</p><p>在Java 8中，可以使用新的特殊辅助函数存储高达 <code>4,294,967,295（232-1）</code> 的无符号整数值。</p><p><br><br><br><br><br><br></p><p>我们可以简单地声明一个int：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">424_242</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在没有赋值的情况下声明的int的默认值是0。</strong></p><p><strong>如果变量是在方法中定义的，我们必须先分配一个值，然后才能使用它。</strong></p><p>我们可以在int上执行所有标准算术运算。请注意，在整数上执行这些时，十进制值将被忽略。</p><h2 id="_3-byte" tabindex="-1"><a class="header-anchor" href="#_3-byte" aria-hidden="true">#</a> 3.byte</h2><p>字节是一种类似于int的原始数据类型，<strong>只是它只占用8位内存</strong>。这就是为什么我们称它为字节。</p><p>由于内存大小非常小，字节只能容纳从 <code>-128（-27）</code>到<code>127（27-1）</code>的值。</p><p>以下是我们创建字节的方法：</p><p><br><br><br><br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token keyword">byte</span> empty<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字节的默认值也是0</strong>。</p><h2 id="_4-short" tabindex="-1"><a class="header-anchor" href="#_4-short" aria-hidden="true">#</a> 4.short</h2><p>如果我们想节省内存，但又觉得 <code>byte</code> 太小时，我们可以使用 <code>byte</code> 和 <code>int</code> 之间的类型：<strong>short</strong>。</p><p><strong>java中它占16位内存</strong>，它是 int 的一半大小和 byte 大小的两倍。</p><p>它的可能值范围为 <code>-32,768（-215）</code> 至 <code>32,767（215-1）</code>。</p><p>short 是这样声明的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">20_020</span><span class="token punctuation">;</span>

<span class="token keyword">short</span> s<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其他类型类似，<strong>默认值为0</strong>。我们也可以在该类型上使用所有标准算术。</p><h2 id="_5-long" tabindex="-1"><a class="header-anchor" href="#_5-long" aria-hidden="true">#</a> 5.long</h2><p><code>long</code> 是 <code>int</code>的大哥。<strong>存储在64位内存中</strong>，因此它可以容纳一组更大的可能值。</p><p><br><br><br><br><br><br></p><p>long 的可能值在 <code>-9,223,372,036,854,775,808（-263）</code> 到 <code>9,223,372,036,854,775,807（263-1）</code> 之间。</p><p>我们可以简单地声明一个：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">1_234_567_890</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> l<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其他类型类似，<strong>默认值为0</strong>。我们也可以在该类型上使用所有标准算术。</p><h2 id="_6-float" tabindex="-1"><a class="header-anchor" href="#_6-float" aria-hidden="true">#</a> 6.float</h2><p>在Java中，使用浮点类型表示小数。</p><p>这是一个单精度的十进制数。这意味着，如果我们超过小数点后六个点，这个数字就会变得不那么精确，而更像是一个估计。</p><p>在大多数情况下，我们并不关心精确的损失。但是，如果我们的计算需要绝对的精确度（例如，财务操作、科学计算等），我们就需要使用特定类型。有关更多信息，请查看Java类Big Decimal。</p><p><strong>float 类型存储在32位内存中，就像int一样</strong>。</p><p>然而，由于浮点小数点，其范围大不相同。它可以表示正数和负数。最小小数为 <code>1.40239846 x 10-45</code>，最大值为 <code>3.40282347 x 1038</code>。</p><p>我们声明浮点数与任何其他类型相同：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.145f</span><span class="token punctuation">;</span>

<span class="token keyword">float</span> f<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>默认值是0.0而不是0</strong>。</p><p>此外，请注意，数字末尾带有字符 <code>f</code>，以定义浮点数。否则，Java将抛出错误，因为十进制值的默认类型是整型 <code>int</code>。</p><p><br><br><br><br></p><p>我们还可以在浮点数上执行所有标准算术运算。然而，重要的是要注意，我们执行浮点算术与整数算术非常不同。</p><h2 id="_7-double" tabindex="-1"><a class="header-anchor" href="#_7-double" aria-hidden="true">#</a> 7.double</h2><p>这是一个双精度的十进制数。**它存储在64位内存中。**这意味着它代表的可能数字范围比浮动大得多。</p><p>范围为 <code>4.9406564584124654 x 10-324</code> 至 <code>1.7976931348623157 x 10308</code>。这个范围也可以是正的，也可以是负的。</p><p>声明double与其他数字类型相同：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.13457599923384753929348D</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> d<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>默认值也是0.0</strong>，与 <code>float</code> 类似，数字末尾附上字符 <code>D</code>，标识双精度浮点数。</p><h2 id="_8-boolean" tabindex="-1"><a class="header-anchor" href="#_8-boolean" aria-hidden="true">#</a> 8.boolean</h2><p>最简单的原始数据类型是布尔值。它只能包含两个值：<strong>true或false</strong>。</p><p>它将其<strong>值存储在单个位</strong>中。</p><p>然而，为了方便起见，<strong>Java填充值并将其存储在单个字节中</strong>。</p><p><br><br><br><br></p><p>声明 boolean 与其他数字类型相同：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在没有值的情况下声明它<strong>默认为false</strong>。</p><p>布尔值是控制我们程序流的基石。我们可以在它们上使用布尔运算符（例如，and(&amp;&amp;)，or(||)等）。</p><h2 id="_9-char" tabindex="-1"><a class="header-anchor" href="#_9-char" aria-hidden="true">#</a> 9.char</h2><p><code>char</code> 也称为字符，是一个16位整数，代表Unicode编码的字符。</p><p>它的范围从 <code>0</code> 到 <code>65,535</code>。在Unicode中，这表示 <code>“\\u0000”</code> 到 <code>“\\uffff”</code>。</p>`,75),m={href:"https://unicode-table.com/en/",target:"_blank",rel:"noopener noreferrer"},h=s(`<p>声明一个字符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在定义变量时，我们可以使用任何字符文字，它们将自动转换为我们的Unicode编码。字符的默认值是&#39;/u0000&#39;。</p><h2 id="_10-溢出" tabindex="-1"><a class="header-anchor" href="#_10-溢出" aria-hidden="true">#</a> 10.溢出</h2><p>原始类型都有数据范围大小的限制，当我们试图存储一个超过其数据范围大小的值时，会发生什么？</p><p><br><br><br><br></p><p><strong>我们将遇到一种叫做溢出的情况</strong>。</p><p>当整数溢出时，它会滚动到最小值，并从那里开始计数。</p><p>浮点数通过返回Infinity溢出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// j will roll over to -2_147_483_648</span>

<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> o <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// o will be Infinity</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下流是同样的问题，只是它涉及存储小于最小值的值。当数字不足时，它们返回0.0。</p><h2 id="_11-自动装箱" tabindex="-1"><a class="header-anchor" href="#_11-自动装箱" aria-hidden="true">#</a> 11.自动装箱</h2><p>每个原始数据类型还有一个完整的Java类实现，可以包装它。</p><p>例如，<code>Integer</code>类可以包装一个<code>int</code>。有时需要从原始类型转换为其对象包装器。</p><p>Java可以自动为我们执行此转换，这个过程称为自动装箱：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Character</span> c <span class="token operator">=</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">;</span>

<span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br><br><br><br></p><h2 id="_12-类型转换" tabindex="-1"><a class="header-anchor" href="#_12-类型转换" aria-hidden="true">#</a> 12.类型转换</h2><p>原始类型之间可以互相转换，转换分为 <strong>自动转换</strong> 和 <strong>强制转换</strong></p><h4 id="自动转换" tabindex="-1"><a class="header-anchor" href="#自动转换" aria-hidden="true">#</a> 自动转换</h4><blockquote><p>自动类型转换：（自动类型提升）是 Java 编译器在不需要显式转换的情况下，将一种基本数据类型自动转换为另一种基本数据类型的过程。</p></blockquote><blockquote><p>这种转换通常发生在表达式求值期间（当不同类型的数据需要相互兼容时）。</p></blockquote><blockquote><p><mark>自动类型转换只能向上转换</mark>。即从较小的数据类型（如 int）到较大的数据类型（如 long 或 double），因为较大的数据类型可以容纳较小数据类型的所有可能值，所以它们的转换是安全的。</p></blockquote><h4 id="强制转换" tabindex="-1"><a class="header-anchor" href="#强制转换" aria-hidden="true">#</a> 强制转换</h4><blockquote><p>强制类型转换：需要程序员显式地指定要执行的转换，强制类型转换可能会导致数据丢失或精度降低，因为目标类型可能无法容纳原始类型的所有可能值。</p></blockquote><p>一图总结如下：</p><figure><img src="`+i+`" alt="类型转换" tabindex="0" loading="lazy"><figcaption>类型转换</figcaption></figure><p>自动转换正确示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> intValue <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> doubleValue <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>

<span class="token comment">// 自动类型转换：intValue 被转换为 double 类型</span>
<span class="token keyword">double</span> result <span class="token operator">=</span> intValue <span class="token operator">*</span> doubleValue<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结果: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：结果: 12.5</span>


<span class="token keyword">float</span> price1 <span class="token operator">=</span> <span class="token number">10.9f</span><span class="token punctuation">;</span> <span class="token comment">// 定义牙膏的价格，单精度浮点型float</span>
<span class="token keyword">double</span> price2 <span class="token operator">=</span> <span class="token number">5.8</span><span class="token punctuation">;</span> <span class="token comment">// 定义面巾纸的价格，双精度浮点型double</span>
<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 定义牙膏的数量，整型 int</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 定义面巾纸的数量，整型 int</span>
<span class="token keyword">double</span> res <span class="token operator">=</span> price1 <span class="token operator">*</span> num1 <span class="token operator">+</span> price2 <span class="token operator">*</span> num2<span class="token punctuation">;</span> <span class="token comment">// 计算总价</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一共付给收银员&quot;</span> <span class="token operator">+</span> res <span class="token operator">+</span> <span class="token string">&quot;元&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：一共付给收银员44.99999923706055元</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动转换错误示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>

<span class="token comment">// 当表达式求值的时候，操作数被自动的提升为 int 型，</span>
<span class="token comment">// 计算结果也被提升为 int 型，无法再用 byte 型接收结果。</span>
b <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Type mismatch: cannot convert from int to byte</span>

<span class="token comment">// 正确写法</span>
b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> b <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>强制转换示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> doubleValue <span class="token operator">=</span> <span class="token number">42.8</span><span class="token punctuation">;</span>

<span class="token comment">// 强制类型转换：将 double 类型转换为 int 类型</span>
<span class="token keyword">int</span> intValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> doubleValue<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;整数值: &quot;</span> <span class="token operator">+</span> intValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：整数值: 42</span>


<span class="token keyword">float</span> price1 <span class="token operator">=</span> <span class="token number">10.9f</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> price2 <span class="token operator">=</span> <span class="token number">5.8</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> res2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>price1 <span class="token operator">*</span> num1 <span class="token operator">+</span> price2 <span class="token operator">*</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一共付给收银员&quot;</span> <span class="token operator">+</span> res2 <span class="token operator">+</span> <span class="token string">&quot;元&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：一共付给收银员44元</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33);function g(_,y){const e=o("ExternalLinkIcon");return p(),c("div",null,[k,v,l(" more "),b,n("p",null,[a("有关所有可能的Unicode值的列表，请查看"),n("a",m,[a("Unicode表"),d(e)]),a("等网站。")]),h])}const w=t(u,[["render",g],["__file","02 primitives in java.html.vue"]]);export{w as default};
