import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as t,c,e as i,a,b as s,d as l,f as n}from"./app-6o-IiJuU.js";const d={},r=a("p",null,"本节介绍Java中软件包的基础知识。我们将了解如何创建软件包并访问我们放在其中的类型，我们还将讨论命名约定以及它与底层目录结构的关系。",-1),u=a("p",null,"最后，我们将编译并运行我们打包的Java类。",-1),k=n(`<h2 id="_1-java软件包概述" tabindex="-1"><a class="header-anchor" href="#_1-java软件包概述" aria-hidden="true">#</a> 1.java软件包概述</h2><p>在Java中，我们使用<strong>软件包对相关类、接口和子软件包进行分组</strong>。</p><p>这样做的主要好处是：</p><p><br><br><br><br><br><br></p><ul><li><strong>使相关类型更容易找到</strong> -软件包通常包含逻辑相关的类型</li><li><strong>避免命名冲突</strong> -软件包将帮助我们唯一地识别一个类；例如，我们可以有com.zjy.Application，以及com.example.Application类</li><li><strong>控制访问</strong> -我们可以通过结合软件包和访问修饰符来控制对类型的可见性和访问</li></ul><p>接下来，让我们看看如何创建和使用Java软件包。</p><h2 id="_2-创建一个软件包" tabindex="-1"><a class="header-anchor" href="#_2-创建一个软件包" aria-hidden="true">#</a> 2.创建一个软件包</h2><p>要创建软件包，<strong>我们必须使用软件包语句，将其添加为文件中的第一行代码</strong>。</p><p>让我们在名为com.zjy.packages的软件包中放置一个类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zjy<span class="token punctuation">.</span>packages</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>强烈建议将每种新类型放在一个包装中</strong>。</p><p>如果我们定义类型，并且不将它们放在软件包中，它们将进入默认或未命名的软件包。使用默认软件包有几个缺点：</p><ul><li>我们失去了拥有软件包结构的好处，我们不能有子软件包</li><li>我们无法从其他软件包导入默认软件包中的类型</li><li>受保护的和包式私有访问范围将毫无意义</li></ul>`,13),m={href:"https://docs.oracle.com/javase/specs/jls/se14/html/jls-7.html#jls-7.4.2",target:"_blank",rel:"noopener noreferrer"},v=n(`<p><br><br><br><br><br><br></p><p>因此，<strong>我们应该避免在实际使用的应用程序中使用未命名或默认软件包</strong>。</p><h3 id="_2-1-命名惯例" tabindex="-1"><a class="header-anchor" href="#_2-1-命名惯例" aria-hidden="true">#</a> 2.1 命名惯例</h3><p>为了避免具有相同名称的软件包，我们遵循一些命名惯例：</p><blockquote><ol><li>用<strong>小写</strong>来定义我们的<strong>软件包名称</strong></li><li>软件包名称是句号分隔的</li><li>名称也由<strong>创建</strong>它们的<strong>公司</strong>或<strong>组织</strong>决定</li></ol></blockquote><p>为了根据组织确定软件包名称，我们通常会从反转公司URL开始。在那之后，命名惯例由公司定义，可能包括部门名称和项目名称。</p><p>例如，要从www.zjy.com制作一个软件包，让我们反转它：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>com<span class="token punctuation">.</span>zjy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们可以进一步定义这个的子包，如 <code>com.zjy.packages</code> 或 <code>com.zjy.packages.domain</code>。</p><p><br><br><br><br><br><br></p><h3 id="_2-2-目录结构" tabindex="-1"><a class="header-anchor" href="#_2-2-目录结构" aria-hidden="true">#</a> 2.2 目录结构</h3><p>Java中的软件包与目录结构相对应。</p><p><strong>每个软件包和子软件包都有自己的目录</strong>。因此，对于 <code>com.zjy.packages</code> 软件包，我们应该有一个 <code>com -&gt; zjy -&gt; packages</code> 的目录结构。</p><p>大多数 IDE 将帮助我们根据软件包名称创建好此目录结构，因此我们不必手动创建这些。</p><h2 id="_3-使用软件包成员" tabindex="-1"><a class="header-anchor" href="#_3-使用软件包成员" aria-hidden="true">#</a> 3.使用软件包成员</h2><p>让我们从在名为 <code>domain</code>的子包中定义一个类 <code>TodoItem</code> 开始：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zjy<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodoItem</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
    
    <span class="token comment">// standard getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-import引入" tabindex="-1"><a class="header-anchor" href="#_3-1-import引入" aria-hidden="true">#</a> 3.1 import引入</h3><p>为了从另一个软件包中的类中使用我们的 <code>TodoItem</code> 类，我们需要导入它。一旦它被导入，我们就可以按名称访问它。</p><p><strong>我们可以从软件包中导入单个类型，或者使用星号导入软件包中的所有类型</strong>。</p><p>让我们导入整个 <code>domain</code> 子包：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>zjy<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以只导入 <code>TodoItem</code> 类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">TodoItem</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><br><br><br><br><br><br></p><p>JDK和其他Java库也带有自己的软件包。<strong>我们可以以同样的方式导入我们想要在项目中使用的预先存在的类</strong>。</p><p>例如，让我们导入Java核心列表接口和ArrayList类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>然后，我们可以在应用程序中使用这些类型，只需使用它们的名称</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> todoItems<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTodoItem</span><span class="token punctuation">(</span><span class="token class-name">TodoItem</span> todoItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>todoItems <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            todoItems <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        todoItems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>todoItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用我们的新类和Java核心类来创建ToDoItems列表。</p><h3 id="_3-2-全限定类名" tabindex="-1"><a class="header-anchor" href="#_3-2-全限定类名" aria-hidden="true">#</a> 3.2 全限定类名</h3><p>有时，我们可能会从不同的软件包中使用两个名称相同的类。</p><p>例如，我们可能同时使用 <code>java.sql.Date</code> 和 <code>java.util.Date</code> 。当我们遇到命名冲突时，我们需要为至少一个类使用完全限定的类名。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>zjy<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span>TodoItem</span><span class="token punctuation">&gt;</span></span> todoItems<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTodoItem</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>zjy<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span>TodoItem</span> todoItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>todoItems <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            todoItems <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>zjy<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span>TodoItem</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>todoItems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>todoItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// standard getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-javac编译" tabindex="-1"><a class="header-anchor" href="#_4-javac编译" aria-hidden="true">#</a> 4.javac编译</h2><p>当需要编译我们的打包类时，我们需要记住我们的目录结构。</p><p>从源文件夹开始，我们需要告诉javac在哪里可以找到我们的文件。</p><p>我们需要先编译我们的 <code>TodoItem</code> 类，因为我们的 <code>TodoList</code> 类依赖于它。</p><p><br><br><br><br><br><br></p><p>让我们打开命令行或终端，然后导航到我们的源目录。</p><p>现在，让我们编译我们的 <code>com.zjy.packages.domain.TodoItem</code> 类：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> javac com/zjy/packages/domain/TodoItem.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们的类编译干净，我们将看不到错误消息，并且 <code>TodoItem.class</code> 文件应该出现在 <code>com/zjy/packages/domain</code> 目录中。</p><p>对于引用其他软件包中类型的类型，我们应该使用 <code>-classpath</code> 标志来告诉 <code>javac</code> 命令在哪里可以找到其他编译的类。</p><p>现在我们的 <code>TodoItem</code> 类已经编译了，我们可以编译我们的 <code>TodoList</code> 和 <code>TodoApp</code> 类：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span>javac <span class="token parameter variable">-classpath</span> <span class="token builtin class-name">.</span> com/zjy/packages/*.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，我们应该没有看到错误消息，我们应该在 <code>com/zjy/packages</code> 目录中找到两个类文件。</p><p>让我们使用 <code>TodoApp</code> 类的完全限定名称运行我们的应用程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span>java com.zjy.packages.TodoApp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，控制台将打印输出。</p>`,51);function g(b,h){const e=o("ExternalLinkIcon");return t(),c("div",null,[r,u,i(" more "),k,a("p",null,[s("正如"),a("a",m,[s("Java语言规范所述"),l(e)]),s("，未命名的软件包由Java SE平台提供，主要是为了方便开发小型或临时应用程序或刚开始开发时。")]),v])}const _=p(d,[["render",g],["__file","06 guides to java pakages.html.vue"]]);export{_ as default};
