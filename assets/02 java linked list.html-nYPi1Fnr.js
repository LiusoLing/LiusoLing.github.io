import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,e,a as i,f as t}from"./app-LeoV-3ht.js";const l={},p=i("p",null,"LinkedList 是 List 和 Deque 接口的双向链表实现。它实现所有可选的 list作并允许所有元素（包括 null）。",-1),c=t(`<h2 id="_1-特点" tabindex="-1"><a class="header-anchor" href="#_1-特点" aria-hidden="true">#</a> 1.特点</h2><p>LinkedList 最重要的特点：</p><ul><li>动态大小：链表的一个显著优点是其大小可以根据需要动态调整，不需要预先分配存储空间。</li><li>高效的插入和删除操作：在链表中插入或删除元素只需要改变相关节点的指针值，这使得这些操作比数组中的相应操作更高效。特别是在单链表中，如果知道要操作节点的前一个节点位置，就可以快速完成插入或删除。</li><li>顺序访问：与数组不同，链表不支持随机访问元素。要访问链表中的某个元素，必须从头节点开始，顺着链接依次访问直到找到目标节点。这意味着访问特定元素的时间复杂度为O(n)。</li><li>额外的内存开销：由于每个节点不仅要存储实际的数据，还要存储指向下一个节点的指针（对于双向链表，还有指向前一个节点的指针），因此链表相对于数组有更高的内存开销。</li><li>多种类型：根据链接的方式，链表可以分为单向链表、双向链表和循环链表等不同类型。每种类型都有其特定的应用场景和优缺点。</li><li>易于实现的简单性和灵活性：链表的实现相对简单，并且非常灵活，可以根据需求设计成不同的形式，如上面提到的不同类型的链表。</li></ul><h2 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2.使用</h2><p>LinkedList 的使用和 ArrayList 并无什么不同，不管是初始化的方式，还是 提供的API，并无差异。</p><h2 id="_3-队列" tabindex="-1"><a class="header-anchor" href="#_3-队列" aria-hidden="true">#</a> 3.队列</h2><p>Deque 接口提供了类似队列的行为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>linkedList<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
linkedList<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法检索第一个元素并将其从列表中删除。</p><p>poll（） 和 pop（） 的区别在于 pop 会在空列表上抛出 NoSuchElementException（），而 poll 返回 null。API pollFirst（） 和 pollLast（） 也可用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>linkedList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此方法将元素作为集合的头部插入。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4.总结</h2><p>ArrayList 通常是默认的 List 实现。</p><p>但是，在某些场景中使用 LinkedList 会更合适，例如对恒定插入/删除时间（例如，频繁插入/删除/更新）、恒定访问时间和有效内存使用时。</p>`,15);function o(d,u){return n(),s("div",null,[p,e(" more "),c])}const _=a(l,[["render",o],["__file","02 java linked list.html.vue"]]);export{_ as default};
