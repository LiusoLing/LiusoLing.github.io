import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,e as t,a as n,f as p}from"./app-5cCCUltF.js";const c={},o=n("p",null,"在本文章中，我们将学习Java中StringBuilder和StringBuffer之间的异同。",-1),i=n("p",null,"StringBuilder是在Java 1.5中引入的，作为StringBuffer的替代品。",-1),l=p(`<h2 id="stringbuilder和stringbuffer异同" tabindex="-1"><a class="header-anchor" href="#stringbuilder和stringbuffer异同" aria-hidden="true">#</a> StringBuilder和StringBuffer异同</h2><p><code>StringBuilder</code> 和 <code>StringBuffer</code> 都创建包含可变字符序列的对象。</p><p>让我们看看它是如何工作的，以及它与不可变字符串类 <code>String</code> 的比较：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> immutable <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
immutable <span class="token operator">=</span> immutable <span class="token operator">+</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管看起来我们通过连接符连接 <code>def</code> 来修改同一对象，但其实正在创建一个新对象，因为 <code>String</code> 实例无法修改。</p><p>而使用 <code>StringBuffer</code> 或 <code>StringBuilder </code>时，我们可以使用 <code>append()</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;def&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里没有创建新对象。我们在 sb 实例上调用了 <code>append()</code> 方法，并修改了其内容。<code>StringBuffer</code> 和 <code>StringBuilder</code> 是可变对象。</p><p>不同之处：</p><ul><li><p><strong>StringBuffer</strong>：使用了 <code>synchronized</code> 关键字，因此线程安全。</p></li><li><p><strong>StringBuilder</strong>：线程不安全，速度更快，API方法与 <code>StringBuffer</code> 一致。</p></li></ul><h2 id="基准测试" tabindex="-1"><a class="header-anchor" href="#基准测试" aria-hidden="true">#</a> 基准测试</h2><p>在迭代次数小时，两者性能的差异微乎其微，我们可以用 JMH 做一个微基准测试，反应出性能速度的差别：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyState</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> iterations <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> initial <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> suffix <span class="token operator">=</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token class-name">StringBuffer</span> <span class="token function">benchmarkStringBuffer</span><span class="token punctuation">(</span><span class="token class-name">MyState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>initial<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>iterations<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> stringBuffer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">benchmarkStringBuilder</span><span class="token punctuation">(</span><span class="token class-name">MyState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>initial<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>iterations<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> stringBuilder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用了默认的吞吐量模式——即每单位时间的操作（得分越高越好），上述测试有如下结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Benchmark</span>                                          <span class="token class-name">Mode</span>  <span class="token class-name">Cnt</span>      <span class="token class-name">Score</span>      <span class="token class-name">Error</span>  <span class="token class-name">Units</span>
<span class="token class-name">StringBufferStringBuilder</span><span class="token punctuation">.</span>benchmarkStringBuffer   thrpt  <span class="token number">200</span>  <span class="token number">86169.834</span> ±  <span class="token number">972.477</span>  ops<span class="token operator">/</span>s
<span class="token class-name">StringBufferStringBuilder</span><span class="token punctuation">.</span>benchmarkStringBuilder  thrpt  <span class="token number">200</span>  <span class="token number">91076.952</span> ± <span class="token number">2818.028</span>  ops<span class="token operator">/</span>s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当迭代次数从 1K 调整为 1M 时，更能看清楚这种差别：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Benchmark</span>                                          <span class="token class-name">Mode</span>  <span class="token class-name">Cnt</span>   <span class="token class-name">Score</span>   <span class="token class-name">Error</span>  <span class="token class-name">Units</span>
<span class="token class-name">StringBufferStringBuilder</span><span class="token punctuation">.</span>benchmarkStringBuffer   thrpt  <span class="token number">200</span>  <span class="token number">77.178</span> ± <span class="token number">0.898</span>  ops<span class="token operator">/</span>s
<span class="token class-name">StringBufferStringBuilder</span><span class="token punctuation">.</span>benchmarkStringBuilder  thrpt  <span class="token number">200</span>  <span class="token number">85.769</span> ± <span class="token number">1.966</span>  ops<span class="token operator">/</span>s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function r(u,d){return a(),e("div",null,[o,i,t(" more "),l])}const v=s(c,[["render",r],["__file","05 java stringbuffer and stringbuilder.html.vue"]]);export{v as default};
