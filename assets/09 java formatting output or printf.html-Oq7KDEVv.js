import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,e,f as n}from"./app-hJ4_2O4c.js";const p={},c=n("<p><code>PrintStream</code> 是 Java 中用于输出格式化文本的类。它提供了多种方法来将数据输出到控制台或文件，其中 <code>printf</code> 是最常用的方法之一。</p><p><code>printf</code> 方法允许开发者使用格式字符串来控制输出的格式，类似于 C 语言中的 <code>printf</code> 函数。</p><p>本文将详细介绍 <code>PrintStream</code> 的 <code>printf</code> 方法及其使用场景。</p>",3),o=n(`<h2 id="_1-printstream-概述" tabindex="-1"><a class="header-anchor" href="#_1-printstream-概述" aria-hidden="true">#</a> 1. <code>PrintStream</code> 概述</h2><p><code>PrintStream</code> 是 <code>OutputStream</code> 的子类，用于输出格式化的文本。它支持多种输出方法，如 <code>print()</code>、<code>println()</code> 和 <code>printf()</code>。<code>printf</code> 方法特别适合需要格式化输出的场景。</p><h3 id="_1-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_1-1-基本用法" aria-hidden="true">#</a> 1.1 基本用法</h3><p>以下是一个简单的示例，展示如何使用 <code>PrintStream</code> 的 <code>printf</code> 方法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintfExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello， %s!%n&quot;</span>， <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码说明</strong>:</p><ul><li><code>%s</code> 是格式说明符，用于插入字符串。</li><li><code>%n</code> 表示换行符，相当于 <code>\\n</code>。</li></ul><p>输出结果为:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello， World!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-printf-方法详解" tabindex="-1"><a class="header-anchor" href="#_2-printf-方法详解" aria-hidden="true">#</a> 2. <code>printf</code> 方法详解</h2><p><code>printf</code> 方法的语法如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">PrintStream</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">String</span> format， <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>format</code>: 格式字符串，包含普通文本和格式说明符。</li><li><code>args</code>: 要插入到格式字符串中的参数。</li></ul><h3 id="_2-1-常用格式说明符" tabindex="-1"><a class="header-anchor" href="#_2-1-常用格式说明符" aria-hidden="true">#</a> 2.1 常用格式说明符</h3><p>以下是一些常用的格式说明符:</p><table><thead><tr><th>说明符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>%s</code></td><td>字符串</td><td><code>&quot;Hello&quot;</code></td></tr><tr><td><code>%d</code></td><td>十进制整数</td><td><code>42</code></td></tr><tr><td><code>%f</code></td><td>浮点数</td><td><code>3.14</code></td></tr><tr><td><code>%c</code></td><td>字符</td><td><code>&#39;A&#39;</code></td></tr><tr><td><code>%b</code></td><td>布尔值</td><td><code>true</code></td></tr><tr><td><code>%x</code></td><td>十六进制整数</td><td><code>0x1F</code></td></tr><tr><td><code>%o</code></td><td>八进制整数</td><td><code>017</code></td></tr><tr><td><code>%e</code></td><td>科学计数法浮点数</td><td><code>1.23e+10</code></td></tr><tr><td><code>%t</code></td><td>日期/时间</td><td><code>2023-10-01</code></td></tr><tr><td><code>%n</code></td><td>换行符</td><td>(无)</td></tr></tbody></table><h3 id="_2-2-格式化整数" tabindex="-1"><a class="header-anchor" href="#_2-2-格式化整数" aria-hidden="true">#</a> 2.2 格式化整数</h3><p><code>%d</code> 用于格式化整数。可以指定宽度和对齐方式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Number: %d%n&quot;</span>， number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Number: %5d%n&quot;</span>， number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宽度为 5，右对齐</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Number: %-5d%n&quot;</span>， number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宽度为 5，左对齐</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Number: 42
Number:    42
Number: 42   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-格式化浮点数" tabindex="-1"><a class="header-anchor" href="#_2-3-格式化浮点数" aria-hidden="true">#</a> 2.3 格式化浮点数</h3><p><code>%f</code> 用于格式化浮点数。可以指定精度和宽度。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pi: %.2f%n&quot;</span>， pi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保留两位小数</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pi: %10.2f%n&quot;</span>， pi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宽度为 10，保留两位小数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Pi: 3.14
Pi:       3.14
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-格式化日期和时间" tabindex="-1"><a class="header-anchor" href="#_2-4-格式化日期和时间" aria-hidden="true">#</a> 2.4 格式化日期和时间</h3><p><code>%t</code> 用于格式化日期和时间。可以使用不同的格式符号来表示日期和时间的各个部分。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Date: %tD%n&quot;</span>， now<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MM/dd/yy 格式</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Time: %tT%n&quot;</span>， now<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HH:mm:ss 格式</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Date: 10/01/23
Time: 14:30:45
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-格式化布尔值" tabindex="-1"><a class="header-anchor" href="#_2-5-格式化布尔值" aria-hidden="true">#</a> 2.5 格式化布尔值</h3><p><code>%b</code> 用于格式化布尔值。它可以将任何非 <code>null</code> 对象格式化为 <code>true</code>，将 <code>null</code> 格式化为 <code>false</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Flag: %b%n&quot;</span>， flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Flag: %b%n&quot;</span>， <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Flag: true
Flag: false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用-printstream-输出到文件" tabindex="-1"><a class="header-anchor" href="#_3-使用-printstream-输出到文件" aria-hidden="true">#</a> 3. 使用 <code>PrintStream</code> 输出到文件</h2><p>除了输出到控制台，<code>PrintStream</code> 还可以用于将格式化文本写入文件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilePrintStreamExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ps<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello， %s!%n&quot;</span>， <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ps<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pi: %.2f%n&quot;</span>， <span class="token number">3.14159</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据已写入 output.txt 文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码说明</strong>:</p><ul><li><code>PrintStream</code> 包装了 <code>FileOutputStream</code>，用于将数据写入文件。</li></ul><h2 id="_4-使用-printstream-的注意事项" tabindex="-1"><a class="header-anchor" href="#_4-使用-printstream-的注意事项" aria-hidden="true">#</a> 4. 使用 <code>PrintStream</code> 的注意事项</h2><h3 id="_4-1-异常处理" tabindex="-1"><a class="header-anchor" href="#_4-1-异常处理" aria-hidden="true">#</a> 4.1 异常处理</h3><p><code>PrintStream</code> 的方法不会抛出 <code>IOException</code>，而是通过 <code>checkError()</code> 方法检查是否发生错误。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello， %s!%n&quot;</span>， <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ps<span class="token punctuation">.</span><span class="token function">checkError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;写入时发生错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>:</p><ul><li><code>checkError()</code> 方法返回 <code>true</code> 表示在写入过程中发生了错误。</li></ul><h3 id="_4-2-关闭流" tabindex="-1"><a class="header-anchor" href="#_4-2-关闭流" aria-hidden="true">#</a> 4.2 关闭流</h3><p>在使用完 <code>PrintStream</code> 后，应调用 <code>close()</code> 方法关闭流，以释放系统资源。如果使用 <code>try-with-resources</code> 语句，流会自动关闭。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ps<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello， %s!%n&quot;</span>， <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5. 总结</h2><p><code>PrintStream</code> 的 <code>printf</code> 方法是 Java 中格式化输出的强大工具。</p><p>通过使用格式说明符，开发者可以轻松控制输出的格式，包括字符串、整数、浮点数、日期和布尔值等。</p><p><code>PrintStream</code> 不仅可以输出到控制台，还可以将数据写入文件。在实际开发中，合理使用 <code>printf</code> 方法可以让输出更加清晰和易读。</p>`,54);function i(l,u){return a(),t("div",null,[c,e(" more "),o])}const k=s(p,[["render",i],["__file","09 java formatting output or printf.html.vue"]]);export{k as default};
