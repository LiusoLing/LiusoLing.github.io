const e=JSON.parse('{"key":"v-5fbbfe8d","path":"/database/pgsql/learning/3.3%20Foreign%20Keys.html","title":"3.3 外键","lang":"zh-CN","frontmatter":{"title":"3.3 外键","icon":"pen-to-square","order":1,"author":"LiuSongLing","date":"2024-12-24T00:00:00.000Z","category":["pgsql"],"tag":["pgsql"],"sticky":false,"star":false,"description":"假设一种情况：您希望确保没有人可以在 weather 表中插入在 cities 表中没有匹配条目的行。 这称为维护数据的引用完整性。在简单的数据库系统中，这将通过首先查看 cities 表以检查是否存在匹配的记录，然后插入或拒绝新的 weather 记录来实现（如果有的话）。 这种方法有很多问题，而且非常不方便，所以 PostgreSQL 的 外键 可以帮你做这个。 让我们重新声明表： CREATE TABLE cities ( name varchar(80) primary key, location point ); CREATE TABLE weather ( city varchar(80) references cities(name), temp_lo int, temp_hi int, prcp real, date date );","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/database/pgsql/learning/3.3%20Foreign%20Keys.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"3.3 外键"}],["meta",{"property":"og:description","content":"假设一种情况：您希望确保没有人可以在 weather 表中插入在 cities 表中没有匹配条目的行。 这称为维护数据的引用完整性。在简单的数据库系统中，这将通过首先查看 cities 表以检查是否存在匹配的记录，然后插入或拒绝新的 weather 记录来实现（如果有的话）。 这种方法有很多问题，而且非常不方便，所以 PostgreSQL 的 外键 可以帮你做这个。 让我们重新声明表： CREATE TABLE cities ( name varchar(80) primary key, location point ); CREATE TABLE weather ( city varchar(80) references cities(name), temp_lo int, temp_hi int, prcp real, date date );"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-25T09:24:59.000Z"}],["meta",{"property":"article:author","content":"LiuSongLing"}],["meta",{"property":"article:tag","content":"pgsql"}],["meta",{"property":"article:published_time","content":"2024-12-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-25T09:24:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.3 外键\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-25T09:24:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LiuSongLing\\"}]}"]]},"headers":[],"git":{"createdTime":1735118699000,"updatedTime":1735118699000,"contributors":[{"name":"liusongling","email":"15879144378@163.com","commits":1}]},"readingTime":{"minutes":1.26,"words":379},"filePathRelative":"database/pgsql/learning/3.3 Foreign Keys.md","localizedDate":"2024年12月24日","excerpt":"<p>假设一种情况：您希望确保没有人可以在 weather 表中插入在 cities 表中没有匹配条目的行。</p>\\n<p>这称为维护数据的引用完整性。在简单的数据库系统中，这将通过首先查看 cities 表以检查是否存在匹配的记录，然后插入或拒绝新的 weather 记录来实现（如果有的话）。</p>\\n<p>这种方法有很多问题，而且非常不方便，所以 PostgreSQL 的 <code>外键</code> 可以帮你做这个。</p>\\n<p>让我们重新声明表：</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-ext=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">CREATE</span> <span class=\\"token keyword\\">TABLE</span> cities <span class=\\"token punctuation\\">(</span>\\n        name     <span class=\\"token keyword\\">varchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">80</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">primary</span> <span class=\\"token keyword\\">key</span><span class=\\"token punctuation\\">,</span>\\n        location <span class=\\"token keyword\\">point</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">CREATE</span> <span class=\\"token keyword\\">TABLE</span> weather <span class=\\"token punctuation\\">(</span>\\n        city      <span class=\\"token keyword\\">varchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">80</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">references</span> cities<span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n        temp_lo   <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span>\\n        temp_hi   <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span>\\n        prcp      <span class=\\"token keyword\\">real</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token keyword\\">date</span>      <span class=\\"token keyword\\">date</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
