import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as o,e as p,a as s,b as n,f as e}from"./app-O6B6fb-J.js";const c={},l=s("p",null,[n("在Java 8中，"),s("code",null,"Collectors"),n("是一个用于聚合数据的工具，可以与Streams API结合使用。")],-1),i=s("p",null,[n("通过"),s("code",null,"Collectors"),n("，我们可以将流中的元素收集到集合中、拼接字符串、统计元素等。")],-1),u=e(`<h2 id="_1-collectors的基本用法" tabindex="-1"><a class="header-anchor" href="#_1-collectors的基本用法" aria-hidden="true">#</a> 1. Collectors的基本用法</h2><p><code>Collectors</code>类提供了多种静态方法，允许开发者方便地将流中的元素汇聚成各种数据结构，最常见的是List、Set或者Map。</p><p><strong>示例:收集流中的元素到List</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span>， <span class="token string">&quot;b&quot;</span>， <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-常用的collectors方法" tabindex="-1"><a class="header-anchor" href="#_2-常用的collectors方法" aria-hidden="true">#</a> 2. 常用的Collectors方法</h2><ul><li><strong>toList()</strong>:将流的元素收集到List中。</li><li><strong>toSet()</strong>:将流的元素收集到Set中。</li><li><strong>toMap()</strong>:将流的元素收集到Map中。</li></ul><p><strong>示例:收集流中的元素到Map</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span>， <span class="token class-name">String</span><span class="token operator">&gt;</span> map <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span>， <span class="token string">&quot;b&quot;</span>， <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span>， <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-聚合操作" tabindex="-1"><a class="header-anchor" href="#_3-聚合操作" aria-hidden="true">#</a> 3. 聚合操作</h2><p><code>Collectors</code>还支持各种聚合操作，如计数、求和等。</p><ul><li><strong>counting()</strong>:统计流中的元素数量。</li><li><strong>summarizingInt()</strong>:统计整数类型元素的汇总信息(总数、最小值、最大值、平均值等)。</li></ul><p><strong>示例:元素计数</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span>， <span class="token string">&quot;b&quot;</span>， <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-分组和分区" tabindex="-1"><a class="header-anchor" href="#_4-分组和分区" aria-hidden="true">#</a> 4. 分组和分区</h2><ul><li><strong>groupingBy()</strong>:根据某个属性对元素进行分组。</li><li><strong>partitioningBy()</strong>:将流的元素划分成两个集合，基于给定的条件。</li></ul><p><strong>示例:按字符串长度分组</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span>， <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> groupedByLength <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span>， <span class="token string">&quot;bb&quot;</span>， <span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例:按条件分区</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Boolean</span>， <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> partitioned <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span>， <span class="token string">&quot;bb&quot;</span>， <span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-自定义收集器" tabindex="-1"><a class="header-anchor" href="#_5-自定义收集器" aria-hidden="true">#</a> 5. 自定义收集器</h2><p>如果内置的收集器无法满足需求，可以自定义收集器。要实现一个自定义的收集器，需要实现<code>Collector</code>接口。</p><p><strong>示例:自定义收集器</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Collector</span><span class="token operator">&lt;</span><span class="token class-name">String</span>， <span class="token class-name">StringBuilder</span>， <span class="token class-name">String</span><span class="token operator">&gt;</span> customCollector <span class="token operator">=</span>
    <span class="token class-name">Collector</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span><span class="token operator">::</span><span class="token keyword">new</span>， <span class="token class-name">StringBuilder</span><span class="token operator">::</span><span class="token function">append</span>， <span class="token class-name">StringBuilder</span><span class="token operator">::</span><span class="token function">append</span>， <span class="token class-name">StringBuilder</span><span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>Collectors</code>是Java 8的强大特性，使得数据聚合操作变得简单而高效。</p><p>通过结合Streams API，我们可以用更加声明式的风格处理数据，提高代码的可读性和可维护性。</p>`,26);function r(k,d){return t(),o("div",null,[l,i,p(" more "),u])}const v=a(c,[["render",r],["__file","04 java collectors.html.vue"]]);export{v as default};
