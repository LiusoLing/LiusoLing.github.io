import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,f as e}from"./app-hJ4_2O4c.js";const p={},o=e(`<p>事务是所有数据库系统的基本概念。</p><p>事务的要点是它将多个步骤捆绑到一个全有或全无的操作中。</p><p>步骤之间的中间状态对其他并发事务不可见，如果发生阻止事务完成的故障，则任何步骤都不会影响数据库。</p><p>事务必须是全有或全无的，不仅要对数据库产生永久影响，还要约束它们发生的可见性。</p><p>当多个事务并发运行时，每个事务都不应看到其他事务所做的不完整更改（事务之间不可见）。</p><p>在 PostgreSQL 中，事务是通过用 BEGIN 和 COMMIT 命令将事务的 SQL 命令括起来来设置的。所以我们的银行交易实际上看起来像：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100.00</span>
    <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- etc etc</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PostgreSQL 实际上将每个 SQL 语句都视为在事务中执行。如果不发出 BEGIN 命令，则每个单独的语句都有一个隐式的 BEGIN 和 COMMIT（如果成功）。由 BEGIN 和 COMMIT 包围的一组语句有时称为事务块。</p><p><br><br><br></p><p>通过使用 savepoint，可以以更精细的方式控制事务中的语句。Savepoint 允许您有选择地丢弃事务的某些部分，同时提交其余部分。</p><p>使用 SAVEPOINT 定义 Savepoint 后，如果需要，可以使用 ROLLBACK TO 回滚到该 Savepoint。</p><p>在定义 savepoint 和回滚到它之间的所有事务数据库更改都将被丢弃，但早于 savepoint 的更改将被保留。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100.00</span>
    <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SAVEPOINT</span> my_savepoint<span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">100.00</span>
    <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- oops ... forget that and use Wally&#39;s account</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> my_savepoint<span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">100.00</span>
    <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Wally&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ROLLBACK TO 是重新获得对由于错误而被系统置于 aborted 状态的事务块的控制权的唯一方法，而不是将其完全回滚并重新开始。</strong></p>`,14),t=[o];function c(l,r){return n(),a("div",null,t)}const k=s(p,[["render",c],["__file","3.4 Transactions.html.vue"]]);export{k as default};
