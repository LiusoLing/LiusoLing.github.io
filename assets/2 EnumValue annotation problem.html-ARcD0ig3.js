import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as i,c as u,e as d,a as n,d as s,w as o,b as a,f as e}from"./app-hJ4_2O4c.js";const r="/assets/images/base/enumvalue-problem.jpg",k="/assets/images/base/enumvalue-solve.jpg",m={},v=e("<p>Mybatis Plus 有一个很方便的注解 <code>@EnumValue</code>，该注解用在枚举类的 <code>code</code> 属性上，这样 <code>Entity</code> 可以直接使用 枚举 作为属性，保存 和 查询 Entity 时，mybatis plus 会自行处理映射关系。</p><p>但有一个问题，使用 <code>@EnumValue</code> 注解时，数据库为 <code>null</code>，默认会映射成 <code>ordinaral</code> 为 0 的枚举值。</p>",2),g=e(`<h2 id="enumvalue" tabindex="-1"><a class="header-anchor" href="#enumvalue" aria-hidden="true">#</a> @EnumValue</h2><p><code>@EnumValue</code> 注解官方使用示例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 支持普通枚举类字段, 只用在enum类的字段上
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>当实体类的属性是普通枚举，且是其中一个字段，使用该注解来标注枚举类里的那个属性对应字段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 使用方式参考 com.baomidou.mybatisplus.test.h2.H2StudentMapperTest
 *
 * <span class="token keyword">@author</span> yuxiaobin
 * <span class="token keyword">@date</span> 2018/8/30
 */</span>
 <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">GradeEnum</span> grade<span class="token punctuation">;</span><span class="token comment">//数据库grade字段类型为int</span>
 <span class="token punctuation">}</span>
 
 <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">GradeEnum</span> <span class="token punctuation">{</span>
    <span class="token function">PRIMARY</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;小学&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SECONDORY</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;中学&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">HIGH</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;高中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token annotation punctuation">@EnumValue</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> descp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2>`,4),b=n("ul",null,[n("li",null,"mybatis plus：3.5.2"),n("li",null,"mysql-connector-java：8.0.16")],-1),_=e('<p>使用 <code>@EnumValue</code>注解，当数据库为 null 时，仍然映射了 <code>ordinaral</code> 为 0 的枚举值。</p><p><code>debug</code> 时发现问题出现在 <code>MybatisEnumTypeHandler</code> 类中，<code>getNullableResult</code> 方法的第一行，<code>ResultSet.getObject</code> 方法返回的是 0 而不是 null：</p><figure><img src="'+r+'" alt="MybatisEnumTypeHandler" tabindex="0" loading="lazy"><figcaption>MybatisEnumTypeHandler</figcaption></figure><p>看代码就能见名知义，<code>ResultSet.getObject(columnName, this.propertyType)</code> <mark>根据列名和数据库表列字段类型，获取到数据库列的值。</mark></p><p>这里就有一个疑问，数据库字段的值不是 <code>null</code> 吗？为什么该方法会返回 <code>0</code> 呢？</p>',5),y=n("p",null,"搜索官方issue列表发现，该问题已有人提出并解决：",-1),f={href:"https://github.com/baomidou/mybatis-plus/issues/5266",target:"_blank",rel:"noopener noreferrer"},h=e('<figure><img src="'+k+`" alt="官方issue解决" tabindex="0" loading="lazy"><figcaption>官方issue解决</figcaption></figure><p>所以最终通过将 <code>pom.xml</code> 中的 <code>mysql-connector-java</code> 驱动版本升级为 <code>8.0.33</code> 解决了该问题。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--MySQL连接驱动--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function E(x,w){const t=p("font"),c=p("ExternalLinkIcon");return i(),u("div",null,[v,d(" more "),g,n("p",null,[n("strong",null,[s(t,{color:"red"},{default:o(()=>[a("环境版本：")]),_:1})])]),b,n("p",null,[n("strong",null,[s(t,{color:"red"},{default:o(()=>[a("问题溯源：")]),_:1})])]),_,n("p",null,[n("strong",null,[s(t,{color:"red"},{default:o(()=>[a("问题解决：")]),_:1})])]),y,n("p",null,[n("a",f,[a("使用枚举映射时, 如果数据库为null, 返回的是0值的枚举对象 #5266"),s(c)])]),h])}const j=l(m,[["render",E],["__file","2 EnumValue annotation problem.html.vue"]]);export{j as default};
