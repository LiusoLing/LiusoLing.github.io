import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t,a as e,f as p}from"./app-5cCCUltF.js";const i={},o=e("p",null,"在本文章中，我们将学习如何在Java中声明多行字符串。",-1),c=p(`<h2 id="文本块方式" tabindex="-1"><a class="header-anchor" href="#文本块方式" aria-hidden="true">#</a> 文本块方式</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">textBlocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Get busy living
        or
        get busy dying.
        --Stephen King&quot;&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>JDK 15</code> 版本及以上，通过三引号 <code>&quot;&quot;&quot;</code> 声明字符串的方式来使用文本块，这是迄今为止声明多行字符串的最便捷方式，我们不必处理线分隔符或缩进空间。</p><h2 id="获取操作系统分隔符" tabindex="-1"><a class="header-anchor" href="#获取操作系统分隔符" aria-hidden="true">#</a> 获取操作系统分隔符</h2><p>不同的操作系统，定义的分隔符都不同，使用Java中的系统方法获取操作系统的分隔符</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String newLine = System.getProperty(&quot;line.separator&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>newLine</code> 对象将在下文使用，后文不再重新获取。</p><h2 id="字符串连接方式" tabindex="-1"><a class="header-anchor" href="#字符串连接方式" aria-hidden="true">#</a> 字符串连接方式</h2><p>字符串连接是一种简单的方法，可用于创建多行字符串：</p><p>版本一：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stringConcatenation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Get busy living&quot;</span>
            <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;or&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;get busy dying.&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;--Stephen King&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>版本二：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stringConcatenation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Get busy living&quot;</span>
            <span class="token operator">+</span> newLine
            <span class="token operator">+</span> <span class="token string">&quot;or&quot;</span>
            <span class="token operator">+</span> newLine
            <span class="token operator">+</span> <span class="token string">&quot;get busy dying.&quot;</span>
            <span class="token operator">+</span> newLine
            <span class="token operator">+</span> <span class="token string">&quot;--Stephen King&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串join方式" tabindex="-1"><a class="header-anchor" href="#字符串join方式" aria-hidden="true">#</a> 字符串join方式</h2><p><code>Java 8</code> 引入了 <code>String.join</code>，它使用分隔符和一些字符串作为参数，返回一个最终字符串，所有输入字符串通过分隔符连接在一起：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stringJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>newLine<span class="token punctuation">,</span>
                       <span class="token string">&quot;Get busy living&quot;</span><span class="token punctuation">,</span>
                       <span class="token string">&quot;or&quot;</span><span class="token punctuation">,</span>
                       <span class="token string">&quot;get busy dying.&quot;</span><span class="token punctuation">,</span>
                       <span class="token string">&quot;--Stephen King&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串生成器方式" tabindex="-1"><a class="header-anchor" href="#字符串生成器方式" aria-hidden="true">#</a> 字符串生成器方式</h2><p><code>StringBuilder</code> 是构建字符串的辅助类。<code>StringBuilder</code> 在 <code>Java 1.5</code> 中引入，作为 <code>StringBuffer</code> 的替代品。</p><p>一般用于在循环中构建巨大的字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Get busy living&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;or&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;get busy dying.&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;--Stephen King&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串写方式" tabindex="-1"><a class="header-anchor" href="#字符串写方式" aria-hidden="true">#</a> 字符串写方式</h2><p><code>StringWriter</code> 也可以用来创建多行字符串。这里不再使用 <code>newLine</code>，使用 <code>PrintWriter</code> ，<code>println</code> 功能会自动添加新行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringWriter</span> stringWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PrintWriter</span> printWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>stringWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    printWriter<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Get busy living&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printWriter<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;or&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printWriter<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;get busy dying.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printWriter<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--Stephen King&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stringWriter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第三方库方式" tabindex="-1"><a class="header-anchor" href="#第三方库方式" aria-hidden="true">#</a> 第三方库方式</h2><p>引入第三方包，借助第三方封装好的字符串操作方法。这里谷歌的 <code>Guava</code> 库是个不错的选择：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">guavaJoiner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Joiner</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>newLine<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Get busy living&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;or&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;get busy dying.&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;--Stephen King&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function u(l,r){return s(),a("div",null,[o,t(" more "),c])}const v=n(i,[["render",u],["__file","06 java multi line string.html.vue"]]);export{v as default};
