import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,e as u,a as s,b as n,d as e,f as a}from"./app-6o-IiJuU.js";const i={},r=s("p",null,"散列是计算机科学的一个基本概念。",-1),k=s("p",null,[s("code",null,"hashCode()"),n(" 返回一个由散列算法生成的整数值。")],-1),d=a(`<h2 id="什么是hashcode" tabindex="-1"><a class="header-anchor" href="#什么是hashcode" aria-hidden="true">#</a> 什么是HashCode</h2><p>摘自【百度百科：】</p><p><code>hash code</code> 是一种编码方式，在Java中，每个对象都会有一个hashcode，Java可以通过这个hashcode来识别一个对象。</p><p><code>Hash</code>，一般翻译做“散列”，也有直接音译为&quot;哈希&quot;的，就是把任意长度的输入（又叫做预映射， pre-maping），通过散列算法，变换成固定长度的输出，该输出就是散列值。</p><p>这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。</p><h2 id="hashcode的工作原理" tabindex="-1"><a class="header-anchor" href="#hashcode的工作原理" aria-hidden="true">#</a> HashCode的工作原理</h2><p>相等的对象（根据<code>equals()</code>）必须返回相同的哈希代码。不同的对象不需要返回不同的散列代码。</p><p>翻译：两个对象值相同 <code>(x.equals(y) == true)</code>，不一定相等。</p><p>hashCode() 有如下约定：</p><ul><li>Java应用程序执行期间在同一对象上多次调用时，<code>hashCode()</code>必须始终如一地返回相同的值，前提是对象上相等比较中使用的信息不会被修改。此值不需要从应用程序的一次执行到同一应用程序的另一次执行保持一致。</li><li>如果 <code>equals(Object)</code> 方法，两个对象相等，则在两个对象上调用 <code>hashCode()</code> 方法必须产生相同的值。</li><li>如果 <code>equals(java.lang.Object)</code> 方法，两个对象是不相等的，则在两个对象上调用 <code>hashCode</code> 方法不需要产生不同的整数结果。然而，开发人员应该意识到，为不等的对象生成不同的整数结果可以提高哈希表的性能。</li></ul><h2 id="幼稚的hasecode实现" tabindex="-1"><a class="header-anchor" href="#幼稚的hasecode实现" aria-hidden="true">#</a> 幼稚的HaseCode实现</h2><p>完全遵照上面的约定，我们可以写出一个非常幼稚的实现，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token comment">// standard getters/setters/constructors</span>

    <span class="token comment">// getters and setters here</span>
        
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> id <span class="token operator">==</span> user<span class="token punctuation">.</span>id 
          <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> 
          <span class="token operator">&amp;&amp;</span> email<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 User 类自定义实现的 <code>equals()</code> 和 <code>hashCode()</code> 完全遵守了约定。</p><p>然而，这个实现使得哈希表的性能为零，因为每个对象都会存储在相同的单个桶中。</p><p>在这种情况下，哈希表查找是线性执行的，不会给我们带来任何真正的性能优势。</p><h2 id="改进的hashcode实现" tabindex="-1"><a class="header-anchor" href="#改进的hashcode实现" aria-hidden="true">#</a> 改进的HashCode实现</h2><p>改进的自定义 <code>hashCode</code> 实现将User类的所有字段参与进来，以便它可以为不同的对象产生不同的结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> id <span class="token operator">*</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> email<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个哈希算法肯定比前一个算法好得多。这是因为它只需将名称、电子邮件字段和ID的哈希代码相乘，即可计算对象的哈希代码。</p><p>一般来说，我们可以说这是一个合理的<code>hashCode()</code>实现，只要我们保持<code>equals()</code>实现与它一致。</p><h2 id="标准的hashcode实现" tabindex="-1"><a class="header-anchor" href="#标准的hashcode实现" aria-hidden="true">#</a> 标准的HashCode实现</h2><p>我们用于计算哈希代码的哈希算法越好，哈希表的性能就越好。</p><p>让我们看看一个“标准”实现，它使用两个素数为计算的哈希代码添加更多的唯一性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
    hash <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> id<span class="token punctuation">;</span>
    hash <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hash <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> <span class="token punctuation">(</span>email <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> email<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然我们需要了解 <code>hashCode()</code> 和 <code>equals()</code> 方法的作用，但我们不必每次都从头开始实现它们。</p><p>这是因为大多数IDE可以生成自定义 <code>hashCode()</code> 和 <code>equals()</code> 实现。 从Java 7开始，我们有一个用于合适的散列 <code>Objects.hash()</code> 实用程序方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">)</span>

<span class="token comment">//IntelliJ IDEA 生成以下实现 </span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>id <span class="token operator">^</span> <span class="token punctuation">(</span>id <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> email<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//Eclipse 生成以下实现</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>email <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> email<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>id <span class="token operator">^</span> <span class="token punctuation">(</span>id <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了IDE自动帮我们生成，我们也可以使用 <code>Lombok</code> 自生成高效实现：</p><p>首先引入 <code>Lombok</code>:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 <code>@EqualsAndHashCode</code> 注释用户类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EqualsAndHashCode</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token comment">// fields and methods here</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),v=s("code",null,"HashCode()",-1),m={href:"https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>你也许注意到了，上面各类实现经常出现一个数字31，这是因为31有一个不错的特性。它的乘法可以被位移取代，比标准乘法更快：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">31</span> <span class="token operator">*</span> i <span class="token operator">==</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="处理hash碰撞" tabindex="-1"><a class="header-anchor" href="#处理hash碰撞" aria-hidden="true">#</a> 处理Hash碰撞</h2><p>在Java中，哈希碰撞(Hash Collision)是指不同的输入数据产生了相同的哈希值（不同的输入得到了同一个哈希值，就发生了&quot;哈希碰撞&quot;）。</p><p>哈希函数是将输入映射到固定大小的哈希值的函数，而碰撞指的是两个不同的输入映射到了相同的哈希值。</p>`,5),b={href:"https://courses.cs.washington.edu/courses/cse373/18au/files/slides/lecture13.pdf",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"HashMap",-1),y=a(`<p>“当两个或多个对象指向同一个桶时，它们只是存储在链接列表中。在这种情况下，散列表是一个链接列表的数组，每个具有相同散列的对象都附加到数组中桶索引的链接列表中。</p><p>在最坏的情况下，几个桶将有一个链接列表绑定到它，列表中对象的检索将以线性方式进行。”</p><p>散列冲突方法，说明了为什么高效地实现 <code>hashCode()</code> 如此重要。</p><p>Java 8增强了 <code>HashMap</code> 实现。如果桶大小超过特定阈值，树形图将取代链接列表。把复杂度提升为 <code>O（logn）</code>的查找，而不是 <code>O（n）</code>。</p><h2 id="hashcode程序示例" tabindex="-1"><a class="header-anchor" href="#hashcode程序示例" aria-hidden="true">#</a> HashCode程序示例</h2><p>这是 <code>User</code>类的 <code>HashCode</code> 实现:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
        hash <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> id<span class="token punctuation">;</span>
        hash <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hash <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> hash <span class="token operator">+</span> <span class="token punctuation">(</span>email <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> email<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;hashCode() called - Computed hash: &quot;</span> <span class="token operator">+</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是应用程序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;john@domain.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jennifer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jennifer@domain.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mary@domain.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        users<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        users<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user2<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        users<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user3<span class="token punctuation">,</span> user3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;User found in the collection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到输出，每次将对象存储在哈希映射中并使用containsKey()方法检查时，都会调用hashCode()，并将计算的哈希代码打印到控制台：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span>User</span> <span class="token operator">-</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> called <span class="token operator">-</span> <span class="token class-name">Computed</span> hash<span class="token operator">:</span> <span class="token number">1255477819</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span>User</span> <span class="token operator">-</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> called <span class="token operator">-</span> <span class="token class-name">Computed</span> hash<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">282948472</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span>User</span> <span class="token operator">-</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> called <span class="token operator">-</span> <span class="token class-name">Computed</span> hash<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1540702691</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span>User</span> <span class="token operator">-</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> called <span class="token operator">-</span> <span class="token class-name">Computed</span> hash<span class="token operator">:</span> <span class="token number">1255477819</span>
<span class="token class-name">User</span> found in the collection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>生成高效自定义的 <code>hashCode()</code> 实现通常需要一些数学概念（即素数和任意数）、逻辑和基本数学运算的混合。</p><p>无论如何，我们可以有效地实现 <code>hashCode()</code>，而无需诉诸这些技术。</p><p>我们只需要确保散列算法为不等的对象生成不同的散列代码，并且它与 <code>equals()</code> 的实现一致。</p>`,15);function w(f,C){const p=o("ExternalLinkIcon");return c(),l("div",null,[r,k,u(" more "),d,s("p",null,[n("严格意义上讲，没有通用的 "),v,n(" 实现标准，不过推荐阅读大厂的 "),s("a",m,[n("Joshua Bloch的有效Java"),e(p)]),n("，它提供了实现高效散列算法的全面指南列表。")]),h,s("p",null,[n("处理它的"),s("a",b,[n("方式多种多样"),e(p)]),n("，每种方法都有其优点和缺点。Java的 "),g,n(" 使用单独的链地址法来处理冲突：")]),y])}const q=t(i,[["render",w],["__file","02 java string hashcode.html.vue"]]);export{q as default};
