import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e as t,a as p,f as e}from"./app-6o-IiJuU.js";const o={},c=p("p",null,"本节探讨另一种集合数据结构，HashMap，了解它内部是如何工作的。",-1),u=e(`<h2 id="_1-hashmap简介" tabindex="-1"><a class="header-anchor" href="#_1-hashmap简介" aria-hidden="true">#</a> 1.HashMap简介</h2><p>让我们首先看看 HashMap 是一个 map 是什么意思。</p><p><strong>map 是一个 key-value 映射，这意味着每个 key 都只映射到一个值，我们可以使用 key 从 map 中检索相应的值。</strong></p><p>既然有了List，我们为何还需要 HashMap呢？原因很简单，就是性能。</p><p>如果我们想在列表中查找特定元素，时间复杂度为 O（n），如果列表已排序，则使用例如二进制搜索时，它将为 O（log n）。</p><p>HashMap 的优点是插入和检索值的时间复杂度平均为 O（1）。</p><p>示例一个产品类，接下来都要用到它：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tags<span class="token punctuation">;</span>
    
    <span class="token comment">// standard getters/setters/constructors</span>

    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">addTagsOfOtherProduct</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-获取" tabindex="-1"><a class="header-anchor" href="#_2-获取" aria-hidden="true">#</a> 2.获取</h2><p>创建一个 HashMap，其中包含 String 类型的键和 Product 类型的元素：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> productsByName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Product</span> eBike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A bike with a battery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Product</span> roadBike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">&quot;Road bike&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A bike for competition&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
productsByName<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>eBike<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eBike<span class="token punctuation">)</span><span class="token punctuation">;</span>
productsByName<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>roadBike<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> roadBike<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过 key 从 map 中检索一个值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Product</span> nextPurchase <span class="token operator">=</span> productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;A bike with a battery&quot;</span><span class="token punctuation">,</span> nextPurchase<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们尝试为 map 中不存在的 key 查找值，我们将得到一个 null 值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Product</span> nextPurchase <span class="token operator">=</span> productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertNull</span><span class="token punctuation">(</span>nextPurchase<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们插入具有相同键的第二个值，我们将只获得该键的最后一个插入值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Product</span> newEBike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A bike with a better battery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
productsByName<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>newEBike<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newEBike<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;A bike with a better battery&quot;</span><span class="token punctuation">,</span> productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-null为key" tabindex="-1"><a class="header-anchor" href="#_3-null为key" aria-hidden="true">#</a> 3.NULL为key</h2><p>HashMap 还允许我们将 null 作为键：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Product</span> defaultProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">&quot;Chocolate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;At least buy chocolate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
productsByName<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> defaultProduct<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Product</span> nextPurchase <span class="token operator">=</span> productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;At least buy chocolate&quot;</span><span class="token punctuation">,</span> nextPurchase<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们可以使用不同的 key 插入同一个对象两次：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>productsByName<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>defaultProduct<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultProduct<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertSame</span><span class="token punctuation">(</span>productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Chocolate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-删除值" tabindex="-1"><a class="header-anchor" href="#_4-删除值" aria-hidden="true">#</a> 4.删除值</h2><p>我们可以从 HashMap 中删除一个键值映射：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>productsByName<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertNull</span><span class="token punctuation">(</span>productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-key或value是否存在" tabindex="-1"><a class="header-anchor" href="#_5-key或value是否存在" aria-hidden="true">#</a> 5.key或value是否存在</h2><p>要检查 map 中是否存在键，我们可以使用 containsKey（） 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>productsByName<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是否存在值，我们可以使用 containsValue（） 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>productsByName<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span>eBike<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两个方法调用都将返回 true。尽管它们看起来非常相似，但这两个方法调用在性能上存在重要差异。</p><p><strong>检查键是否存在的复杂度是 O（1），而检查元素的复杂度是 O（n），因为需要遍历 Map 中的所有元素。</strong></p><h2 id="_6-迭代" tabindex="-1"><a class="header-anchor" href="#_6-迭代" aria-hidden="true">#</a> 6.迭代</h2><p>三种办法迭代HashMap中的所有键值对：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> productsByName<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Product</span> product <span class="token operator">=</span> productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者我们可以迭代所有条目的集合：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> productsByName<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Product</span> product <span class="token operator">=</span>  entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//do something with the key and value</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以迭代所有的值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> products <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>productsByName<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_7-key" tabindex="-1"><a class="header-anchor" href="#_7-key" aria-hidden="true">#</a> 7.Key</h2><p>我们可以使用任何类作为 HashMap 中的键。但是，为了使 map 正常工作，我们需要为 equals（） 和 hashCode（） 提供实现。</p><p>假设我们想要一个 map，其中 product 作为键，price 作为值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> priceByProduct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
priceByProduct<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>eBike<span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们实现 equals（） 和 hashCode（） 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> product<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> product<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，hashCode（） 和 equals（） 只需要覆盖我们想用作 map 键的类，而不需要覆盖那些只用作 map 中的值的类。</p><h2 id="_8-java8中的新方法" tabindex="-1"><a class="header-anchor" href="#_8-java8中的新方法" aria-hidden="true">#</a> 8.java8中的新方法</h2><p>使用 getOrDefault（） 方法，我们可以从 map 中获取一个值，或者在给定键没有映射的情况下返回一个 default 元素：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Product</span> chocolate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">&quot;chocolate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;something sweet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Product</span> defaultProduct <span class="token operator">=</span> productsByName<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token string">&quot;horse carriage&quot;</span><span class="token punctuation">,</span> chocolate<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">Product</span> bike <span class="token operator">=</span> productsByName<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">,</span> chocolate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java8之前：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Product</span> bike2 <span class="token operator">=</span> productsByName<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span> 
    <span class="token operator">?</span> productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span> 
    <span class="token operator">:</span> chocolate<span class="token punctuation">;</span>
<span class="token class-name">Product</span> defaultProduct2 <span class="token operator">=</span> productsByName<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;horse carriage&quot;</span><span class="token punctuation">)</span> 
    <span class="token operator">?</span> productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;horse carriage&quot;</span><span class="token punctuation">)</span> 
    <span class="token operator">:</span> chocolate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>putIfAbsent() 方法可以添加新的映射，前提是给定键还没有映射：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>productsByName<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">,</span> chocolate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>java8之前：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>productsByName<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    productsByName<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">,</span> chocolate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 merge()，如果存在 Map，我们可以修改给定 key 的值，否则添加新值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Product</span> eBike2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A bike with a battery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
eBike2<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;sport&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
productsByName<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">,</span> eBike2<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token operator">::</span><span class="token function">addTagsOfOtherProduct</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java8之前：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>productsByName<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTagsOfOtherProduct</span><span class="token punctuation">(</span>eBike2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    productsByName<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">,</span> eBike2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 calc（） 方法，我们可以计算给定键的值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>productsByName<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">addTagsOfOtherProduct</span><span class="token punctuation">(</span>eBike2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> eBike2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java8之前：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>productsByName<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    
    productsByName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTagsOfOtherProduct</span><span class="token punctuation">(</span>eBike2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    productsByName<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;E-Bike&quot;</span><span class="token punctuation">,</span> eBike2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-equals和hashcode" tabindex="-1"><a class="header-anchor" href="#_9-equals和hashcode" aria-hidden="true">#</a> 9.equals和HashCode</h2><h2 id="_10-key的不变性" tabindex="-1"><a class="header-anchor" href="#_10-key的不变性" aria-hidden="true">#</a> 10.key的不变性</h2><h2 id="_11-hash碰撞" tabindex="-1"><a class="header-anchor" href="#_11-hash碰撞" aria-hidden="true">#</a> 11.Hash碰撞</h2><h2 id="_12-容量和负载系数" tabindex="-1"><a class="header-anchor" href="#_12-容量和负载系数" aria-hidden="true">#</a> 12.容量和负载系数</h2>`,67);function i(l,k){return a(),s("div",null,[c,t(" more "),u])}const v=n(o,[["render",i],["__file","07 java hash map guide.html.vue"]]);export{v as default};
