import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,e as p,a as n,f as e}from"./app-6o-IiJuU.js";const o={},c=n("p",null,"比较对象是面向对象编程语言的基本特征。",-1),l=n("p",null,"在本教程中，我们将探索Java语言的一些功能，这些功能允许我们比较对象。我们还将研究外部库中的此类功能。",-1),u=e(`<h2 id="_1-和" tabindex="-1"><a class="header-anchor" href="#_1-和" aria-hidden="true">#</a> 1.==和!=</h2><p>让我们从 == 和开始 != 运算符，可以分别判断两个Java对象是否相同。</p><p><strong>对于原始类型，相同意味着具有相等的值：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>多亏了自动开箱，<strong>这在将原始值与其包装类型对应值进行比较时也有效：</strong></p><p><br><br><br><br><br><br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果两个整数的值不同，==运算符将返回false，而!=运算符将返回true。</p><h2 id="_2-对象" tabindex="-1"><a class="header-anchor" href="#_2-对象" aria-hidden="true">#</a> 2.对象</h2><p>假设我们想比较两种具有相同值的整数包装类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过比较两个对象，<strong>这些对象的值不是1。相反，它们在堆栈中的内存地址是不同的</strong>，因为两个对象都是使用 <code>new</code> 运算符创建的。如果我们把a分配给b，那么我们会有不同的结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们看看当我们使用Integer#valueOf工厂方法时会发生什么：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，它们被认为是相同的。这是因为valueOf()方法将整数存储在缓存中，以避免创建太多具有相同值的包装对象。因此，该方法为两个调用返回相同的整数实例。</p><p><br><br><br><br><br><br></p><p>Java也为字符串这样做：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而，如果它们是使用新运算符创建的，那么它们就不一样了。</p><p>最后，两个空引用被认为是相同的，而任何非空对象都被认为与空不同：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，相等运算符的行为可能是有限的。如果我们想比较映射到不同地址的两个对象，但根据其内部状态将它们视为相等呢？我们将在接下来的章节中看到如何做到这一点。</p><h2 id="_2-object-equals方法" tabindex="-1"><a class="header-anchor" href="#_2-object-equals方法" aria-hidden="true">#</a> 2.Object#equals方法</h2><p>现在让我们用equals()方法谈谈更广泛的平等概念。</p><p><br><br><br><br><br><br></p><p>此方法在Object类中定义，以便每个Java对象都继承它。默认情况下，<strong>它的实现比较对象内存地址，因此它的工作原理与==运算符相同</strong>。然而，我们可以覆盖此方法，以定义平等对我们的对象意味着什么。</p><p>首先，让我们看看它对像Integer这样的现有对象的行为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当两个对象相同时，该方法仍然返回true。</p><p>我们应该注意，我们可以将空对象作为方法的参数传递，但不能作为我们调用方法的对象。</p><p>我们也可以将equals()方法与我们自己的对象一起使用。假设我们有一个人类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonWithEquals</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">PersonWithEquals</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以覆盖该类的equals()方法，以便我们可以根据两个人的内部详细信息进行比较：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">PersonWithEquals</span> that <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PersonWithEquals</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
    <span class="token keyword">return</span> firstName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      lastName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-对象-equals-静态方法" tabindex="-1"><a class="header-anchor" href="#_3-对象-equals-静态方法" aria-hidden="true">#</a> 3.对象#equals 静态方法</h2><p>现在让我们看看Objects#equals静态方法。我们之前提到，我们不能使用null作为第一个对象的值，否则将抛出NullPointerException。</p><p><br><br><br><br><br><br></p><p><strong>Objects helper类的equals()方法解决了这个问题。它需要两个参数并进行比较，也处理空值。</strong></p><p>让我们再次比较Person对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PersonWithEquals</span> joe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonWithEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Portman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PersonWithEquals</span> joeAgain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonWithEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Portman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PersonWithEquals</span> natalie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonWithEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Natalie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Portman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>joe<span class="token punctuation">,</span> joeAgain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>joe<span class="token punctuation">,</span> natalie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所解释的，此方法处理空值。因此，如果两个参数都是空的，它将返回true，如果只有一个参数是空的，它将返回false。</p><p>这真的很方便。假设我们想在我们的Person类中添加一个可选的出生日期：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">PersonWithEquals</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">,</span> <span class="token class-name">LocalDate</span> birthDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>birthDate <span class="token operator">=</span> birthDate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们必须更新我们的equals()方法，但使用空处理。我们可以通过将条件添加到ourequals()方法来做到这一点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>birthDate <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> that<span class="token punctuation">.</span>birthDate <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">:</span> birthDate<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>birthDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而，如果我们在类中添加太多可为空的字段，它可能会变得非常混乱。在我们的equals()实现中使用Objects#equals方法要干净得多，并提高了可读性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>birthDate<span class="token punctuation">,</span> that<span class="token punctuation">.</span>birthDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-compareto接口" tabindex="-1"><a class="header-anchor" href="#_4-compareto接口" aria-hidden="true">#</a> 4.compareTo接口</h2><p>比较逻辑也可用于将对象按特定顺序放置。可比接口允许我们通过确定一个对象是否大于、相等或小于另一个对象来定义对象之间的顺序。</p><p>可比较接口是通用的，只有一个方法，compareTo()，它接受泛型类型的参数并返回一个int。如果返回值低于参数，则为负值；如果等于，则返回值为0，否则为正值。</p><p><br><br><br><br><br><br></p><p>假设，在我们的Person类中，我们想按姓氏比较Person对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonWithEqualsAndComparable</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PersonWithEqualsAndComparable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">PersonWithEqualsAndComparable</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用姓氏大于此的人调用，compareTo()方法将返回负int，如果姓氏相同，则返回零，否则返回正。</p><h2 id="_5-comparator接口" tabindex="-1"><a class="header-anchor" href="#_5-comparator接口" aria-hidden="true">#</a> 5.Comparator接口</h2><p>比较器接口是通用的，有一个比较方法，该方法接受该通用类型的两个参数并返回一个整数。我们之前已经在可比界面中看到了这种模式。</p><p>比较器是相似的；然而，它与类的定义是分开的。因此，我们可以为一个类定义尽可能多的比较器，我们只能提供一个可比的实现。</p><p>让我们想象一下，我们有一个在表格视图中显示人员的网页，我们希望为用户提供按名字而不是姓氏进行排序的可能性。如果我们也想保持当前的实现，这在Comparable中是不可能的，但我们可以实现我们自己的比较器。</p><p>让我们创建一个仅按名字进行比较的人比较器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> compareByFirstNames <span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getFirstName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><br><br><br><br><br><br></p><p>现在，让我们对使用该比较器的人进行排序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> joe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Portman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> allan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Allan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dale&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
people<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>joe<span class="token punctuation">)</span><span class="token punctuation">;</span>
people<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>allan<span class="token punctuation">)</span><span class="token punctuation">;</span>

people<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>compareByFirstNames<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsExactly</span><span class="token punctuation">(</span>allan<span class="token punctuation">,</span> joe<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在比较器接口上，我们还可以在 comparing 实现中使用其他方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getLastName</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getFirstName</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getBirthDate</span><span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">nullsLast</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">naturalOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，我们首先比较姓氏，然后比较名字。接下来，我们比较出生日期，但由于它们是无效的，我们必须说如何处理，即应该根据其自然顺序对它们进行比较，零值排在最后。</p><h2 id="_6-apache-commmon库" tabindex="-1"><a class="header-anchor" href="#_6-apache-commmon库" aria-hidden="true">#</a> 6.Apache Commmon库</h2><p>首先，让我们导入Maven依赖项：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>&lt;dependency<span class="token punctuation">&gt;</span>
    &lt;groupId<span class="token punctuation">&gt;</span>org.apache.commons&lt;/groupId<span class="token punctuation">&gt;</span>
    &lt;artifactId<span class="token punctuation">&gt;</span>commons<span class="token punctuation">-</span>lang3&lt;/artifactId<span class="token punctuation">&gt;</span>
    &lt;version<span class="token punctuation">&gt;</span>3.12.0&lt;/version<span class="token punctuation">&gt;</span>
&lt;/dependency<span class="token punctuation">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-objectutils-notequal方法" tabindex="-1"><a class="header-anchor" href="#_6-1-objectutils-notequal方法" aria-hidden="true">#</a> 6.1 ObjectUtils#notEqual方法</h3><p>首先，让我们谈谈ObjectUtils#notEqual方法。根据它们自己的equals()方法实现，需要两个对象参数来确定它们是否不相等。它还处理空值。</p><p>让我们重用我们的字符串示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">notEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应该注意的是，ObjectUtils有一个equals()方法。然而，自Java 7以来，Objects#equals出现后，这就被弃用了</p><h3 id="_6-2-objectutils-compare方法" tabindex="-1"><a class="header-anchor" href="#_6-2-objectutils-compare方法" aria-hidden="true">#</a> 6.2 ObjectUtils#compare方法</h3><p>现在让我们用ObjectUtils#compare方法比较对象顺序。这是一个泛型方法，它接受该泛型类型的两个可比参数，并返回一个整数。</p><p>让我们再次使用字符串来查看它：</p><p><br><br><br><br><br><br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> second <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;How are you?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，该方法通过考虑更大的空值来处理空值。它还提供了一个重载版本，提供反转该行为，并认为它们较小，采用布尔参数。</p><h2 id="_6-google-guava库" tabindex="-1"><a class="header-anchor" href="#_6-google-guava库" aria-hidden="true">#</a> 6.Google guava库</h2><p>首先，让我们导入依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>31.0.1-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>谷歌为我们提供了一种方法来确定两个对象是否相等，Objects#equal：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>guava库提供了ComparisonChain类，允许我们通过比较链比较两个对象。我们可以通过名字和姓氏轻松比较两个Person对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> natalie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Natalie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Portman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> joe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Portman&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> comparisonResult <span class="token operator">=</span> <span class="token class-name">ComparisonChain</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>natalie<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joe<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>natalie<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joe<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertThat</span><span class="token punctuation">(</span>comparisonResult<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPositive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,88);function i(r,k){return a(),t("div",null,[c,l,p(" more "),u])}const m=s(o,[["render",i],["__file","18 java equals.html.vue"]]);export{m as default};
