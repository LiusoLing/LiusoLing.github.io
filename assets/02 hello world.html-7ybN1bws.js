import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as c,c as i,e as u,a as s,d as e,w as t,b as n,f as p}from"./app-xzSjLnCe.js";const d="/assets/images/base/programming_steps.gif",r={},k=s("p",null,"假设您已经安装好了Java开发工具包（JDK 8），同时安装好了市面上流行的任意一款代码编辑器IDE（vsCode、idea、Sublime Text、Atom、NotePad++、TextPad），那快让我们来编写人生中第一个Java程序 “Hello World”，和Java编程世界打个招呼吧！",-1),v=p('<h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>要想精通一门编程语言，你需要掌握两件事：</p><ul><li><p>掌握编程语言的语法：学习一小组关键字和语法并不难。例如，JDK 1.8 有 48 个关键字；C11 有 44 个；C++11 有 73 个。</p></li><li><p>熟练使用语言相关的应用程序接口 （API） 库： 谁也不想自己从头开始编写所有内容。学习库可能很困难，因为它非常庞大，不断发展，可以作为一种编程语言富有生命力的象征。</p></li></ul><p>话不多说，让我们以”Hello World“向编程世界打个招呼吧！</p><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h2><p>java编程步骤如下图所示：</p><figure><img src="'+d+'" alt="编程步骤" tabindex="0" loading="lazy"><figcaption>编程步骤</figcaption></figure>',7),m=p(`<p>新建一个名为“Hello”后缀为&quot;.java&quot;的文件，并输入以下源代码，该代码在代码编辑器中定义了一个名为“Hello”的类，注意最左侧的行号忽略不计。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * 第一个Java程序，对外宣告：hello, world
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>   <span class="token comment">// 保存为 &quot;Hello.java&quot; 文件</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 程序切入点</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出文字: hello, world</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b=p(`<p>使用 JDK 的Java编译器<code>javac</code>将源代码文件 <code>Hello.java</code> 编译成 <code>Java字节码文件 Hello.class</code>。</p><p>启动CMD Shell（Windows）或终端（UNIX/Linux/macOS），并执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 先切换到 Hello.java 文件所在的目录地址
➜  ~ <span class="token builtin class-name">cd</span> /xxxx

// 编译源代码，执行后在同目录下生成 Hello.class 字节码文件
➜  ~ javac Hello.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),h=p(`<p>在第二步的基础上，执行以下命令，使用JDK的Java运行时“java”运行机器代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 运行程序
➜  ~ <span class="token function">java</span> Hello

// 程序输出
➜  ~ hello, world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="程序结构解释" tabindex="-1"><a class="header-anchor" href="#程序结构解释" aria-hidden="true">#</a> 程序结构解释</h2><p>让我们看看人生第一个代码的程序结构是如何。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * 第一个Java程序，对外宣告：hello, world
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>   <span class="token comment">// 保存为 &quot;Hello.java&quot; 文件</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 程序切入点</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出文字: hello, world</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">/* ......*/</span>
<span class="token comment">// 多行注释：以/*开头，以*/结束，可能跨越多行（如第1-3行）。</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token comment">// Java程序的基本单元是类(class)。&quot;Hello&quot; 类是通过关键字 \`class\` 定义的。</span>
<span class="token comment">// 大括号 \`{......}\` 包裹的是程序body。</span>


<span class="token comment">// 保存为 &quot;Hello.java&quot; 文件</span>
<span class="token comment">// 行末注释或单行注释：以//开头，一直持续到当前行末尾。</span>


<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
<span class="token comment">// 定义了所谓的main()方法，这是程序执行的入口点。同样，大括号{......}包含该方法的主体，</span>
<span class="token comment">// 其中包含编程语句。</span>


<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印字符串&quot;Hello, world&quot;显示在控制台。字符串被一对双引号包围，并包含文本。</span>
<span class="token comment">// 文本将按原样打印，不带双引号。</span>
<span class="token comment">// 编程语句以英文分号（;）结尾。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="_1-java-两种注释" tabindex="-1"><a class="header-anchor" href="#_1-java-两种注释" aria-hidden="true">#</a> 1.Java 两种注释</h3><p>注释用于记录和解释代码和程序逻辑，注释不是编程语句，编译器会忽略它们，并且不会对程序执行产生任何影响。</p><p>注释对于为其他人提供文档和解释以理解您的程序（以及三天后您自己）非常重要。</p>`,9),g=s("em",null,"...",-1),_=s("h3",{id:"_2-java-语句和块",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-java-语句和块","aria-hidden":"true"},"#"),n(" 2.Java 语句和块")],-1),f=s("code",null,";",-1),w=p(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>为什么不像句子一样使用句号结尾呢？</p><p>在计算机早期，由于句号和小数点特别相像，导致无法区分句号和小数点，于是约定以可以清楚区分的分号作为编程语句的结尾符号，并一直沿用至今。</p></div><p>语句 示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 每一行都是一条语句，执行一段编程动作，并以分号结尾 (;).</span>
<span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2<span class="token punctuation">,</span> number3 <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> product<span class="token punctuation">;</span>
number2 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
product <span class="token operator">=</span> number1 <span class="token operator">*</span> number2 <span class="token operator">*</span> number3<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),y=s("code",null,"{ }",-1),j=p(`<p>块在类、方法、if-else 和循环等结构中用作主体，这些结构可能包含多个语句，但被视为一个单元（一个主体）。</p><p>块无需在右大括号后加上分号来结束复合语句，允许使用空块（即大括号内没有任何语句）。</p><p>块示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>mark <span class="token operator">&gt;=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 声明一个if判断</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;PASS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Well Done!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Keep it Up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 声明一个if-else</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Continue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Exit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
 
i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 声明一个while循环</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token operator">++</span>i<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 声明一个方法</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>statements<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>   <span class="token comment">// 声明一个类</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>statements<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-java-空格和格式化代码" tabindex="-1"><a class="header-anchor" href="#_3-java-空格和格式化代码" aria-hidden="true">#</a> 3.Java 空格和格式化代码</h3><p>也许你注意到了，上述示例代码中，第二行代码要么与上一行代码平齐，要么比上一行代码多几个空格，而且单词与单词之间也存在空格。</p>`,6),q=p(`<p>Java使用空格来分隔两个关键字或标记以避免歧义，示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token keyword">double</span> average<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>java 会忽略多余的空格，适当的缩进（带有制表符和空格）和额外的空行大大提高了程序的可读性。这对于其他人（以及三天后的你自己）了解您的程序非常重要。</p><p>不信的话，让我们来看看一个不带缩进和换行的程序，非常难读：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5);function x(H,S){const a=l("font");return c(),i("div",null,[k,u(" more "),v,s("p",null,[s("strong",null,[e(a,{color:"red"},{default:t(()=>[n("1.编写源代码：")]),_:1})])]),m,s("p",null,[s("strong",null,[e(a,{color:"red"},{default:t(()=>[n("2.编译源代码：")]),_:1})])]),b,s("p",null,[s("strong",null,[e(a,{color:"red"},{default:t(()=>[n("3.运行程序：")]),_:1})])]),h,s("ol",null,[s("li",null,[e(a,{color:"red"},{default:t(()=>[n("多行注释：")]),_:1}),n(" 一种为 /"),g,n("/，可以跨越多行。 另一种/** .... */ 是一个特殊的文档注释，可以提取这些注释以生成文档。")]),s("li",null,[e(a,{color:"red"},{default:t(()=>[n("行尾（单行）注释：")]),_:1}),n(" 从 //...... 当前行开始并持续到当前行的末尾。")])]),_,e(a,{color:"red"},{default:t(()=>[n("语句：")]),_:1}),n("语句是程序中的最小独立单元，就像中文中的句子一样。它执行一段编程操作，必须以英文的分号 "),f,n(" 结尾。"),w,e(a,{color:"red"},{default:t(()=>[n("块：")]),_:1}),n("块是一组被一对大括号 "),y,n(" 包围的编程语句。大括号内的所有语句都被视为一个单元。"),j,e(a,{color:"red"},{default:t(()=>[n("空格：")]),_:1}),n("空格、制表符和换行符统称为空格。"),q])}const D=o(r,[["render",x],["__file","02 hello world.html.vue"]]);export{D as default};
