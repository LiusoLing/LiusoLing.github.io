import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,e as p,a as n,f as t}from"./app-O6B6fb-J.js";const c={},l=n("p",null,"在某些情况下，比如执行合同时，我们希望推迟执行合同的某些部分，以便稍后完成。",-1),o=n("p",null,"类似这样的操作，我们可以通过抽象类在Java中轻松完成。",-1),i=n("p",null,"在本教程中，我们将学习Java中抽象类的基础知识，以及它们在哪些情况下会有帮助。",-1),u=t(`<h2 id="_1-抽象类" tabindex="-1"><a class="header-anchor" href="#_1-抽象类" aria-hidden="true">#</a> 1.抽象类</h2><p><strong>抽象类的特征：</strong></p><ul><li><p>我们用类关键字 <code>abstract</code> 修饰符定义一个抽象类</p></li><li><p>抽象类可以派生子类，但不能实例化</p></li><li><p>如果一个类定义了一个或多个抽象方法，那么该类本身必须声明为抽象</p></li><li><p>抽象类可以声明抽象方法和具体方法</p></li><li><p>从抽象类派生的子类必须实现所有基类的抽象方法，或者本身是抽象的</p></li></ul><p>为了更好地理解这些概念，我们将创建一个简单的示例。</p><p>让我们的基本抽象类定义棋盘游戏的抽象API：</p><p><br><br><br><br><br><br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BoardGame</span> <span class="token punctuation">{</span>

    <span class="token comment">//... field declarations, constructors</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//... concrete methods</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以创建一个实现play方法的子类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Checkers</span> <span class="token keyword">extends</span> <span class="token class-name">BoardGame</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//... implementation</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-何时使用抽象类" tabindex="-1"><a class="header-anchor" href="#_2-何时使用抽象类" aria-hidden="true">#</a> 2.何时使用抽象类</h2><p><strong>我们可以举例一些经典场景，在这类场景中，往往使用抽象类，好过使用接口和具体类：</strong></p><ul><li><p>我们希望将一些通用功能封装在一个地方（代码重用），多个相关子类将共享</p></li><li><p>我们需要部分定义一个API，我们的子类可以轻松扩展和细化</p></li><li><p>子类需要继承一个或多个具有受保护访问修饰符的常见方法或字段</p></li></ul><p>上述所有这些场景都是完全、基于继承的遵守 <code>开放/封闭原则</code> 的良好例子。</p><p>此外，由于使用抽象类隐式处理基类型和子类型，我们也在利用 <code>多态性</code> 。</p><p>请注意，只要保留类层次结构中的 “is-a” 关系，代码重用就是使用抽象类的一个非常令人信服的理由。</p><p><br><br><br><br><br><br></p><h2 id="_3-使用示例" tabindex="-1"><a class="header-anchor" href="#_3-使用示例" aria-hidden="true">#</a> 3.使用示例</h2><p>为了更清楚的了解抽象类如何运用，这里展示一个使用范例以供了解。</p><h3 id="_3-1定义一个基本抽象类" tabindex="-1"><a class="header-anchor" href="#_3-1定义一个基本抽象类" aria-hidden="true">#</a> 3.1定义一个基本抽象类</h3><p>如果我们想要几种类型的文件阅读器，我们可能会创建一个抽象类，封装文件读取的常见内容：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseFileReader</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">protected</span> <span class="token class-name">Path</span> filePath<span class="token punctuation">;</span>
    
    <span class="token keyword">protected</span> <span class="token class-name">BaseFileReader</span><span class="token punctuation">(</span><span class="token class-name">Path</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>filePath <span class="token operator">=</span> filePath<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Path</span> <span class="token function">getFilePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> filePath<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">mapFileLine</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">mapFileLine</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，我们已经保护了 <code>filePath</code>，以便子类可以在需要时访问它。</p><p>更重要的是，我们留下了一些未完成的事情：<strong>如何实际解析文件内容中的一行文本。</strong></p><p>我们的计划很简单：虽然我们的具体类没有特殊的方式来存储文件路径或浏览文件，但它们每个类都有一种特殊的方式来转换每行。</p><p><br><br><br><br><br><br></p><p>乍一看，BaseFileReader可能看起来没有必要。然而，这是干净、易于扩展的设计的基础。</p><p>从中，<strong>我们可以轻松实现不同版本的文件阅读器，这些文件阅读器可以专注于其独特的业务逻辑。</strong></p><h3 id="_3-2定义子类" tabindex="-1"><a class="header-anchor" href="#_3-2定义子类" aria-hidden="true">#</a> 3.2定义子类</h3><p>一个可能的文件阅读器可能是将文件内容转换为小写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LowercaseFileReader</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFileReader</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">LowercaseFileReader</span><span class="token punctuation">(</span><span class="token class-name">Path</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapFileLine</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> line<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可能是将文件内容转换为大写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UppercaseFileReader</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFileReader</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">UppercaseFileReader</span><span class="token punctuation">(</span><span class="token class-name">Path</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mapFileLine</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> line<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们从这个简单的示例中看到的，<strong>每个子类都可以专注于其独特的行为</strong>，而无需指定文件读取的其他方面。</p><h3 id="_3-3使用子类" tabindex="-1"><a class="header-anchor" href="#_3-3使用子类" aria-hidden="true">#</a> 3.3使用子类</h3><p>使用从抽象类继承的类与任何其他具体类没有什么不同：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenLowercaseFileReaderInstance_whenCalledreadFile_thenCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">URL</span> location <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;files/test.txt&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BaseFileReader</span> lowercaseFileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LowercaseFileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token function">assertThat</span><span class="token punctuation">(</span>lowercaseFileReader<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function d(r,k){return a(),e("div",null,[l,o,i,p(" more "),u])}const b=s(c,[["render",d],["__file","06 java abstract class.html.vue"]]);export{b as default};
