import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as e,e as p,a as n,b as a,f as o}from"./app-O6B6fb-J.js";const c={},l=n("p",null,[a("Java 8 通过引入 "),n("strong",null,"Lambda表达式"),a(" 和 "),n("strong",null,"函数式接口（Functional Interfaces）"),a(" 彻底改变了代码编写方式。")],-1),i=n("p",null,"这类接口为函数式编程提供了强大支持，同时保持了对旧版本Java的兼容性。本文将深入探讨Java 8内置的核心函数式接口及其实际应用场景。",-1),u=o(`<h2 id="什么是函数式接口" tabindex="-1"><a class="header-anchor" href="#什么是函数式接口" aria-hidden="true">#</a> 什么是函数式接口？</h2><p>函数式接口是 <strong>仅包含一个抽象方法</strong> 的接口（允许包含默认方法和静态方法），可通过 <code>@FunctionalInterface</code> 注解显式声明。编译器会强制检查接口是否符合函数式接口规范。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SimpleFuncInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 唯一抽象方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="核心函数式接口一览" tabindex="-1"><a class="header-anchor" href="#核心函数式接口一览" aria-hidden="true">#</a> 核心函数式接口一览</h2><p>Java 8 在 <code>java.util.function</code> 包中提供了40+个预定义函数式接口，以下是6个最常用的核心接口：</p><h3 id="_1-predicate-断言型接口" tabindex="-1"><a class="header-anchor" href="#_1-predicate-断言型接口" aria-hidden="true">#</a> 1. Predicate（断言型接口）</h3><ul><li><strong>功能</strong>：条件判断（返回布尔值）</li><li><strong>方法</strong>：<code>test(T t)</code></li><li><strong>链式操作</strong>：<code>and()</code>， <code>or()</code>， <code>negate()</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> isLong <span class="token operator">=</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isLong<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-function-函数型接口" tabindex="-1"><a class="header-anchor" href="#_2-function-函数型接口" aria-hidden="true">#</a> 2. Function（函数型接口）</h3><ul><li><strong>功能</strong>：类型转换（输入T类型，返回R类型）</li><li><strong>方法</strong>：<code>apply(T t)</code></li><li><strong>链式操作</strong>：<code>compose()</code>， <code>andThen()</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span>， <span class="token class-name">String</span><span class="token operator">&gt;</span> intToString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">;</span>
<span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">String</span>， <span class="token class-name">String</span><span class="token operator">&gt;</span> quote <span class="token operator">=</span> s <span class="token operator">-&gt;</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span>， <span class="token class-name">String</span><span class="token operator">&gt;</span> quoteInt <span class="token operator">=</span> quote<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>intToString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>quoteInt<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&#39;42&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-supplier-供给型接口" tabindex="-1"><a class="header-anchor" href="#_3-supplier-供给型接口" aria-hidden="true">#</a> 3. Supplier（供给型接口）</h3><ul><li><strong>功能</strong>：无参生成值</li><li><strong>方法</strong>：<code>get()</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocalDate</span><span class="token punctuation">&gt;</span></span> now <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出当前日期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-consumer-消费型接口" tabindex="-1"><a class="header-anchor" href="#_4-consumer-消费型接口" aria-hidden="true">#</a> 4. Consumer（消费型接口）</h3><ul><li><strong>功能</strong>：执行副作用操作</li><li><strong>方法</strong>：<code>accept(T t)</code></li><li><strong>链式操作</strong>：<code>andThen()</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> printer <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>
printer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Functional World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-operator扩展接口" tabindex="-1"><a class="header-anchor" href="#_5-operator扩展接口" aria-hidden="true">#</a> 5. Operator扩展接口</h3><ul><li><p><strong>UnaryOperator</strong>：单参数同类型转换</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> upperCase <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>upperCase<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：HELLO</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>BinaryOperator</strong>：双参数同类型操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sum <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span>， <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="原始类型特化接口" tabindex="-1"><a class="header-anchor" href="#原始类型特化接口" aria-hidden="true">#</a> 原始类型特化接口</h2><p>为避免自动装箱开销，Java 8 提供了针对原始类型的优化接口：</p><table><thead><tr><th>通用接口</th><th>原始类型特化</th></tr></thead><tbody><tr><td><code>Predicate&lt;T&gt;</code></td><td><code>IntPredicate</code></td></tr><tr><td><code>Function&lt;T，R&gt;</code></td><td><code>IntToDoubleFunction</code></td></tr><tr><td><code>Consumer&lt;T&gt;</code></td><td><code>LongConsumer</code></td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">IntPredicate</span> even <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>even<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true（避免Integer装箱）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="双参数接口" tabindex="-1"><a class="header-anchor" href="#双参数接口" aria-hidden="true">#</a> 双参数接口</h2><p>处理需要两个参数的场景：</p><ul><li><strong>BiPredicate&lt;T，U&gt;</strong></li><li><strong>BiFunction&lt;T，U，R&gt;</strong></li><li><strong>BiConsumer&lt;T，U&gt;</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BiFunction</span><span class="token operator">&lt;</span><span class="token class-name">String</span>， <span class="token class-name">Integer</span>， <span class="token class-name">String</span><span class="token operator">&gt;</span> padLeft <span class="token operator">=</span> 
    <span class="token punctuation">(</span>str， num<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%&quot;</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">&quot;s&quot;</span>， str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>padLeft<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span>， <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;      Java&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><ol><li><strong>优先使用内置接口</strong>：避免重复造轮子</li><li><strong>注意类型推断</strong>：明确指定参数类型可提升可读性</li><li><strong>方法引用优化</strong>：用 <code>Class::method</code> 替代冗长Lambda</li><li><strong>避免过度链式</strong>：保持代码可维护性</li></ol><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Java 8 函数式接口为开发者提供了标准化的函数式编程工具集，配合Lambda表达式可实现：</p><p>✅ 更简洁的代码结构<br> ✅ 更强的类型安全<br> ✅ 更好的并行处理支持</p>`,37);function r(d,k){return t(),e("div",null,[l,i,p(" more "),u])}const v=s(c,[["render",r],["__file","03 java functional interface.html.vue"]]);export{v as default};
