import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as e,c as o,e as c,d as u,a as n,b as a,f as l}from"./app-6o-IiJuU.js";const i={},r=n("p",null,"在本教程中，我们将深入研究 Java 语言的一个核心概念——数组。",-1),k=n("h2",{id:"_1-什么是数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-什么是数组","aria-hidden":"true"},"#"),a(" 1.什么是数组")],-1),d=n("p",null,[a("首先，我们需要定义什么是数组？根据 Java 文档，"),n("strong",null,"数组是包含固定数量的相同类型值的对象。")],-1),v=n("p",null,"数组的元素是索引的，这意味着我们可以用数字（称为索引）访问它们。",-1),m=n("p",null,"我们可以将数组视为 Excel 单元格的编号列表，每个单元格都是一个包含值的变量。在 Java 中，编号从 0 开始。",-1),b=n("p",null,"有原始类型数组和对象类型数组。这意味着我们可以使用 int、float、boolean...的数组，也可以使用 String、Object 和自定义类型的数组。",-1),g=n("p",null,"以下是一个简化的数组 UML 类图，通过它，我们可以看出类之间的关系：",-1),y=l(`<p>从上可以看出：</p><ul><li>所有类都是 <code>Object</code> 的子类，因为 <code>Object</code> 是所有类的根类。</li><li>数组类可以实现 <code>Cloneable</code> 和 <code>Serializable</code> 接口。</li><li><code>ObjectArray</code> 和 <code>CloneableArray</code> 分别表示了 <code>普通对象数组</code> 和 <code>实现了Cloneable接口的对象数组</code>。</li><li>数组类继承了<code>Object</code>，并且具有一个<code>length</code>属性表示数组的长度。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>ObjectArray</code> 根据数据结构特点，可以是不同的数组，比如可以是 <code>ArrayList</code>、<code>ArraySet</code>。</p><p><code>CloneableArray</code> 也一样。</p></div><h2 id="_2-设置一个数组" tabindex="-1"><a class="header-anchor" href="#_2-设置一个数组" aria-hidden="true">#</a> 2.设置一个数组</h2><p>既然数组已经定义清楚了，让我们深入了解它们的用法。</p><p>让我们先进行声明和初始化。</p><p><br><br><br><br></p><h3 id="_2-1-声明数组" tabindex="-1"><a class="header-anchor" href="#_2-1-声明数组" aria-hidden="true">#</a> 2.1 声明数组</h3><p>我们将从声明开始。在 Java 中声明数组有两种方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> anOtherArray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>前者比后者使用得更广泛。</strong></p><h3 id="_2-2-初始化" tabindex="-1"><a class="header-anchor" href="#_2-2-初始化" aria-hidden="true">#</a> 2.2 初始化</h3><p>现在让我们看看如何初始化数组。同样，有多种方法可以初始化数组。</p><p>让我们从一个简单的方法开始：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过使用这种方法，我们初始化了一个由十个 int 元素组成的数组。请注意，我们需要指定数组的大小。</p><p>使用此方法时，<strong>我们将每个元素初始化为其默认值，此处为 0。初始化 Object 数组时，元素默认为 null</strong>。</p><p>我们现在将看到另一种方法，让我们有可能在创建数组时直接为数组设置值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，我们初始化了一个包含数字 1 到 5 的五个元素数组。使用此方法时，我们不需要指定数组的长度，而是在大括号之间直接声明的元素数。</p><p><br><br><br><br></p><h2 id="_3-数组的长度" tabindex="-1"><a class="header-anchor" href="#_3-数组的长度" aria-hidden="true">#</a> 3.数组的长度</h2><p><strong>数组的长度表示数组中的元素数，创建后，长度是固定的，无法更改。</strong></p><p>Java 提供了可用于确定数组长度的内置属性 length。此属性适用于所有数组类型，返回数组中的元素数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;anArray&#39;s length: &quot;</span> <span class="token operator">+</span> anArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

anArray&#39;s length<span class="token operator">:</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了使用 length 属性来确定数组的大小外，我们还可以使用 java.lang.reflect.Array 类中的 Array.getLength（） 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[Array.getLength()] anArray&#39;s length: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span>anArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Array.getLength（） 接受 Object type 中的参数。它在通用或反射上下文中处理数组的情况下很有用，例如当我们在编译时没有数组类型时。</p><p>看个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> arrayAsObj <span class="token operator">=</span> anArray<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;the array Object (anArray) &#39;s length: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span>arrayAsObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//output:</span>
the array <span class="token class-name">Object</span> <span class="token punctuation">(</span>anArray<span class="token punctuation">)</span> &#39;s length<span class="token operator">:</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Array.getLength（） 允许我们确定任何数组对象的长度，而无需将其转换为特定类型。</strong></p><h2 id="_4-访问元素" tabindex="-1"><a class="header-anchor" href="#_4-访问元素" aria-hidden="true">#</a> 4.访问元素</h2><p>现在让我们看看如何访问数组的元素。我们可以通过要求数组的索引位置来实现这一点。</p><p>例如，这个小代码片段将打印 10 到控制台：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>anArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们如何使用 index 来访问数组单元。<strong>括号之间的数字是我们想要访问的数组的特定位置</strong>。</p><p>访问单元格时，如果传递的索引为负数或超过最后一个单元格，Java 将抛出 <code>ArrayIndexOutOfBoundException</code>。</p><p>所以我们应该小心，<strong>不要使用负索引，或大于或等于数组大小的索引访问元素</strong>。</p><h2 id="_4-迭代数组" tabindex="-1"><a class="header-anchor" href="#_4-迭代数组" aria-hidden="true">#</a> 4.迭代数组</h2><p>逐个访问元素可能很有用，但我们可能想通过数组进行遍历。让我们看看如何做到这一点。 <br><br><br><br></p><p>第一种方法是使用 for 循环：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> anArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这应该将数字 1 到 5 打印到控制台。正如我们所看到的，我们利用了<strong>长度属性。这是一个公共属性，给我们数组的大小</strong>。</p><p>当然，可以使用其他循环机制，如 while 或 do while。但是，对于 Java 集合，可以使用 foreach 循环在数组上循环：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> anArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是 for 的增强语法糖，适用于不需要修改数组、不需要 index 来做其他事情的情况。</p><h2 id="_5-变量" tabindex="-1"><a class="header-anchor" href="#_5-变量" aria-hidden="true">#</a> 5.变量</h2><p>Java 源码中有 varargs 用于将任意数量的参数传递给方法这样的用法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">varargsMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> varargs<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此方法可以传递从 0 到任意数量的 String 参数。 这里我们必须知道的是，在方法体中，varargs 参数会变成一个数组。我们也可以直接将数组作为参数传递。 让我们看看如何重用上面声明的示例方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;Milk&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tomato&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Chips&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">varargsMethod</span><span class="token punctuation">(</span>anArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-将数组转为集合" tabindex="-1"><a class="header-anchor" href="#_6-将数组转为集合" aria-hidden="true">#</a> 6.将数组转为集合</h2><p>数组很好，当我们有时候处理集合会更方便，那如何将数组变成集合呢？</p><p>最无脑的方法是，创建一个空列表，然后迭代数组时填充元素到空列表中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> aList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> anArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    aList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是还有另一种更简洁的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> aList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>anArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>静态方法 Arrays.asList 采用 varargs 参数，并使用传递的值创建一个列表。不过这种方法有一些缺点：</p><ul><li>不能使用基本数据类型的数组</li><li>不能在创建的列表中添加或删除元素，会抛出 UnsupportedOerationException</li></ul><h2 id="_7-数组到流" tabindex="-1"><a class="header-anchor" href="#_7-数组到流" aria-hidden="true">#</a> 7.数组到流</h2><p>从 Java8 开始，数组可以使用 stream API，Java 提供了相关方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;Milk&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tomato&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Chips&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> aStream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>anArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> subStream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>anArray<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当把 Object 数组传递给该方法时，它将返回匹配类型的 stream。</p><h2 id="_8-数组排序" tabindex="-1"><a class="header-anchor" href="#_8-数组排序" aria-hidden="true">#</a> 8.数组排序</h2><p>如何对数组进行排序，即按照特定顺序重新排列其元素。</p><p><strong>Arrays 类为我们提供了 sort 方法。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>anArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// anArray is now {1, 2, 4, 5, 8}</span>

<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> yetAnotherArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Z&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>yetAnotherArray<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// yetAnotherArray is now {&quot;A&quot;, &quot;Z&quot;, &quot;E&quot;, &quot;B&quot;, &quot;C&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-在数组中搜索" tabindex="-1"><a class="header-anchor" href="#_9-在数组中搜索" aria-hidden="true">#</a> 9.在数组中搜索</h2><p>搜素数组最简单的方法，就是遍历数组并在数组元素中搜索要找的元素：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> anArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>anArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Found at index &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是一个有序的排序数组，我们可以使用另一种搜索方式，二叉搜索。</p><p>不过，Java 提供了现成的 API 可以使用，我们可以利用 <strong>Arrays.binarySearch 方法</strong></p><p>让我们看一个二分搜索方法用法的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>anArray<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Found at index &quot;</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-连接数组" tabindex="-1"><a class="header-anchor" href="#_10-连接数组" aria-hidden="true">#</a> 10.连接数组</h2><p>如何连接两个数组。这个想法是创建一个数组，其长度是要连接的两个数组之和。之后，我们必须添加第一个的元素，然后添加第二个的元素：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anotherArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resultArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>anArray<span class="token punctuation">.</span>length <span class="token operator">+</span> anotherArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> resultArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    resultArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> anArray<span class="token punctuation">.</span>length <span class="token operator">?</span> anArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> anotherArray<span class="token punctuation">[</span>i <span class="token operator">-</span> anArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 Arrays.setAll 方法来避免编写循环：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anotherArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resultArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>anArray<span class="token punctuation">.</span>length <span class="token operator">+</span> anotherArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>resultArray<span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> anArray<span class="token punctuation">.</span>length <span class="token operator">?</span> anArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> anotherArray<span class="token punctuation">[</span>i <span class="token operator">-</span> anArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,81);function h(A,w){const s=t("Mermaid");return e(),o("div",null,[r,c(" more "),k,d,v,m,b,g,u(s,{id:"mermaid-22",code:"eJyNkcFOwzAMhu99iki7DMFeAE2gaZzh0CdwO9NmcmNIMtCAvTtx0nWJNk27VOn3/3ac3y2Bcy8aOgtDpdRbs8XWq+XfYqHWxAahITzjoWRiK2thn4QEgjJVZmLerUargfSP/Oal0X5RLztWwRMHP871G4BS9/i5A3LzEXKzvXtUDTMhmGTo0Mfp50GIh+XzU1J6cP2aNyiKNvKIAD3X3mrTCUynyGffoL2wL9abjIQZO+X1gLzz19UHuUMZMOwKo2Gv3/dl68RWRBk+nBKYkhlDmLUCxDuto3DLd4wrpPEKQ/RmrxNc6+GD8EzMGuXLH9sRms73x/gujXibvdi+mA/VP456z98="}),y])}const _=p(i,[["render",h],["__file","01 java arrays guide.html.vue"]]);export{_ as default};
