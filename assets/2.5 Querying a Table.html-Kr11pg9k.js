import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as n,f as e}from"./app-O6B6fb-J.js";const p={},o=e(`<p>SELECT 语句用于查询检索表数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> weather <span class="token keyword">WHERE</span> city <span class="token operator">=</span> <span class="token string">&#39;San Francisco&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该语句分为： - 选择列表（列出要返回的列的部分）; - 表列表（列出要从中检索数据的表的部分）； - 可选限定条件（指定任何限制的部分）；</p><p>此处 * 是 “all columns” 的简写。</p><p>您可以在选择列表中编写表达式，而不仅仅是简单的列引用:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> city<span class="token punctuation">,</span> <span class="token punctuation">(</span>temp_hi<span class="token operator">+</span>temp_lo<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token keyword">AS</span> temp_avg<span class="token punctuation">,</span> <span class="token keyword">date</span> <span class="token keyword">FROM</span> weather<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>AS</code> 子句可以重新标记输出列，<code>WHERE</code> 子句包含布尔值 （真值） 表达式，并且仅返回布尔表达式为 true 的行。限定条件中允许使用常用的布尔运算符（AND、OR 和 NOT）。例如，以下检索旧金山下雨天的天气：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> weather
    <span class="token keyword">WHERE</span> city <span class="token operator">=</span> <span class="token string">&#39;San Francisco&#39;</span> <span class="token operator">AND</span> prcp <span class="token operator">&gt;</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以请求按排序顺序返回查询结果：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> weather
    <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> city<span class="token punctuation">,</span> temp_lo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DISTINCT</code> 子句从查询结果中删除重复的行：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> city
    <span class="token keyword">FROM</span> weather
    <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> city<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),t=[o];function l(c,r){return a(),n("div",null,t)}const u=s(p,[["render",l],["__file","2.5 Querying a Table.html.vue"]]);export{u as default};
