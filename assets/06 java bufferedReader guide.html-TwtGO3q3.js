const e=JSON.parse('{"key":"v-a5a140aa","path":"/javaer/base/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/7.Java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/06%20java%20bufferedReader%20guide.html","title":"06. BufferedReader","lang":"zh-CN","frontmatter":{"title":"06. BufferedReader","icon":"pen-to-square","order":6,"author":"LiuSongLing","date":"2025-01-04T00:00:00.000Z","category":["java"],"tag":["java","i/o"],"sticky":false,"star":false,"description":"BufferedReader 是 Java 中用于高效读取文本文件的类。它通过缓冲机制减少 I/O 操作次数，从而提升读取性能，特别适合处理大文本文件或需要逐行读取的场景。 本文将详细介绍 BufferedReader 的使用方法及其优势。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/javaer/base/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/7.Java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/06%20java%20bufferedReader%20guide.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"06. BufferedReader"}],["meta",{"property":"og:description","content":"BufferedReader 是 Java 中用于高效读取文本文件的类。它通过缓冲机制减少 I/O 操作次数，从而提升读取性能，特别适合处理大文本文件或需要逐行读取的场景。 本文将详细介绍 BufferedReader 的使用方法及其优势。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-10T03:15:44.000Z"}],["meta",{"property":"article:author","content":"LiuSongLing"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"i/o"}],["meta",{"property":"article:published_time","content":"2025-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-10T03:15:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06. BufferedReader\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-10T03:15:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LiuSongLing\\"}]}"]]},"headers":[{"level":2,"title":"1. 基本用法","slug":"_1-基本用法","link":"#_1-基本用法","children":[{"level":3,"title":"1.1 创建 BufferedReader","slug":"_1-1-创建-bufferedreader","link":"#_1-1-创建-bufferedreader","children":[]},{"level":3,"title":"1.2 读取单行数据","slug":"_1-2-读取单行数据","link":"#_1-2-读取单行数据","children":[]}]},{"level":2,"title":"2. 使用 BufferedReader 的优势","slug":"_2-使用-bufferedreader-的优势","link":"#_2-使用-bufferedreader-的优势","children":[{"level":3,"title":"2.1 缓冲机制提升性能","slug":"_2-1-缓冲机制提升性能","link":"#_2-1-缓冲机制提升性能","children":[]},{"level":3,"title":"2.2 支持逐行读取","slug":"_2-2-支持逐行读取","link":"#_2-2-支持逐行读取","children":[]}]},{"level":2,"title":"3. 其他常用方法","slug":"_3-其他常用方法","link":"#_3-其他常用方法","children":[{"level":3,"title":"3.1 read() 方法","slug":"_3-1-read-方法","link":"#_3-1-read-方法","children":[]},{"level":3,"title":"3.2 skip() 方法","slug":"_3-2-skip-方法","link":"#_3-2-skip-方法","children":[]},{"level":3,"title":"3.3 mark() 和 reset() 方法","slug":"_3-3-mark-和-reset-方法","link":"#_3-3-mark-和-reset-方法","children":[]}]},{"level":2,"title":"4. 处理大文件和性能优化","slug":"_4-处理大文件和性能优化","link":"#_4-处理大文件和性能优化","children":[{"level":3,"title":"4.1 使用较大的缓冲区","slug":"_4-1-使用较大的缓冲区","link":"#_4-1-使用较大的缓冲区","children":[]},{"level":3,"title":"4.2 并行处理大文件","slug":"_4-2-并行处理大文件","link":"#_4-2-并行处理大文件","children":[]}]},{"level":2,"title":"5. 常用场景","slug":"_5-常用场景","link":"#_5-常用场景","children":[{"level":3,"title":"5.1 处理日志文件","slug":"_5-1-处理日志文件","link":"#_5-1-处理日志文件","children":[]},{"level":3,"title":"5.2 读取配置文件","slug":"_5-2-读取配置文件","link":"#_5-2-读取配置文件","children":[]}]},{"level":2,"title":"6. 总结","slug":"_6-总结","link":"#_6-总结","children":[]}],"git":{"createdTime":1739157344000,"updatedTime":1739157344000,"contributors":[{"name":"liusongling","email":"15879144378@163.com","commits":1}]},"readingTime":{"minutes":4.11,"words":1232},"filePathRelative":"javaer/base/一、Java基础/7.Java输入输出流/06 java bufferedReader guide.md","localizedDate":"2025年1月4日","excerpt":"<p><code>BufferedReader</code> 是 Java 中用于高效读取文本文件的类。它通过缓冲机制减少 I/O 操作次数，从而提升读取性能，特别适合处理大文本文件或需要逐行读取的场景。</p>\\n<p>本文将详细介绍 <code>BufferedReader</code> 的使用方法及其优势。</p>\\n","autoDesc":true}');export{e as data};
